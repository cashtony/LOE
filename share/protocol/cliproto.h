/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: Zhou Quan                             **
********************************************************************/

/*       Version Number: 1          */

#ifndef CLIPROTO_H_INCLUDE_VERSION_1
#define CLIPROTO_H_INCLUDE_VERSION_1

#include "netdata.h"
#include "headerproto.h"

/*Defines Begin*/
#define LG_SUCCESS             0
#define LG_FAIL                1
#define LG_INTER               2
#define MAX_GATHER_ITEM_COUNT  500
#define LG_USERNAME_LEN        64
#define LG_DIGITID_LEN         21
#define LG_SESSIONID_LEN       8
#define LG_SIG_LEN             32
#define LG_TYPE_LEN            21
#define LG_MAX_GAMESERVER      255
#define LG_CLIENTKEY_LEN       8
#define LG_INFO_LEN            255
#define CGPROTO_BEGIN          1
#define CSPROTO_BEGIN          2000
#define MAX_DYNCODE_LEN        20480
#define GS_STATE_ONLINE        1
#define GS_STATE_OFFLINE       0
#define GS_LOGOUT_EXIT         1
#define GS_LOGOUT_QUIT         2
#define GS_LOGOUT_SWITCH_SCENE 3
#define GC_MAX_GATESERVER      255
#define MAX_PATH_LEN           260
#define MAX_MONSTER_IN_LEVEL   100
#define MAX_MONSTER_DROP       5
#define MAX_LEVEL_DROP         50
#define MAX_LEVEL_SKILL        100
#define MAX_ERROR_STRING_LEN   1024
#define GS_MAX_SYNC_ROLE_COUNT 100
#define MAX_INITIAL_BUFF_COUNT 16
#define CLIPROTO_MSGID_RANGE 4227
#define CLIPROTO_MSGID_OFFSET 1
/*Defines End*/


/*Enums Begin*/
enum EMoveSyncType //  
{
	MOVE_SYNC_TYPE_Normal       = 0, // 普通同步模式  
	MOVE_SYNC_TYPE_NoOther, // 完全不同步他人移动信息 
	MOVE_SYNC_TYPE_ReducedOther, // 只同步好友队友等有关联的他人移动信息 
};

/*Enums End*/


enum EN_CliProto_MessageID
{
	CGID_LOGIN                           = 1,
	GCID_LOGIN                           = 2,
	CGID_LOGOUT                          = 3,
	GCID_LOGOUT                          = 4,
	GCID_ROLELIST                        = 5,
	CGID_CREATEROLE                      = 6,
	GCID_CREATEROLE                      = 7,
	CGID_DELROLE                         = 8,
	GCID_DELROLE                         = 9,
	CGID_SELECTROLE                      = 14,
	GCID_SELECTROLE                      = 15,
	GCID_QUEUE_INFO                      = 21,
	GCID_GPK_DYN_CODE                    = 26,
	CGID_GPK_NEGLECT                     = 28,
	GCID_GPK_CAL_ORIGIN                  = 30,
	CGID_GPK_CAL_RESULT                  = 32,
	GCID_ERROR                           = 100,
	GCID_ERRORSTRING                     = 101,
	CGID_HEART_BEAT                      = 102,
	GCID_HEART_BEAT                      = 103,
	GCID_PUBLIC_STRING                   = 104,
	LGID_LOGIN_REQ                       = 1001,
	LGID_LOGIN_ACK                       = 1003,
	LGID_GAMESERVER_LIST_REQ             = 1011,
	LGID_GAMESERVER_LIST_ACK             = 1012,
	GSID_SERVERINFO_RPT                  = 1100,
	GSID_SERVER_GROUP_DESC_RPT           = 1110,
	GSID_ENTERGAME_REQ                   = 1211,
	GSID_ENTERGAME_ACK                   = 1212,
	GSID_LEAVEGAME_REQ                   = 1221,
	GSID_LEAVEGAME_ACK                   = 1222,
	GSID_KICKOUT_NTF                     = 1231,
	GSID_MSG_BROADCAST                   = 1232,
	GSID_LOAD_GSDATA_NTF                 = 1242,
	GSID_UPDATEGMLEVEL_NTF               = 1246,
	GSID_SWITCHSCENE_REQ                 = 1247,
	GSID_SWITCHSCENE_ACK                 = 1248,
	SCID_SELF_LOADSCENE                  = 2000,
	CSID_ENTERSCENE                      = 2001,
	SCID_SELF_ENTERSCENE                 = 2002,
	SCID_SELF_DATA_END                   = 2003,
	SCID_SELF_APPEAR                     = 2004,
	SCID_SELF_BASE_PRO                   = 2005,
	CSID_LEVEL_REQ                       = 2006,
	SCID_LEVEL_ACK                       = 2007,
	CSID_LEVEL_RESULT_NTF                = 2010,
	SCID_TREASURE_CHEST_NTF              = 2011,
	CSID_OPEN_TREASURE_CHEST_REQ         = 2012,
	SCID_OPEN_TREASURE_CHEST_ACK         = 2013,
	SCID_LEVEL_INFO                      = 2014,
	CSID_GET_BATTLE_BOX_REQ              = 2015,
	SCID_GET_BATTLE_BOX_ACK              = 2016,
	SCID_BATTLE_GOT_STAR_NTF             = 2017,
	SCID_SELF_VOLATILE_PRO               = 2030,
	SCID_CLIENT_CONFIG_NTF               = 2040,
	CSID_CLIENT_CONFIG_UPDATE            = 2041,
	SCID_ERROR_NTF                       = 2050,
	SCID_SELF_ITEM_NTF                   = 2100,
	CSID_MOVE_ITEM_REQ                   = 2101,
	SCID_MOVE_ITEM_ACK                   = 2102,
	SCID_ROLE_BAG_NTF                    = 2110,
	SCID_ROLE_EQUIP_NTF                  = 2111,
	CSID_ROLE_EQUIP_REQ                  = 2112,
	CSID_ROLE_EVENT_REQ                  = 2113,
	SCID_ROLE_BAG_SINGLE_LEAVE_NTF       = 2114,
	SCID_ROLE_BAG_SINGLE_ENTER_NTF       = 2115,
	SCID_ROLE_EQUIP_SINGLE_LEAVE_NTF     = 2116,
	SCID_ROLE_EQUIP_SINGLE_ENTER_NTF     = 2117,
	CSID_ROLE_ITEMUP_RPT                 = 2118,
	SCID_ROLE_ITEMUP_NTF                 = 2119,
	SCID_ROLE_ITEMUP_ACK                 = 2120,
	SCID_ROLE_SUIT_NTF                   = 2121,
	CSID_ROLE_HOLE_ON_REQ                = 2122,
	SCID_ROLE_HOLE_ON_ACK                = 2123,
	CSID_ROLE_HOLE_OFF_REQ               = 2124,
	SCID_ROLE_HOLE_OFF_ACK               = 2125,
	CSID_ROLE_HOLE_REFRESH_REQ           = 2126,
	SCID_ROLE_HOLE_REFRESH_ACK           = 2127,
	CSID_ROLE_HOLE_MERGE_REQ             = 2128,
	SCID_ROLE_HOLE_MERGE_ACK             = 2129,
	CSID_ROLE_HOLE_MERGE2_REQ            = 2130,
	SCID_ROLE_HOLE_MERGE2_ACK            = 2131,
	CSID_LOCK_RPT                        = 2140,
	CSID_ROLE_USEITEM_REQ                = 2141,
	CSID_PET_USEITEM_REQ                 = 2143,
	SCID_PET_USEITEM_ACK                 = 2144,
	SCID_ROLE_LIMIT_NTF                  = 2145,
	CSID_GATHER_ITEM_MERGE_REQ           = 2150,
	SCID_GATHER_ITEM_MERGE_ACK           = 2152,
	SCID_GATHER_INFO_NTF                 = 2153,
	SCID_GATHER_SINGLE_ENTER_NTF         = 2154,
	SCID_GATHER_SINGLE_LEAVE_NTF         = 2155,
	CSID_ROLE_PROD_REQ                   = 2156,
	SCID_ROLE_PROD_ACK                   = 2157,
	SCID_ROLE_USEITEM_START_ACK          = 2160,
	SCID_ROLE_USEITEM_END_ACK            = 2161,
	SCID_USER_SKILLS_NTF                 = 2200,
	CSID_LEARN_SKILL                     = 2201,
	SCID_SKILL_INFO_NTF                  = 2202,
	SCID_REMOVE_SKILL_NTF                = 2203,
	SCID_SKILL_POINT_NTF                 = 2204,
	CSID_SKILL_RESET_ALL_REQ             = 2205,
	SCID_USER_PETS_NTF                   = 2300,
	SCID_PET_INFO_NTF                    = 2301,
	CSID_SET_BATTLE_PET_REQ              = 2302,
	SCID_SET_BATTLE_PET_NTF              = 2303,
	CSID_PET_GET_EXP_RPT                 = 2310,
	SCID_PET_LEVEL_NTF                   = 2311,
	CSID_PET_UP_REQ                      = 2312,
	SCID_PET_UP_ACK                      = 2313,
	CSID_PET_MERGE_REQ                   = 2314,
	SCID_PET_ADD_NTF                     = 2315,
	SCID_PETS_RECORD_NTF                 = 2316,
	SCID_PET_BAG_NTF                     = 2317,
	CSID_PET_EQUIP_REQ                   = 2330,
	CSID_PET_EVENT_REQ                   = 2331,
	SCID_PET_BAG_SINGLE_LEAVE_NTF        = 2332,
	SCID_PET_BAG_SINGLE_ENTER_NTF        = 2333,
	CSID_PET_TEAM_RPT                    = 2334,
	SCID_PET_TEAM_NTF                    = 2335,
	SCID_PET_GET_EXP_ACK                 = 2336,
	SCID_PET_SINGLE_ENTER_NTF            = 2337,
	SCID_PET_SINGLE_LEAVE_NTF            = 2338,
	SCID_PET_EVENT_ACK                   = 2350,
	CSID_MOVE_SYNC_MODE                  = 2400,
	CSID_MOVE_BEGIN                      = 2401,
	CSID_MOVE_STOP                       = 2402,
	SCID_MOVE_BEGIN                      = 2403,
	SCID_MOVE_STOP                       = 2404,
	SCID_OTHER_APPEAR                    = 2405,
	SCID_OTHER_UPDATE                    = 2406,
	SCID_OTHER_DISAPPEAR                 = 2407,
	CSID_CHAT                            = 2600,
	SCID_CHAT                            = 2601,
	SCID_CHAT_ACK                        = 2602,
	SCID_FRIENDS_LIST_NTF                = 2800,
	CSID_QUERY_ROLE_REQ                  = 2801,
	SCID_QUERY_ROLE_ACK                  = 2802,
	CSID_ADD_FRIEND_REQ                  = 2803,
	SCID_ADD_FRIEND_ACK                  = 2804,
	CSID_REMOVE_FRIEND_REQ               = 2805,
	SCID_REMOVE_FRIEND_ACK               = 2806,
	CSID_DONATE_ACTION_POINT_REQ         = 2807,
	SCID_DONATE_ACTION_POINT_ACK         = 2808,
	SCID_DONATE_ACTION_POINT_OTHER_NTF   = 2809,
	CSID_RECEIVE_ACTION_POINT_REQ        = 2810,
	SCID_RECEIVE_ACTION_POINT_ACK        = 2811,
	CSID_RESPONSE_ADD_FRIEND_REQ         = 2812,
	SCID_REQUEST_ADD_FRIEND_NTF          = 2813,
	SCID_FRIEND_INFO_CHANGE_NTF          = 2814,
	SCID_FRIEND_REMOVE_INVITE_NTF        = 2815,
	CSID_FRIEND_ASSIST_LIST_REQ          = 2816,
	SCID_FRIEND_ASSIST_LIST_ACK          = 2817,
	CSID_SELECT_FRIEND_ASSIST_REQ        = 2818,
	SCID_SELECT_FRIEND_ASSIST_ACK        = 2819,
	SCID_FRIEND_EPINFO_NTF               = 2820,
	CSID_FRIENDS_LIST_REQ                = 2821,
	SCID_ABYSS_TRIGGER_ACK               = 3000,
	CSID_ABYSS_OPEN_REQ                  = 3001,
	SCID_ABYSS_OPEN_ACK                  = 3002,
	SCID_ABYSS_OPEN_NTF                  = 3003,
	CSID_GET_ABYSS_TRIGGER_LIST_REQ      = 3004,
	SCID_GET_ABYSS_TRIGGER_LIST_ACK      = 3005,
	CSID_GET_ABYSS_OPEN_LIST_REQ         = 3006,
	SCID_GET_ABYSS_OPEN_LIST_ACK         = 3007,
	CSID_GET_ABYSS_OPEN_REC_REQ          = 3008,
	SCID_GET_ABYSS_OPEN_REC_ACK          = 3009,
	SCID_ENTER_ABYSS_ACK                 = 3011,
	SCID_ABYSS_RUN_NTF                   = 3016,
	SCID_MAIL_LIST_NTF                   = 3200,
	CSID_SEND_MAIL_REQ                   = 3201,
	SCID_SEND_MAIL_ACK                   = 3202,
	CSID_GET_ITEM_FROM_MAIL_REQ          = 3203,
	CSID_GET_MONEY_FROM_MAIL_REQ         = 3204,
	CSID_READ_MAIL_REQ                   = 3205,
	SCID_READ_MAIL_ACK                   = 3206,
	CSID_DELETE_MAIL_REQ                 = 3207,
	SCID_DELETE_MAIL_ACK                 = 3208,
	SCID_UPDATE_MAIL_NTF                 = 3209,
	SCID_SHOP_ACTION_POINT_BOUGHT_NTF    = 3300,
	CSID_SHOP_BUY_ACTION_POINT_REQ       = 3301,
	SCID_SHOP_BUY_ACTION_POINT_ACK       = 3302,
	SCID_SHOP_BUY_PET_INFO_CHEAP_NTF     = 3310,
	SCID_SHOP_BUY_PET_INFO_EXPENSIVE_NTF = 3311,
	CSID_SHOP_BUY_PET_REQ                = 3312,
	SCID_SHOP_BUY_PET_ACK                = 3313,
	CSID_SHOP_GET_GOODSLIST_REQ          = 3320,
	SCID_SHOP_GET_GOODSLIST_ACK          = 3321,
	CSID_SHOP_BUY_GOODS_REQ              = 3322,
	SCID_SHOP_BUY_GOODS_ACK              = 3323,
	CSID_SHOP_SECRET_GOODS_REQ           = 3350,
	SCID_SHOP_SECRET_GOODS_ACK           = 3351,
	CSID_SHOP_SECRET_BUY_REQ             = 3360,
	SCID_SHOP_SECRET_BUY_ACK             = 3361,
	CSID_SHOP_SECRET_REFRESH_REQ         = 3370,
	CSID_SELF_PVP_PRO_REQ                = 3400,
	SCID_SELF_PVP_PRO_ACK                = 3401,
	CSID_GET_PVP_MATCH_REQ               = 3402,
	SCID_GET_PVP_MATCH_ACK               = 3403,
	CSID_ENTER_PVP_REQ                   = 3404,
	SCID_ENTER_PVP_ACK                   = 3405,
	CSID_PVP_RETULT_REQ                  = 3406,
	SCID_PVP_RETULT_ACK                  = 3407,
	CSID_GET_RANK_LIST_REQ               = 3408,
	SCID_GET_RANK_LIST_ACK               = 3409,
	CSID_GET_PVP_MILITARY_REWARD_REQ     = 3410,
	SCID_GET_PVP_MILITARY_REWARD_ACK     = 3411,
	CSID_GET_PVP_REPUTE_REWARD_REQ       = 3412,
	SCID_GET_PVP_REPUTE_REWARD_ACK       = 3413,
	CSID_PVP_BUY_CHALLENGE_TIMES_REQ     = 3414,
	SCID_PVP_BUY_CHALLENGE_TIMES_ACK     = 3415,
	SCID_PVP_TIME_NTF                    = 3416,
	CSID_GET_PVP_ROLE_INFO_REQ           = 3417,
	SCID_GET_PVP_ROLE_INFO_ACK           = 3418,
	SCID_VIP_INFO_NTF                    = 3500,
	SCID_VIP_RMBINFO_NTF                 = 3501,
	SCID_VIP_MONTHCARD_NTF               = 3520,
	CSID_VIP_MONTHCARD_GETITEM_REQ       = 3521,
	SCID_VIP_MONTHCARD_GETITEM_ACK       = 3522,
	SCID_GIFT_SIGN_NTF                   = 3600,
	SCID_GIFT_SIGN_VIP_NTF               = 3601,
	CSID_GIFT_SIGN                       = 3602,
	CSID_GIFT_SIGN_VIP                   = 3603,
	SCID_GIFT_LEVEL_NTF                  = 3610,
	CSID_GIFT_LEVEL                      = 3611,
	SCID_GIFT_DAY_NTF                    = 3620,
	SCID_GIFT_DAY_UPD                    = 3621,
	CSID_GIFT_DAY_SCORE_REQ              = 3622,
	CSID_GIFT_DAY_BOX_REQ                = 3623,
	SCID_GIFT_DAY_BOX_NTF                = 3624,
	CSID_GIFT_JIHUOMA_REQ                = 3660,
	SCID_GIFT_JIHUOMA_ACK                = 3661,
	CSID_GIFT_EP_INFO_REQ                = 3670,
	SCID_GIFT_EP_INFO_ACK                = 3671,
	CSID_GIFT_RECEIVE_EP_REQ             = 3672,
	SCID_GIFT_RECEIVE_EP_ACK             = 3673,
	CSID_WB_INFO_REFRESH_REQ             = 3700,
	SCID_WB_INFO_REFRESH_ACK             = 3701,
	CSID_WB_ADD_BUF_REQ                  = 3702,
	SCID_WB_ADD_BUF_ACK                  = 3703,
	CSID_WB_RELIVE_REQ                   = 3704,
	SCID_WB_RELIVE_ACK                   = 3705,
	SCID_WB_KILLED_NTF                   = 3706,
	SCID_WB_RUN_NTF                      = 3707,
	CSID_WB_ENTER_REQ                    = 3708,
	SCID_WB_ENTER_ACK                    = 3709,
	CSID_WB_RESULT_REQ                   = 3710,
	SCID_WB_RESULT_ACK                   = 3711,
	CSID_ROLE_RANK_REQ                   = 3800,
	SCID_ROLE_RANK_ACK                   = 3801,
	CSID_GET_PT_BASEINFO_REQ             = 3900,
	SCID_GET_PT_BASEINFO_ACK             = 3901,
	CSID_BUY_PT_TIMES_REQ                = 3902,
	SCID_BUY_PT_TIMES_ACK                = 3903,
	CSID_GET_MD_BASEINFO_REQ             = 4000,
	SCID_GET_MD_BASEINFO_ACK             = 4001,
	CSID_BUY_MD_TIMES_REQ                = 4002,
	SCID_BUY_MD_TIMES_ACK                = 4003,
	CSID_GET_FD_BASEINFO_REQ             = 4100,
	SCID_GET_FD_BASEINFO_ACK             = 4101,
	CSID_BUY_FD_TIMES_REQ                = 4102,
	SCID_BUY_FD_TIMES_ACK                = 4103,
	CSID_GUILD_INFO_REQ                  = 4200,
	CSID_GUILD_LIST_REQ                  = 4201,
	SCID_GUILD_LIST_ACK                  = 4202,
	CSID_GUILD_ENTER_REQ                 = 4203,
	SCID_GUILD_ENTER_ACK                 = 4204,
	CSID_GUILD_CREATE_REQ                = 4205,
	SCID_GUILD_CREATE_ACK                = 4206,
	CSID_GUILD_LEAVE_REQ                 = 4207,
	SCID_GUILD_LEAVE_ACK                 = 4208,
	SCID_GUILD_BASEINFO_ACK              = 4210,
	CSID_GUILD_LOG_REQ                   = 4211,
	SCID_GUILD_LOG_ACK                   = 4212,
	CSID_GUILD_CHANGE_NOTICE_REQ         = 4213,
	CSID_GUILD_DETAIL_REQ                = 4220,
	SCID_GUILD_DETAIL_ACK                = 4221,
	CSID_GUILD_ENTERLIST_REQ             = 4222,
	SCID_GUILD_ENTERLIST_ACK             = 4223,
	CSID_GUILD_ENTER_ACCEPT_REQ          = 4224,
	SCID_GUILD_ENTER_ACCEPT_ACK          = 4225,
	CSID_GUILD_ENTER_CLEAR_REQ           = 4226,
	SCID_GUILD_ENTER_CLEAR_ACK           = 4227,
};

class CCliProto;
/*Define Structs and Unions        Begin*/
typedef struct tagLGPKG_LOGIN_REQ{
	enum{Type = LGID_LOGIN_REQ};
	typedef CCliProto ProtoType;
	char             szType[LG_TYPE_LEN];	/// 目前只支持gplus和pt登陆方式
	unsigned int     dwTokenLen;
	unsigned char    abyToken[LG_INFO_LEN];	/// G+认证方式填g+的返回串， pt认证方式填dfw12345;12345
	unsigned int     dwServerGroup;	/// 选择的是哪个组，提供组号
	unsigned int     dwResourceLevel;	/// 选择的资源包类型，平台+资源包等级，0 android， 1 ios， 2 win8
}LGPKG_LOGIN_REQ;

typedef struct tagLGPKG_ACT_REQ{
	typedef CCliProto ProtoType;
	int              nSubReq;
	int              nInfoLen;
	unsigned char    abyInfo[LG_INFO_LEN];
}LGPKG_ACT_REQ;

typedef struct tagSCDNInfo{
	typedef CCliProto ProtoType;
	char             szPath[MAX_PATH_LEN];
}SCDNInfo;

typedef struct tagSBundleInfoList{
	typedef CCliProto ProtoType;
	char             szPath[MAX_PATH_LEN];
	unsigned int     dwCDNCount;
	SCDNInfo         astCDN[8];	/// 可选择的cdn基地址，用于拼接bundle相对路径得到下载地址
}SBundleInfoList;

typedef struct tagLGDT_LOGIN_SUCCESS{
	typedef CCliProto ProtoType;
	char             szUsername[LG_USERNAME_LEN];
	char             szDigitID[LG_DIGITID_LEN];
	unsigned char    abySessionID[LG_SESSIONID_LEN];
	unsigned char    abySig[LG_SIG_LEN];
	int              nInfoLen;
	unsigned char    abyInfo[LG_INFO_LEN];
	SServerInfo      stGateInfo;	/// 服务器地址      
	SBundleInfoList  stBundleInfo;	/// 更新包数据      
}LGDT_LOGIN_SUCCESS;

typedef struct tagLGDT_LOGIN_FAIL{
	typedef CCliProto ProtoType;
	int              nErrCode;
	int              nSubErrCode;
	char             szMaintainInfo[LG_INFO_LEN];	/// 维护公告        
}LGDT_LOGIN_FAIL;

typedef struct tagLGDT_LOGIN_INTERMEDIATE{
	typedef CCliProto ProtoType;
	int              nSubAck;
	int              nInfoLen;
	unsigned char    abyInfo[LG_INFO_LEN];
}LGDT_LOGIN_INTERMEDIATE;

typedef union tagLGDT_ACT_REPLY{
	typedef CCliProto ProtoType;
	LGDT_LOGIN_SUCCESS stSucc;
	LGDT_LOGIN_FAIL  stFail;
	LGDT_LOGIN_INTERMEDIATE stInter;
}LGDT_ACT_REPLY;

typedef struct tagLGPKG_LOGIN_ACK{
	enum{Type = LGID_LOGIN_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byAckType;
	LGDT_ACT_REPLY   stReply;
}LGPKG_LOGIN_ACK;

typedef struct tagLGPKG_GAMESERVER_LIST_REQ{
	enum{Type = LGID_GAMESERVER_LIST_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byFlags;
	unsigned char    abySig[LG_SIG_LEN];
}LGPKG_GAMESERVER_LIST_REQ;

typedef struct tagLGPKG_GAMESERVER_LIST_ACK{
	enum{Type = LGID_GAMESERVER_LIST_ACK};
	typedef CCliProto ProtoType;
	unsigned short   wCount;
	SGameServerInfo  astList[LG_MAX_GAMESERVER];
}LGPKG_GAMESERVER_LIST_ACK;

typedef struct tagGC_ERROR{
	enum{Type = GCID_ERROR};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误号          
}GC_ERROR;

typedef struct tagGC_ERRORSTRING{
	enum{Type = GCID_ERRORSTRING};
	typedef CCliProto ProtoType;
	char             szErrCode[MAX_ERROR_STRING_LEN];	/// 错误文本        
}GC_ERRORSTRING;

typedef struct tagCG_HEART_BEAT{
	enum{Type = CGID_HEART_BEAT};
	typedef CCliProto ProtoType;
}CG_HEART_BEAT;

typedef struct tagGC_HEART_BEAT{
	enum{Type = GCID_HEART_BEAT};
	typedef CCliProto ProtoType;
}GC_HEART_BEAT;

/* 系统公告 */
typedef struct tagGC_PUBLIC_STRING{
	enum{Type = GCID_PUBLIC_STRING};
	typedef CCliProto ProtoType;
	char             szInfo[512];	/// 公告内容        
}GC_PUBLIC_STRING;

/* 客户端登录Gate Server请求   */
typedef struct tagCG_LOGIN{
	enum{Type = CGID_LOGIN};
	typedef CCliProto ProtoType;
	char             szPTID[PTID_LEN];	/// 客户端的账号    
	int              nLoginDataLen;	/// 登录数据长度    
	unsigned char    abyLoginData[64];	/// 登录数据，从SDLoginClient组件中获取的数据
	char             szProtoVersion[33];	/// 协议md5         
	int              nMainVersion;	/// 主版本号        
	int              nSubVersion;	/// 次版本号        
	int              nBuildVersion;	/// 编译版本号      
	int              nResourceVersion;	/// 资源版本号      
}CG_LOGIN;

/* 客户端登录Gate Server的响应  */
typedef struct tagGC_LOGIN{
	enum{Type = GCID_LOGIN};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误号          
	char             szErrMsg[255];	/// 错误描述文字    
	unsigned char    byEncryptType;	/// 加密类型:0不加密, 1动态加密
	int              nLen;	/// DynCode的长度   
	unsigned char    abyDynCode[MAX_DYNCODE_LEN];	/// DynCode         
	unsigned int     dwQueueToken;	/// QueueToken排队流水号，0表示不用排队。若需要排队，则可以期待定期收到排队状态更新消息
	unsigned int     dwLastEnterQueueToken;	/// 该服务器组最近一个进入游戏的玩家的排队流水号
}GC_LOGIN;

/* 客户端退出游戏的请求  */
typedef struct tagCG_LOGOUT{
	enum{Type = CGID_LOGOUT};
	typedef CCliProto ProtoType;
	unsigned char    byType;	/// 退出类型(GS_LOGOUT_EXIT:大退, GS_LOGOUT_QUIT:小退)
}CG_LOGOUT;

/* 客户端退出Gate Server的响应 */
typedef struct tagGC_LOGOUT{
	enum{Type = GCID_LOGOUT};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误号          
	unsigned char    byType;	/// 退出类型(GS_LOGOUT_EXIT:大退, GS_LOGOUT_QUIT:小退) 
}GC_LOGOUT;

/* 排队信息  */
typedef struct tagGC_QUEUE_INFO{
	enum{Type = GCID_QUEUE_INFO};
	typedef CCliProto ProtoType;
	unsigned int     dwLastPassToken;	/// 前面还有多少人  
	int              nPriority;	/// 排队优先级, 0:vip队列, 1:普通队列
}GC_QUEUE_INFO;

/* 返回角色列表  */
typedef struct tagGC_ROLELIST{
	enum{Type = GCID_ROLELIST};
	typedef CCliProto ProtoType;
	unsigned char    byCount;	/// 角色个数        
	unsigned char    byLastSelect;	/// 上次选择角色的序号
	SRoleInfoWithEquip astRoleInfoList[ACTIVE_ROLE_NUM];	/// 角色信息        
}GC_ROLELIST;

/* 请求创建角色  */
typedef struct tagCG_CREATEROLE{
	enum{Type = CGID_CREATEROLE};
	typedef CCliProto ProtoType;
	SRoleInfo        stRoleInfo;	/// 角色信息        
	unsigned int     dwServerUniqueID;	/// 创建角色所在的服务器，来自服务器列表，是所选服对应的ServerUniqueID
}CG_CREATEROLE;

/* 回应创建角色  */
typedef struct tagGC_CREATEROLE{
	enum{Type = GCID_CREATEROLE};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误号 0表示正常
	SRoleInfo        stRoleInfo;	/// 角色信息        
	char             szErrString[MAX_ERROR_STRING_LEN];	/// 错误文本        
}GC_CREATEROLE;

/* 请求删除角色  */
typedef struct tagCG_DELROLE{
	enum{Type = CGID_DELROLE};
	typedef CCliProto ProtoType;
	unsigned long long qwRoleDBID;
}CG_DELROLE;

/* 回应删除角色  */
typedef struct tagGC_DELROLE{
	enum{Type = GCID_DELROLE};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误号          
}GC_DELROLE;

/* 选取角色  */
typedef struct tagCG_SELECTROLE{
	enum{Type = CGID_SELECTROLE};
	typedef CCliProto ProtoType;
	unsigned long long qwRoleDBID;
}CG_SELECTROLE;

/* 回应选取角色  */
typedef struct tagGC_SELECTROLE{
	enum{Type = GCID_SELECTROLE};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误号          
	char             szErrString[MAX_ERROR_STRING_LEN];	/// 错误文本        
}GC_SELECTROLE;

typedef struct tagGC_GPK_CLT_DYN_CODE{
	enum{Type = GCID_GPK_DYN_CODE};
	typedef CCliProto ProtoType;
	unsigned int     dwCount;
	unsigned char    abyCode[12288];
}GC_GPK_CLT_DYN_CODE;

typedef struct tagCG_GPK_CLT_NEGLECT{
	enum{Type = CGID_GPK_NEGLECT};
	typedef CCliProto ProtoType;
	unsigned char    abyNothing[196];
}CG_GPK_CLT_NEGLECT;

/* 客户端对下面的内容进行转换，结果通过CG_GPK_CAL_RESULT返回服务器，服务器调用同一函数验证 */
typedef struct tagGC_GPK_CAL_ORIGIN{
	enum{Type = GCID_GPK_CAL_ORIGIN};
	typedef CCliProto ProtoType;
	unsigned char    abyOriginal[24];
}GC_GPK_CAL_ORIGIN;

typedef struct tagCG_GPK_CAL_RESULT{
	enum{Type = CGID_GPK_CAL_RESULT};
	typedef CCliProto ProtoType;
	unsigned char    abyResult[24];
}CG_GPK_CAL_RESULT;

/* Gate向Gameserver报告自己的身份 */
typedef struct tagGSPKG_SERVERINFO_RPT{
	enum{Type = GSID_SERVERINFO_RPT};
	typedef CCliProto ProtoType;
	unsigned int     dwServerID;	/// ServerID        
}GSPKG_SERVERINFO_RPT;

typedef struct tagGSPKG_SERVER_GROUP_DESC_RPT{
	enum{Type = GSID_SERVER_GROUP_DESC_RPT};
	typedef CCliProto ProtoType;
	char             szGroupName[MAX_SERVER_DESC_LEN];
}GSPKG_SERVER_GROUP_DESC_RPT;

typedef struct tagGSPKG_PLAYER_GPK_RPT{
	typedef CCliProto ProtoType;
}GSPKG_PLAYER_GPK_RPT;

/* GateServer 向GS转发登录GS请求 */
typedef struct tagGSPKG_ENTERGAME_REQ{
	enum{Type = GSID_ENTERGAME_REQ};
	typedef CCliProto ProtoType;
	char             szPTID[PTID_LEN];	/// PT帐号名        
	unsigned long long qwDigitID;
	char             szAccountName[ROLE_NAME_LEN];
	unsigned long long qwRoleId;	/// 角色名          
	unsigned int     dwFlags;	/// 标志            
	unsigned char    byGmLevel;	/// GmLevel         
	unsigned short   wSessionID;	/// SESSIONID       
	unsigned int     dwSceneId;	/// 场景ID          
	unsigned char    byEnterType;	/// 进入场景的方式 0上线，1切换场景 
	unsigned int     dwGateSvrID;
	SLMAccountInfo   stAccountInfo;
}GSPKG_ENTERGAME_REQ;

/* 登录GS回应  */
typedef struct tagGSPKG_ENTERGAME_ACK{
	enum{Type = GSID_ENTERGAME_ACK};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误码          
	unsigned int     dwFlags;	/// 标志            
}GSPKG_ENTERGAME_ACK;

/* 退出GS请求  */
typedef struct tagGSPKG_LEAVEGAME_REQ{
	enum{Type = GSID_LEAVEGAME_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byType;	/// 退出类型 (GS_LOGOUT_EXIT:大退, GS_LOGOUT_QUIT:小退) 
}GSPKG_LEAVEGAME_REQ;

/* 退出GS回应  */
typedef struct tagGSPKG_LEAVEGAME_ACK{
	enum{Type = GSID_LEAVEGAME_ACK};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误码          
	unsigned char    byType;	/// 退出类型        
}GSPKG_LEAVEGAME_ACK;

/* 跳转场景请求  */
typedef struct tagGSPKG_SWITCHSCENE_REQ{
	enum{Type = GSID_SWITCHSCENE_REQ};
	typedef CCliProto ProtoType;
	unsigned int     dwSceneTemplateID;	/// 场景模板id      
	unsigned int     dwSceneID;	/// 场景实例id，用于跳线, 如果不指定实例id 赋值-1 
}GSPKG_SWITCHSCENE_REQ;

/* 跳转场景请求回应  */
typedef struct tagGSPKG_SWITCHSCENE_ACK{
	enum{Type = GSID_SWITCHSCENE_ACK};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误码          
	unsigned int     dwSceneTemplateID;	/// 场景模板id      
	unsigned int     dwSceneID;	/// 场景实例id，用于跳线, 如果不指定实例id 赋值-1 
}GSPKG_SWITCHSCENE_ACK;

/* 踢人通知  */
typedef struct tagGSPKG_KICKOUT_NTF{
	enum{Type = GSID_KICKOUT_NTF};
	typedef CCliProto ProtoType;
	int              nErrCode;	/// 错误码          
	char             szErrString[255];	/// 错误信息        
}GSPKG_KICKOUT_NTF;

/* GS到GT之间的广播消息  */
typedef struct tagGSPKG_MSG_BROADCAST{
	enum{Type = GSID_MSG_BROADCAST};
	typedef CCliProto ProtoType;
	unsigned short   wIDCount;
	unsigned short   awID[TS_BROADCAST_ID_COUNT];
	unsigned short   wMsgBufLen;
	unsigned char    abyMsgBuf[TS_BROADCAST_MSG_SIZE];
}GSPKG_MSG_BROADCAST;

typedef struct tagGSPKG_LOAD_GSDATA_NTF{
	enum{Type = GSID_LOAD_GSDATA_NTF};
	typedef CCliProto ProtoType;
	int              nCount;
	unsigned char    abyXmlData[MAX_XMLDATA_COUNT];
}GSPKG_LOAD_GSDATA_NTF;

typedef struct tagGSPKG_UPDATEGMLEVEL_NTF{
	enum{Type = GSID_UPDATEGMLEVEL_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwDigitID;
	unsigned char    byGMLevel;
}GSPKG_UPDATEGMLEVEL_NTF;

/* 错误码 */
typedef struct tagSC_ERROR_NTF{
	enum{Type = SCID_ERROR_NTF};
	typedef CCliProto ProtoType;
	SError           stData;	/// 错误信息        
}SC_ERROR_NTF;

/* 推图关卡状态 */
typedef struct tagSC_LEVEL_INFO{
	enum{Type = SCID_LEVEL_INFO};
	typedef CCliProto ProtoType;
	unsigned int     dwCount;	/// 关卡id 不在关卡里面的表示没有获得过星
	SLevelInfo       astInfo[MAX_LEVEL_COUNT];	/// 关卡id          
	unsigned int     dwBattleCount;	/// 战役数量        
	SBattleInfo      astBtInfo[MAX_BATTLE_COUNT];	/// 战役信息，没有在列表里表示没有获得星
	unsigned int     dwBoxCount;	/// 宝箱数量        
	unsigned int     adwGotBattleBox[MAX_BATTLE_BOX_COUNT];	/// 已经获得的宝箱id
}SC_LEVEL_INFO;

/* 申请进入推图 */
typedef struct tagCS_LEVEL_REQ{
	enum{Type = CSID_LEVEL_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byLevelBattleType;	/// 推图关卡类型 LEVEL_BATTLE_TYPE枚举
	unsigned int     dwLevelID;	/// 关卡id          
	unsigned int     dwBuffID;	/// 选择使用的buff  
	unsigned long long qwAbyssDBID;	/// 深渊dbid        
	unsigned int     dwFriendPetID;	/// 好友助战宠物ID,没有时默认发-1
	unsigned char    byQuickEnd;	/// 是否扫荡模式 0非扫荡，1扫荡
}CS_LEVEL_REQ;

/* 领取战役宝箱星值奖励 */
typedef struct tagCS_GET_BATTLE_BOX_REQ{
	enum{Type = CSID_GET_BATTLE_BOX_REQ};
	typedef CCliProto ProtoType;
	unsigned int     dwBattleboxID;	/// 宝箱id          
}CS_GET_BATTLE_BOX_REQ;

/* 领取战役宝箱星值奖励的反馈 */
typedef struct tagSC_GET_BATTLE_BOX_ACK{
	enum{Type = SCID_GET_BATTLE_BOX_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwBattleboxID;	/// 宝箱id          
	unsigned char    byResult;	/// 为GS_RESULT_YES表示领取成功
}SC_GET_BATTLE_BOX_ACK;

/* 更新战役的星数 */
typedef struct tagSC_BATTLE_GOT_STAR_NTF{
	enum{Type = SCID_BATTLE_GOT_STAR_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwBattleID;	/// 战役id          
	unsigned int     dwGotStar;	/// 获得的星数      
}SC_BATTLE_GOT_STAR_NTF;

typedef struct tagSDropInfo{
	typedef CCliProto ProtoType;
	unsigned int     dwTemplateID;	/// 物品id          
	int              nCount;	/// 掉落数量        
}SDropInfo;

typedef struct tagSDropInfoList{
	typedef CCliProto ProtoType;
	unsigned short   wCount;
	SDropInfo        astList[MAX_ITEM_COUNT];
}SDropInfoList;

typedef struct tagSDropInfos{
	typedef CCliProto ProtoType;
	unsigned short   wCount;
	SDropInfo        astList[MAX_MONSTER_DROP];
	unsigned int     dwMoney;	/// 掉落游戏币数量  
}SDropInfos;

typedef struct tagSMonsterInfo{
	typedef CCliProto ProtoType;
	unsigned int     dwIndex;	/// 场景内怪的索引号
	SDropInfos       stDrop;	/// 怪物掉落物品列表
}SMonsterInfo;

typedef struct tagSMonsterInfos{
	typedef CCliProto ProtoType;
	unsigned short   wCount;
	SMonsterInfo     astList[MAX_MONSTER_IN_LEVEL];
}SMonsterInfos;

/* 推图数据 */
typedef struct tagSC_LEVEL_ACK{
	enum{Type = SCID_LEVEL_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byLevelBattleType;	/// 推图关卡类型 LEVEL_BATTLE_TYPE枚举
	unsigned int     dwResult;	/// 0 表示顺利开始推图，请使用下列数据初始化。非0表示推图申请未能执行，有错误，理由查表
	unsigned int     dwAbyssLevelID;	/// 深渊关卡id      
	SMonsterInfos    stMonster;
	unsigned short   wFreeReliveCount;	/// 关卡免费复活数量
	unsigned int     dwRelivePrice;	/// 复活代价，徽章  
	unsigned short   wInitialBuffCount;	/// 选择的buff数量  
	unsigned int     adwInitialBuffID[MAX_INITIAL_BUFF_COUNT];	/// 选择的buff，扣费
	unsigned char    byQuickEnd;	/// 是否扫荡模式 0非扫荡，1扫荡
}SC_LEVEL_ACK;

/* 技能数 */
typedef struct tagSSkillCount{
	typedef CCliProto ProtoType;
	unsigned int     dwSkillID;	/// 技能id          
	unsigned short   wCount;	/// 使用次数，统计时请注意，超过UInt16.Max的时候请保留UInt16.Max
}SSkillCount;

/* 关卡结果汇报 */
typedef struct tagCS_LEVEL_RESULT_NTF{
	enum{Type = CSID_LEVEL_RESULT_NTF};
	typedef CCliProto ProtoType;
	unsigned char    byLevelBattleType;	/// 推图关卡类型 LEVEL_BATTLE_TYPE枚举
	unsigned int     dwResult;	/// 0表示通关，非0表示尚未通关：1表示中途退出
	unsigned int     dwMoney;	/// 拾取的游戏币总数
	unsigned short   wItemCount;	/// 拾取的物品总数  
	SDropInfo        astItem[MAX_LEVEL_DROP];	/// 拾取的物品列表  
	unsigned short   wReliveCount;	/// 使用复活次数    
	unsigned short   wKillCount;	/// 杀怪数量        
	unsigned int     adwKills[MAX_MONSTER_IN_LEVEL];	/// 杀怪ID          
	unsigned int     dwMaxCombo;	/// 最大连击数      
	unsigned int     dwCritical;	/// 致命一击数      
	unsigned short   wSkillCount;	/// 使用的技能种类数
	SSkillCount      astSkills[100];	/// 使用的技能列表  
	unsigned char    byCompleteResult;	/// 完成评价 ELevelCompleteResult
	int              nActivityAbyssTotalDamage;	/// 打出的伤害总数  
	int              nCompleteSec;	/// 完成的秒数      
	int              nPetChangeTimes;	/// 宠物切换次数    
}CS_LEVEL_RESULT_NTF;

/* 关卡翻牌信息 */
typedef struct tagSLevelSelectCardInfo{
	typedef CCliProto ProtoType;
	unsigned char    byIndexID;	/// 唯一标识        
	unsigned int     dwItemID;	/// 奖励物品模板ID 为1表示是金钱 2是绑定徽章，3是徽章
	unsigned int     dwCount;	/// 数量            
}SLevelSelectCardInfo;

/* 已获得奖励及宝箱信息 */
typedef struct tagSC_TREASURE_CHEST_NTF{
	enum{Type = SCID_TREASURE_CHEST_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwLevelID;	/// 关卡id          
	unsigned char    byCurGetStar;	/// 本次获得的星数  
	unsigned char    byQuickEnd;	/// 是否扫荡模式 0非扫荡，1扫荡
	SXITEMS          stItems;	/// 物品列表        
	unsigned int     dwMoney;	/// 本关卡确认获得了的金钱数量
	unsigned int     dwExperience;	/// 本关卡确认获得了的经验数量
	unsigned short   wPetAboutCount;	/// 确认获得的宠物和宠物物品
	unsigned int     adwPetAbout[MAX_PET_COUNT];	/// 宠物和宠物物品的模板id
	unsigned char    byGetCount;	/// 获得的数量      
	SLevelSelectCardInfo astCardInfos[MAX_LEVEL_SELECT_CARD_COUNT];	/// 获得的宝箱      
	unsigned char    byTempCount;	/// 假数据数量      
	SLevelSelectCardInfo astTempCardInfos[MAX_LEVEL_SELECT_CARD_COUNT];	/// 假数据          
}SC_TREASURE_CHEST_NTF;

/* 玩家开宝箱 */
typedef struct tagCS_OPEN_TREASURE_CHEST_REQ{
	enum{Type = CSID_OPEN_TREASURE_CHEST_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byItemIndexID;	/// 物品唯一标识    
}CS_OPEN_TREASURE_CHEST_REQ;

/* 开宝箱结果 */
typedef struct tagSC_OPEN_TREASURE_CHEST_ACK{
	enum{Type = SCID_OPEN_TREASURE_CHEST_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byItemIndexID;	/// 物品唯一标识    
	unsigned char    byResult;	/// 为GS_RESULT_YES表示领取成功
}SC_OPEN_TREASURE_CHEST_ACK;

/* GS通知Load场景 */
typedef struct tagSC_SELF_LOADSCENE{
	enum{Type = SCID_SELF_LOADSCENE};
	typedef CCliProto ProtoType;
	unsigned int     dwSceneId;	/// 场景ID          
	SPosInfo         stEnterPos;	/// 场景位置        
	unsigned int     dwTime;	/// 服务器时间      
	unsigned int     dwSceneType;	/// 地图类型        
}SC_SELF_LOADSCENE;

/* 客户端Load场景完成 */
typedef struct tagCS_ENTERSCENE{
	enum{Type = CSID_ENTERSCENE};
	typedef CCliProto ProtoType;
	unsigned int     dwError;	/// 错误码          
	unsigned int     dwSceneId;	/// 场景ID          
}CS_ENTERSCENE;

/* 进入场景回应 */
typedef struct tagSC_SELF_ENTERSCENE{
	enum{Type = SCID_SELF_ENTERSCENE};
	typedef CCliProto ProtoType;
	unsigned char    byFlag;	/// 进场景标志位    
	unsigned char    byError;	/// 错误码          
	unsigned long long qwServerTime;	/// 服务器当前时间戳,ms 
}SC_SELF_ENTERSCENE;

/* 个人所必须的所有数据通知完毕 */
typedef struct tagSC_SELF_DATA_END{
	enum{Type = SCID_SELF_DATA_END};
	typedef CCliProto ProtoType;
}SC_SELF_DATA_END;

/* 角色进入游戏第一条消息，客户端开始加载地图信息  */
typedef struct tagSC_SELF_APPEAR{
	enum{Type = SCID_SELF_APPEAR};
	typedef CCliProto ProtoType;
	SPosInfo         stEnterPos;	/// 场景位置        
}SC_SELF_APPEAR;

/* 角色常规易变信息  */
typedef struct tagSC_SELF_VOLATILE_PRO{
	enum{Type = SCID_SELF_VOLATILE_PRO};
	typedef CCliProto ProtoType;
	int              nLevel;	/// 当前等级        
	unsigned int     dwNonMoney;	/// 绑定游戏币（金币） 
	unsigned int     dwNonCash;	/// 绑定勋章        
	unsigned int     dwCash;	/// 流通勋章        
	int              nEP;	/// 当前活力值      
	long long        llExperience;	/// 当前等级累计经验 
	int              nAP;	/// 当前协助点数    
}SC_SELF_VOLATILE_PRO;

/* 客户端配置  */
typedef struct tagSC_CLIENT_CONFIG_NTF{
	enum{Type = SCID_CLIENT_CONFIG_NTF};
	typedef CCliProto ProtoType;
	char             szConfigInfo[512];	/// 配置信息        
}SC_CLIENT_CONFIG_NTF;

/* 客户端配置更新  */
typedef struct tagCS_CLIENT_CONFIG_UPDATE{
	enum{Type = CSID_CLIENT_CONFIG_UPDATE};
	typedef CCliProto ProtoType;
	char             szConfigInfo[512];	/// 配置信息        
}CS_CLIENT_CONFIG_UPDATE;

/* 角色基础属性信息  */
typedef struct tagSC_SELF_BASE_PRO{
	enum{Type = SCID_SELF_BASE_PRO};
	typedef CCliProto ProtoType;
	unsigned long long qwObjID;	/// 出现对象ID 临时id 
	unsigned long long qwDBID;	/// 唯一id          
	int              nRoleIndex;	/// 本服唯一id      
	char             szName[ROLE_NAME_LEN];	/// 对象名字        
	int              nLevel;	/// 当前等级        
	unsigned char    byBaseJob;	/// 基础门派        
	unsigned char    byJob;	/// 当前门派        
	unsigned char    bySex;	/// 对象性别        
	long long        llExperience;	/// 当前等级累计经验 
	unsigned int     dwNonMoney;	/// 绑定游戏币（金币） 
	unsigned int     dwNonCash;	/// 绑定勋章        
	unsigned int     dwCash;	/// 流通勋章        
	int              nHP;	/// 当前血量        
	int              nSP;	/// 当前技力        
	int              nEP;	/// 当前活力值      
	int              nMoveSpeed;	/// 基础移动速度 1秒移动多少mm 
	int              nAttSpeed;	/// 攻击速度        
	int              nStr;	/// 当前力量        
	int              nInt;	/// 当前智力        
	int              nDex;	/// 当前敏捷        
	int              nSta;	/// 当前体力        
	int              nFai;	/// 当前信念        
	int              nMaxHP;	/// 血量上限        
	int              nMaxSP;	/// 技力上限        
	int              nHPTick;	/// 每轮回复血量    
	int              nSPTick;	/// 每轮回复技力量  
	int              nAtkDmgMin;	/// 当前伤害下限    
	int              nAtkDmgMax;	/// 当前伤害上限    
	int              nDef;	/// 当前防御        
	int              nIceAtt;	/// 冰属性攻击      
	int              nFireAtt;	/// 火属性攻击      
	int              nPoisonAtt;	/// 毒属性攻击      
	int              nThunderAtt;	/// 雷属性攻击      
	int              nIceDef;	/// 冰属性抵抗      
	int              nFireDef;	/// 火属性抵抗      
	int              nPoisonDef;	/// 毒属性抵抗      
	int              nThunderDef;	/// 雷属性抵抗      
	int              nPierce;	/// 穿透点数        
	int              nHit;	/// 命中点数        
	int              nDodge;	/// 闪避点数        
	int              nCri;	/// 致命一击点数    
	int              nFlex;	/// 韧性点数        
	int              nCriDmg;	/// 致命一击伤害系数 15000 = 1.5 
	int              nCriDmgDef;	/// 致命一击防御系数修正 正负 万分比 
	int              nBodySize;	/// 体型半径 mm     
	int              nAttSize;	/// 攻击半径 mm     
	int              nAttSpeedModPer;	/// 攻击加速百分比  
	int              nMoveSpeedModPer;	/// 移动加速百分比  
	int              nPiercePer;	/// 穿透百分比修正 正负 万分比 
	int              nHitPer;	/// 命中率修正  正负  万分比 
	int              nDodgePer;	/// 闪避率修正 正负  万分比 
	int              nCriPer;	/// 致命一击率修正 正负 万分比 
	int              nFlexPer;	/// 韧性率修正  正负 万分比 
	int              nMaxEP;	/// 最大活力值      
	int              nAP;	/// 协助点数        
	int              nMaxAP;	/// 最大协助点数    
	int              nExpPer;	/// 经验值 正负 万分比 
	int              nMoneyPer;	/// 金钱 正负 万分比 
}SC_SELF_BASE_PRO;

/* 宠物信息结构  */
typedef struct tagSPetInfo{
	typedef CCliProto ProtoType;
	unsigned long long qwDBID;	/// 唯一id          
	int              nBattlePos;	/// 出战位置 见EPetBattlePos，PET_BTPOS_UNKNOWN为不出战 
	unsigned int     dwTemplateID;	/// 模板id          
	int              nLevel;	/// 当前等级        
	long long        llExperience;	/// 当前累计经验    
	int              nUp;	/// 当前强化等级    
	int              nLock;	/// 锁定状态        
	int              nHP;	/// 当前血量        
	int              nSP;	/// 当前技力        
	int              nStr;
	int              nInt;
	int              nDex;
	int              nSta;
	int              nFai;
	int              nMaxHP;
	int              nMaxSP;
	int              nHPTick;
	int              nSPTick;
	int              nAtkDmgMin;
	int              nAtkDmgMax;
	int              nDef;
	int              nIceAtt;
	int              nFireAtt;
	int              nPoisonAtt;
	int              nThunderAtt;
	int              nIceDef;
	int              nFireDef;
	int              nPoisonDef;
	int              nThunderDef;
	int              nPierce;
	int              nHit;
	int              nDodge;
	int              nCri;
	int              nFlex;
	int              nCriDmg;
	int              nCriDmgDef;
	int              nBodySize;
	int              nAttSize;
	int              nAttSpeedModPer;
	int              nMoveSpeedModPer;
	int              nPiercePer;
	int              nHitPer;
	int              nDodgePer;
	int              nCriPer;
	int              nFlexPer;
	int              nAttSpeed;
	int              nMoveSpeed;
	SXITEMS          stEquip;
}SPetInfo;

/* 宠物属性更新，需要修改策略  */
typedef struct tagPET_RECORD{
	typedef CCliProto ProtoType;
	int              nTID;
}PET_RECORD;

/* 角色宠物列表  */
typedef struct tagSC_PETS_RECORD_NTF{
	enum{Type = SCID_PETS_RECORD_NTF};
	typedef CCliProto ProtoType;
	unsigned short   wPetRecordCount;	/// 拥有宠物个数    
	PET_RECORD       astRecord[MAX_PET_RECORD_COUNT];
}SC_PETS_RECORD_NTF;

/* 角色宠物列表  */
typedef struct tagSC_USER_PETS_NTF{
	enum{Type = SCID_USER_PETS_NTF};
	typedef CCliProto ProtoType;
	int              nMaxPetCount;	/// 最多拥有宠物个数 
	unsigned short   wPetCount;	/// 拥有宠物个数    
	SPetInfo         astPetsInfo[MAX_PET_COUNT];
}SC_USER_PETS_NTF;

/* 角色宠物列表  */
typedef struct tagSC_USER_JOIN_PETS{
	typedef CCliProto ProtoType;
	unsigned short   wPetCount;	/// 拥有宠物个数    
	SPetInfo         astPetsInfo[PET_BTPOS_TEAM];
}SC_USER_JOIN_PETS;

/* 宠物属性更新，需要修改策略  */
typedef struct tagSC_PET_INFO_NTF{
	enum{Type = SCID_PET_INFO_NTF};
	typedef CCliProto ProtoType;
	SPetInfo         stPetInfo;
}SC_PET_INFO_NTF;

/* 宠物属性更新，需要修改策略  */
typedef struct tagSC_PET_SINGLE_ENTER_NTF{
	enum{Type = SCID_PET_SINGLE_ENTER_NTF};
	typedef CCliProto ProtoType;
	SPetInfo         stPetInfo;
}SC_PET_SINGLE_ENTER_NTF;

/* 宠物属性更新，需要修改策略  */
typedef struct tagSC_PET_SINGLE_LEAVE_NTF{
	enum{Type = SCID_PET_SINGLE_LEAVE_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwDBID;
}SC_PET_SINGLE_LEAVE_NTF;

/*   */
typedef struct tagSC_GATHER_ITEM{
	typedef CCliProto ProtoType;
	int              nID;
	int              nCT;
}SC_GATHER_ITEM;

/* 收集品列表  */
typedef struct tagSC_GATHER_INFO_NTF{
	enum{Type = SCID_GATHER_INFO_NTF};
	typedef CCliProto ProtoType;
	int              nCount;
	SC_GATHER_ITEM   astGathers[MAX_GATHER_ITEM_COUNT];
}SC_GATHER_INFO_NTF;

/* 收集品单条更新或者增加  */
typedef struct tagSC_GATHER_SINGLE_ENTER_NTF{
	enum{Type = SCID_GATHER_SINGLE_ENTER_NTF};
	typedef CCliProto ProtoType;
	int              nID;
	int              nCT;
}SC_GATHER_SINGLE_ENTER_NTF;

/* 收集品销毁  */
typedef struct tagSC_GATHER_SINGLE_LEAVE_NTF{
	enum{Type = SCID_GATHER_SINGLE_LEAVE_NTF};
	typedef CCliProto ProtoType;
	int              nID;
}SC_GATHER_SINGLE_LEAVE_NTF;

/* 物品合成  */
typedef struct tagCS_GATHER_ITEM_MERGE_REQ{
	enum{Type = CSID_GATHER_ITEM_MERGE_REQ};
	typedef CCliProto ProtoType;
	int              nTID;
}CS_GATHER_ITEM_MERGE_REQ;

/* 物品合成回应  */
typedef struct tagSC_GATHER_ITEM_MERGE_ACK{
	enum{Type = SCID_GATHER_ITEM_MERGE_ACK};
	typedef CCliProto ProtoType;
	int              nTID;
}SC_GATHER_ITEM_MERGE_ACK;

/* 物品制作  */
typedef struct tagCS_ROLE_PROD_REQ{
	enum{Type = CSID_ROLE_PROD_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwDBID;
	int              nCount;
	unsigned long long aqwOtherDBID[MAX_PROD_ITEM_COUNT];
}CS_ROLE_PROD_REQ;

/* 物品制作回应  */
typedef struct tagSC_ROLE_PROD_ACK{
	enum{Type = SCID_ROLE_PROD_ACK};
	typedef CCliProto ProtoType;
	SXITEMS          stItems;
}SC_ROLE_PROD_ACK;

/* 宠物经验获取  */
typedef struct tagCS_PET_GET_EXP_RPT{
	enum{Type = CSID_PET_GET_EXP_RPT};
	typedef CCliProto ProtoType;
	unsigned long long qwOwnerDBID;
	int              nOtherCount;
	unsigned long long aqwOtherDBID[MAX_PET_COUNT];
}CS_PET_GET_EXP_RPT;

/* 宠物经验获取  */
typedef struct tagSC_PET_GET_EXP_ACK{
	enum{Type = SCID_PET_GET_EXP_ACK};
	typedef CCliProto ProtoType;
	unsigned long long qwOwnerDBID;
}SC_PET_GET_EXP_ACK;

/* 宠物升级  */
typedef struct tagSC_PET_LEVEL_NTF{
	enum{Type = SCID_PET_LEVEL_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwDBID;
	int              nLevel;
}SC_PET_LEVEL_NTF;

/* 宠物强化  */
typedef struct tagCS_PET_UP_REQ{
	enum{Type = CSID_PET_UP_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwOwnerDBID;
	unsigned long long qwOtherDBID;
}CS_PET_UP_REQ;

/* 宠物强化  */
typedef struct tagSC_PET_UP_ACK{
	enum{Type = SCID_PET_UP_ACK};
	typedef CCliProto ProtoType;
	unsigned long long qwDBID;
	int              nUp;
	unsigned char    byOk;
}SC_PET_UP_ACK;

/* 设置出战宠物  */
typedef struct tagCS_SET_BATTLE_PET_REQ{
	enum{Type = CSID_SET_BATTLE_PET_REQ};
	typedef CCliProto ProtoType;
	int              nBattlePos;	/// 出战位置 见EPetBattlePos
	unsigned long long qwDBID;	/// 唯一id          
	unsigned char    byOk;	/// 出战1 取消出战0  
}CS_SET_BATTLE_PET_REQ;

/* 通知宠物出战  */
typedef struct tagSC_SET_BATTLE_PET_NTF{
	enum{Type = SCID_SET_BATTLE_PET_NTF};
	typedef CCliProto ProtoType;
	int              nBattlePos;	/// 出战位置 见EPetBattlePos PET_BTPOS_UNKNOWN为不出战 
	unsigned long long qwDBID;	/// 唯一id 为INVALID_64BIT_VALUE表示取消该位置的出战宠物 
}SC_SET_BATTLE_PET_NTF;

/* 宠物融合  */
typedef struct tagCS_PET_MERGE_REQ{
	enum{Type = CSID_PET_MERGE_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwOwnerDBID;
	unsigned long long qwOtherDBID;
}CS_PET_MERGE_REQ;

/* 获得宠物  */
typedef struct tagSC_PET_ADD_NTF{
	enum{Type = SCID_PET_ADD_NTF};
	typedef CCliProto ProtoType;
	int              nTemplateID;
}SC_PET_ADD_NTF;

/* 场景内其他角色信息 */
typedef struct tagSOtherInfo{
	typedef CCliProto ProtoType;
	unsigned long long qwObjID;	/// 出现对象ID 临时id 
	SRoleInfoWithEquip stRoleInfo;	/// 角色信息        
}SOtherInfo;

/* 场景内其他角色信息 */
typedef struct tagSOtherInfoWithPos{
	typedef CCliProto ProtoType;
	SOtherInfo       stRoleInfo;	/// 角色信息        
	SPosInfo         stPos;	/// 场景位置        
}SOtherInfoWithPos;

/* 场景内出现其他角色 */
typedef struct tagSC_OTHER_APPEAR{
	enum{Type = SCID_OTHER_APPEAR};
	typedef CCliProto ProtoType;
	unsigned short   wCount;	/// 数量            
	SOtherInfoWithPos astRoleInfo[GS_MAX_SYNC_ROLE_COUNT];	/// 角色信息        
}SC_OTHER_APPEAR;

/* 更新场景内角色的avatar等信息 */
typedef struct tagSC_OTHER_UPDATE{
	enum{Type = SCID_OTHER_UPDATE};
	typedef CCliProto ProtoType;
	unsigned short   wCount;	/// 数量            
	SOtherInfo       astRoleInfo[GS_MAX_SYNC_ROLE_COUNT];	/// 角色信息        
}SC_OTHER_UPDATE;

/* 场景内其他角色消失 */
typedef struct tagSC_OTHER_DISAPPEAR{
	enum{Type = SCID_OTHER_DISAPPEAR};
	typedef CCliProto ProtoType;
	unsigned short   wCount;	/// 数量            
	unsigned long long aqwObjID[GS_MAX_SYNC_ROLE_COUNT];	/// 出现对象ID 临时id 
}SC_OTHER_DISAPPEAR;

/* 更改移动同步模式 */
typedef struct tagCS_MOVE_SYNC_MODE{
	enum{Type = CSID_MOVE_SYNC_MODE};
	typedef CCliProto ProtoType;
	int              nMode;	/// 见：EMoveSyncType
}CS_MOVE_SYNC_MODE;

/* 开始移动 */
typedef struct tagCS_MOVE_BEGIN{
	enum{Type = CSID_MOVE_BEGIN};
	typedef CCliProto ProtoType;
	unsigned long long qwTime;	/// 当前场景的同步时间,单位ms
	SPosInfo         stPosition;	/// 当前位置        
}CS_MOVE_BEGIN;

/* 停止移动 */
typedef struct tagCS_MOVE_STOP{
	enum{Type = CSID_MOVE_STOP};
	typedef CCliProto ProtoType;
	unsigned long long qwTime;	/// 当前场景的同步时间,单位ms
	SPosInfo         stPosition;	/// 停止位置        
}CS_MOVE_STOP;

typedef struct tagSMoveObj{
	typedef CCliProto ProtoType;
	unsigned long long qwObjectID;	/// 场景内对象的唯一id
	unsigned long long qwTime;	/// 当前场景的同步时间,单位ms
	SPosInfo         stPosition;	/// 当前位置        
}SMoveObj;

/* 开始移动 */
typedef struct tagSC_MOVE_BEGIN{
	enum{Type = SCID_MOVE_BEGIN};
	typedef CCliProto ProtoType;
	unsigned short   wCount;	/// 对象数量        
	SMoveObj         astObjs[GS_MAX_SYNC_ROLE_COUNT];	/// 其他移动信息    
}SC_MOVE_BEGIN;

/* 停止移动 */
typedef struct tagSC_MOVE_STOP{
	enum{Type = SCID_MOVE_STOP};
	typedef CCliProto ProtoType;
	unsigned short   wCount;	/// 对象数量        
	SMoveObj         astObjs[GS_MAX_SYNC_ROLE_COUNT];	/// 其他移动信息    
}SC_MOVE_STOP;

/* 技能信息结构  */
typedef struct tagSSkillInfo{
	typedef CCliProto ProtoType;
	unsigned int     dwSkillID;	/// 技能ID          
	unsigned int     dwCooldownTime;	/// 剩余冷却时间    
}SSkillInfo;

/* 角色技能列表  */
typedef struct tagSC_USER_SKILLS_NTF{
	enum{Type = SCID_USER_SKILLS_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwSkillPoint;	/// 当前技能点      
	unsigned int     dwTotalSkillTreePoint;	/// 总的已花费的技能点 
	unsigned char    byCount;	/// 数量            
	SSkillInfo       astSkillsInfo[MAX_TRANS_SKILL_NUM];
}SC_USER_SKILLS_NTF;

/* 学习技能请求  */
typedef struct tagCS_LEARN_SKILL{
	enum{Type = CSID_LEARN_SKILL};
	typedef CCliProto ProtoType;
	unsigned int     dwSkillID;	/// 技能ID          
}CS_LEARN_SKILL;

/* 技能信息，有则更新，无则添加  */
typedef struct tagSC_SKILL_INFO_NTF{
	enum{Type = SCID_SKILL_INFO_NTF};
	typedef CCliProto ProtoType;
	SSkillInfo       stInfo;	/// 技能信息        
}SC_SKILL_INFO_NTF;

/* 删除技能  */
typedef struct tagSC_REMOVE_SKILL_NTF{
	enum{Type = SCID_REMOVE_SKILL_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwSkillID;	/// 删除的技能id，为全F表示删除全部技能 
}SC_REMOVE_SKILL_NTF;

/* 技能点通知  */
typedef struct tagSC_SKILL_POINT_NTF{
	enum{Type = SCID_SKILL_POINT_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwSkillPoint;	/// 当前技能点      
	unsigned int     dwTotalSkillTreePoint;	/// 总的已花费的技能点 
}SC_SKILL_POINT_NTF;

/* 重置技能  */
typedef struct tagCS_SKILL_RESET_ALL_REQ{
	enum{Type = CSID_SKILL_RESET_ALL_REQ};
	typedef CCliProto ProtoType;
}CS_SKILL_RESET_ALL_REQ;

/* 自己装备列表 */
typedef struct tagSC_SELF_ITEM_NTF{
	enum{Type = SCID_SELF_ITEM_NTF};
	typedef CCliProto ProtoType;
	unsigned char    byPos;	/// 见 EItemPos     
	SItemList        stItemList;
}SC_SELF_ITEM_NTF;

/* 请求转移物品 */
typedef struct tagCS_MOVE_ITEM_REQ{
	enum{Type = CSID_MOVE_ITEM_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byFromPos;	/// 见 EItemPos     
	unsigned char    byToPos;	/// 见 EItemPos     
	unsigned long long qwUUID;
	unsigned long long qwAnotherUUID;	/// -1表示非交换操作， 非-1表示交换操作
}CS_MOVE_ITEM_REQ;

/* 转移物品反馈 */
typedef struct tagSC_MOVE_ITEM_ACK{
	enum{Type = SCID_MOVE_ITEM_ACK};
	typedef CCliProto ProtoType;
	CS_MOVE_ITEM_REQ stInfo;
}SC_MOVE_ITEM_ACK;

/* 角色背包同步 */
typedef struct tagSC_ROLE_BAG_NTF{
	enum{Type = SCID_ROLE_BAG_NTF};
	typedef CCliProto ProtoType;
	int              nMaxRoleBagCount;
	SXITEMS          stItems;
}SC_ROLE_BAG_NTF;

/* 角色上限同步 */
typedef struct tagSC_ROLE_LIMIT_NTF{
	enum{Type = SCID_ROLE_LIMIT_NTF};
	typedef CCliProto ProtoType;
	int              nMaxRoleBagCount;
	int              nMaxPetBagCount;
	int              nMaxPetCount;
}SC_ROLE_LIMIT_NTF;

/* 角色装备同步 */
typedef struct tagSC_ROLE_EQUIP_NTF{
	enum{Type = SCID_ROLE_EQUIP_NTF};
	typedef CCliProto ProtoType;
	SXITEMS          stItems;
}SC_ROLE_EQUIP_NTF;

/* 角色背包物品销毁 */
typedef struct tagSC_ROLE_BAG_SINGLE_LEAVE_NTF{
	enum{Type = SCID_ROLE_BAG_SINGLE_LEAVE_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
}SC_ROLE_BAG_SINGLE_LEAVE_NTF;

/* 角色背包物品出现或刷新 */
typedef struct tagSC_ROLE_BAG_SINGLE_ENTER_NTF{
	enum{Type = SCID_ROLE_BAG_SINGLE_ENTER_NTF};
	typedef CCliProto ProtoType;
	SXITEM           stItem;
	int              nEnterType;	/// 参见EItemEnterType
}SC_ROLE_BAG_SINGLE_ENTER_NTF;

/* 角色装备物品销毁 */
typedef struct tagSC_ROLE_EQUIP_SINGLE_LEAVE_NTF{
	enum{Type = SCID_ROLE_EQUIP_SINGLE_LEAVE_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
}SC_ROLE_EQUIP_SINGLE_LEAVE_NTF;

/* 角色装备物品出现或刷新 */
typedef struct tagSC_ROLE_EQUIP_SINGLE_ENTER_NTF{
	enum{Type = SCID_ROLE_EQUIP_SINGLE_ENTER_NTF};
	typedef CCliProto ProtoType;
	SXITEM           stItem;
}SC_ROLE_EQUIP_SINGLE_ENTER_NTF;

/* 请求装备物品 */
typedef struct tagCS_ROLE_EQUIP_REQ{
	enum{Type = CSID_ROLE_EQUIP_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
	unsigned char    byIsEquip;	/// 1代表装备 0代表卸载
}CS_ROLE_EQUIP_REQ;

/* 请求处理某物品 */
typedef struct tagCS_ROLE_EVENT_REQ{
	enum{Type = CSID_ROLE_EVENT_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byEventType;	/// 参见ERoleItemEvent
	unsigned long long qwItemUUID;
}CS_ROLE_EVENT_REQ;

/* 请求强化某物品 */
typedef struct tagCS_ROLE_ITEMUP_RPT{
	enum{Type = CSID_ROLE_ITEMUP_RPT};
	typedef CCliProto ProtoType;
	unsigned char    byUpType;	/// 参见EItemUpEvent
	unsigned long long qwItemUUID;
	unsigned char    byCount;
	unsigned long long aqwOtherItemUUID[MAX_ITEM_UP_USE_COUNT];
}CS_ROLE_ITEMUP_RPT;

/* 请求强化某物品 */
typedef struct tagSC_ROLE_ITEMUP_ACK{
	enum{Type = SCID_ROLE_ITEMUP_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byUpType;	/// 参见EItemUpEvent
	unsigned long long qwItemUUID;
}SC_ROLE_ITEMUP_ACK;

/* 强化某物品回应 */
typedef struct tagSC_ROLE_ITEMUP_NTF{
	enum{Type = SCID_ROLE_ITEMUP_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;	/// 物品UUID        
	int              nUp;	/// 砸多少          
	int              nCurUp;	/// 当前Up如果=-1说明爆了
	unsigned char    byOK;	/// 成功失败        
}SC_ROLE_ITEMUP_NTF;

/* 强化某物品回应 */
typedef struct tagSC_ROLE_SUIT_NTF{
	enum{Type = SCID_ROLE_SUIT_NTF};
	typedef CCliProto ProtoType;
	int              nCount;	/// 套装数量        
	SROLE_SUIT       astSuit[MAX_ITEM_COUNT];	/// 套装物品        
}SC_ROLE_SUIT_NTF;

/* 镶嵌宝石 */
typedef struct tagSROLE_HOLE_ON{
	typedef CCliProto ProtoType;
	unsigned char    byHoleIndex;	/// 宝石镶嵌位下标索引
	unsigned long long qwItemUUID;
	unsigned long long qwOtherUUID;
}SROLE_HOLE_ON;

/* 请求镶嵌宝石 */
typedef struct tagCS_ROLE_HOLE_ON_REQ{
	enum{Type = CSID_ROLE_HOLE_ON_REQ};
	typedef CCliProto ProtoType;
	SROLE_HOLE_ON    stHole;
}CS_ROLE_HOLE_ON_REQ;

/* 镶嵌宝石回应 */
typedef struct tagSC_ROLE_HOLE_ON_ACK{
	enum{Type = SCID_ROLE_HOLE_ON_ACK};
	typedef CCliProto ProtoType;
	int              nError;
	SROLE_HOLE_ON    stHole;
}SC_ROLE_HOLE_ON_ACK;

/* 拆卸宝石 */
typedef struct tagSROLE_HOLE_OFF{
	typedef CCliProto ProtoType;
	unsigned char    byHoleIndex;	/// 宝石镶嵌位下标索引
	unsigned long long qwItemUUID;
}SROLE_HOLE_OFF;

/* 拆除宝石 */
typedef struct tagCS_ROLE_HOLE_OFF_REQ{
	enum{Type = CSID_ROLE_HOLE_OFF_REQ};
	typedef CCliProto ProtoType;
	SROLE_HOLE_OFF   stHole;
}CS_ROLE_HOLE_OFF_REQ;

/* 拆除宝石回应 */
typedef struct tagSC_ROLE_HOLE_OFF_ACK{
	enum{Type = SCID_ROLE_HOLE_OFF_ACK};
	typedef CCliProto ProtoType;
	int              nError;
	SROLE_HOLE_OFF   stHole;
}SC_ROLE_HOLE_OFF_ACK;

/* 置换宝石 */
typedef struct tagSROLE_HOLE_REFRESH{
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
	unsigned long long qwItem2UUID;
}SROLE_HOLE_REFRESH;

/* 置换宝石 */
typedef struct tagCS_ROLE_HOLE_REFRESH_REQ{
	enum{Type = CSID_ROLE_HOLE_REFRESH_REQ};
	typedef CCliProto ProtoType;
	SROLE_HOLE_REFRESH stHole;
}CS_ROLE_HOLE_REFRESH_REQ;

/* 置换宝石回应 */
typedef struct tagSC_ROLE_HOLE_REFRESH_ACK{
	enum{Type = SCID_ROLE_HOLE_REFRESH_ACK};
	typedef CCliProto ProtoType;
	int              nError;
	SDropInfoList    stDrops;
	SROLE_HOLE_REFRESH stHole;
}SC_ROLE_HOLE_REFRESH_ACK;

/* 合成宝石 */
typedef struct tagSROLE_HOLE_MERGE{
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
	unsigned long long qwItem2UUID;
	unsigned long long qwItem3UUID;
}SROLE_HOLE_MERGE;

/* 合成宝石 */
typedef struct tagCS_ROLE_HOLE_MERGE_REQ{
	enum{Type = CSID_ROLE_HOLE_MERGE_REQ};
	typedef CCliProto ProtoType;
	SROLE_HOLE_MERGE stHole;
}CS_ROLE_HOLE_MERGE_REQ;

/* 合成宝石回应 */
typedef struct tagSC_ROLE_HOLE_MERGE_ACK{
	enum{Type = SCID_ROLE_HOLE_MERGE_ACK};
	typedef CCliProto ProtoType;
	int              nError;
	SDropInfoList    stDrops;
	SROLE_HOLE_MERGE stHole;
}SC_ROLE_HOLE_MERGE_ACK;

/* 合成宝石 */
typedef struct tagSROLE_HOLE_MERGE2{
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
	int              nCount;
}SROLE_HOLE_MERGE2;

/* 合成宝石 */
typedef struct tagCS_ROLE_HOLE_MERGE2_REQ{
	enum{Type = CSID_ROLE_HOLE_MERGE2_REQ};
	typedef CCliProto ProtoType;
	SROLE_HOLE_MERGE2 stHole;
}CS_ROLE_HOLE_MERGE2_REQ;

/* 合成宝石回应 */
typedef struct tagSC_ROLE_HOLE_MERGE2_ACK{
	enum{Type = SCID_ROLE_HOLE_MERGE2_ACK};
	typedef CCliProto ProtoType;
	int              nError;
	SDropInfoList    stDrops;
	SROLE_HOLE_MERGE2 stHole;
}SC_ROLE_HOLE_MERGE2_ACK;

/* 合成宝石回应 */
typedef struct tagCS_LOCK_RPT{
	enum{Type = CSID_LOCK_RPT};
	typedef CCliProto ProtoType;
	int              nLockType;	/// 参见ELockType   
	int              nLock;
	unsigned long long qwUUID;	/// 唯一ID          
}CS_LOCK_RPT;

/* 使用角色背包物品 */
typedef struct tagCS_ROLE_USEITEM_REQ{
	enum{Type = CSID_ROLE_USEITEM_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwUUID;	/// 唯一ID          
}CS_ROLE_USEITEM_REQ;

/* 使用角色背包物品回应 */
typedef struct tagSC_ROLE_USEITEM_START_ACK{
	enum{Type = SCID_ROLE_USEITEM_START_ACK};
	typedef CCliProto ProtoType;
	int              nError;
}SC_ROLE_USEITEM_START_ACK;

/* 使用角色背包物品回应 */
typedef struct tagSC_ROLE_USEITEM_END_ACK{
	enum{Type = SCID_ROLE_USEITEM_END_ACK};
	typedef CCliProto ProtoType;
	int              nError;
}SC_ROLE_USEITEM_END_ACK;

/* 使用宠物背包物品 */
typedef struct tagCS_PET_USEITEM_REQ{
	enum{Type = CSID_PET_USEITEM_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwUUID;	/// 唯一ID          
}CS_PET_USEITEM_REQ;

/* 使用宠物背包物品回应 */
typedef struct tagSC_PET_USEITEM_ACK{
	enum{Type = SCID_PET_USEITEM_ACK};
	typedef CCliProto ProtoType;
}SC_PET_USEITEM_ACK;

/* 宠物背包同步 */
typedef struct tagSC_PET_BAG_NTF{
	enum{Type = SCID_PET_BAG_NTF};
	typedef CCliProto ProtoType;
	int              nMaxPetBagCount;
	SXITEMS          stItems;
}SC_PET_BAG_NTF;

/* 宠物背包物品销毁 */
typedef struct tagSC_PET_BAG_SINGLE_LEAVE_NTF{
	enum{Type = SCID_PET_BAG_SINGLE_LEAVE_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
}SC_PET_BAG_SINGLE_LEAVE_NTF;

/* 宠物背包物品出现 */
typedef struct tagSC_PET_BAG_SINGLE_ENTER_NTF{
	enum{Type = SCID_PET_BAG_SINGLE_ENTER_NTF};
	typedef CCliProto ProtoType;
	SXITEM           stItem;
}SC_PET_BAG_SINGLE_ENTER_NTF;

/* 请求装备物品 */
typedef struct tagCS_PET_EQUIP_REQ{
	enum{Type = CSID_PET_EQUIP_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwItemUUID;
	unsigned long long qwPetUUID;
	unsigned char    byIsEquip;	/// 1代表装备 0代表卸载
}CS_PET_EQUIP_REQ;

/* 请求处理某物品 */
typedef struct tagCS_PET_EVENT_REQ{
	enum{Type = CSID_PET_EVENT_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byEventType;	/// 参见EPetEvent   
	unsigned long long qwUUID;
}CS_PET_EVENT_REQ;

/* 请求处理某物品 */
typedef struct tagSC_PET_EVENT_ACK{
	enum{Type = SCID_PET_EVENT_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byEventType;	/// 参见EPetEvent   
}SC_PET_EVENT_ACK;

/* 切换队伍 */
typedef struct tagCS_PET_TEAM_RPT{
	enum{Type = CSID_PET_TEAM_RPT};
	typedef CCliProto ProtoType;
	int              nTeam;	/// 参见EPetTeam    
}CS_PET_TEAM_RPT;

/* 切换队伍 */
typedef struct tagSC_PET_TEAM_NTF{
	enum{Type = SCID_PET_TEAM_NTF};
	typedef CCliProto ProtoType;
	int              nTeam;	/// 参见EPetTeam    
	unsigned long long aqwPetUUID[PET_BTPOS_MAX];	/// 物品UUID        
}SC_PET_TEAM_NTF;

typedef struct tagCS_CHAT{
	enum{Type = CSID_CHAT};
	typedef CCliProto ProtoType;
	SCHAT            stChat;	/// chat数据        
}CS_CHAT;

typedef struct tagSC_CHAT{
	enum{Type = SCID_CHAT};
	typedef CCliProto ProtoType;
	SCHAT            stChat;	/// chat数据        
}SC_CHAT;

typedef struct tagSC_CHAT_ACK{
	enum{Type = SCID_CHAT_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byError;	/// 错误id, 当有错误发生时才返回ack 1冷却时间限制，2等级限制
	unsigned int     dwCooldownTime;	/// 世界聊天剩余冷却时间 毫秒
}SC_CHAT_ACK;

/* 到刷新时间时，客户端请求一次此消息，回SC_FRIENDS_LIST_NTF和SC_FRIEND_EPINFO_NTF */
typedef struct tagCS_FRIENDS_LIST_REQ{
	enum{Type = CSID_FRIENDS_LIST_REQ};
	typedef CCliProto ProtoType;
}CS_FRIENDS_LIST_REQ;

/* 好友列表通知 */
typedef struct tagSC_FRIENDS_LIST_NTF{
	enum{Type = SCID_FRIENDS_LIST_NTF};
	typedef CCliProto ProtoType;
	FRIENDS_LIST_NTF stInfo;
}SC_FRIENDS_LIST_NTF;

/* 好友体力领取次数、体力赠送次数信息通知，上线通知，VIP改变时通知一次，其他情况客户端算 */
typedef struct tagSC_FRIEND_EPINFO_NTF{
	enum{Type = SCID_FRIEND_EPINFO_NTF};
	typedef CCliProto ProtoType;
	int              nEPSent;	/// EP已赠送次数    
	int              nEPSendMax;	/// EP赠送最大值    
	int              nEPRecv;	/// EP已接收次数    
	int              nEPRecvMax;	/// EP收次数最大值  
}SC_FRIEND_EPINFO_NTF;

/* 查询指定名字角色 */
typedef struct tagCS_QUERY_ROLE_REQ{
	enum{Type = CSID_QUERY_ROLE_REQ};
	typedef CCliProto ProtoType;
	QUERY_ROLE_REQ   stInfo;
}CS_QUERY_ROLE_REQ;

/* 查询指定名字角色反馈 */
typedef struct tagSC_QUERY_ROLE_ACK{
	enum{Type = SCID_QUERY_ROLE_ACK};
	typedef CCliProto ProtoType;
	QUERY_ROLE_ACK   stInfo;
}SC_QUERY_ROLE_ACK;

/* 添加好友 */
typedef struct tagCS_ADD_FRIEND_REQ{
	enum{Type = CSID_ADD_FRIEND_REQ};
	typedef CCliProto ProtoType;
	ADD_FRIEND_REQ   stInfo;
}CS_ADD_FRIEND_REQ;

/* 添加好友反馈 */
typedef struct tagSC_ADD_FRIEND_ACK{
	enum{Type = SCID_ADD_FRIEND_ACK};
	typedef CCliProto ProtoType;
	ADD_FRIEND_ACK   stInfo;
}SC_ADD_FRIEND_ACK;

/* 删除好友 */
typedef struct tagCS_REMOVE_FRIEND_REQ{
	enum{Type = CSID_REMOVE_FRIEND_REQ};
	typedef CCliProto ProtoType;
	REMOVE_FRIEND_REQ stInfo;
}CS_REMOVE_FRIEND_REQ;

/* 删除好友反馈 */
typedef struct tagSC_REMOVE_FRIEND_ACK{
	enum{Type = SCID_REMOVE_FRIEND_ACK};
	typedef CCliProto ProtoType;
	REMOVE_FRIEND_ACK stInfo;
}SC_REMOVE_FRIEND_ACK;

/* 赠送体力 */
typedef struct tagCS_DONATE_ACTION_POINT_REQ{
	enum{Type = CSID_DONATE_ACTION_POINT_REQ};
	typedef CCliProto ProtoType;
	DONATE_ACTION_POINT_REQ stInfo;
}CS_DONATE_ACTION_POINT_REQ;

/* 赠送体力反馈 */
typedef struct tagSC_DONATE_ACTION_POINT_ACK{
	enum{Type = SCID_DONATE_ACTION_POINT_ACK};
	typedef CCliProto ProtoType;
	DONATE_ACTION_POINT_ACK stInfo;
}SC_DONATE_ACTION_POINT_ACK;

/* 赠送体力通知被赠送者 */
typedef struct tagSC_DONATE_ACTION_POINT_OTHER_NTF{
	enum{Type = SCID_DONATE_ACTION_POINT_OTHER_NTF};
	typedef CCliProto ProtoType;
	DONATE_ACTION_POINT_OTHER_NTF stInfo;
}SC_DONATE_ACTION_POINT_OTHER_NTF;

/* 领取体力 */
typedef struct tagCS_RECEIVE_ACTION_POINT_REQ{
	enum{Type = CSID_RECEIVE_ACTION_POINT_REQ};
	typedef CCliProto ProtoType;
	RECEIVE_ACTION_POINT_REQ stInfo;
}CS_RECEIVE_ACTION_POINT_REQ;

/* 领取体力反馈 */
typedef struct tagSC_RECEIVE_ACTION_POINT_ACK{
	enum{Type = SCID_RECEIVE_ACTION_POINT_ACK};
	typedef CCliProto ProtoType;
	RECEIVE_ACTION_POINT_ACK stInfo;
}SC_RECEIVE_ACTION_POINT_ACK;

/* 回应添加好友请求 */
typedef struct tagCS_RESPONSE_ADD_FRIEND_REQ{
	enum{Type = CSID_RESPONSE_ADD_FRIEND_REQ};
	typedef CCliProto ProtoType;
	RESPONSE_ADD_FRIEND_REQ stInfo;
}CS_RESPONSE_ADD_FRIEND_REQ;

/* 别人请求成为好友通知 */
typedef struct tagSC_REQUEST_ADD_FRIEND_NTF{
	enum{Type = SCID_REQUEST_ADD_FRIEND_NTF};
	typedef CCliProto ProtoType;
	REQUEST_ADD_FRIEND_NTF stInfo;
}SC_REQUEST_ADD_FRIEND_NTF;

/* 好友信息变化通知 */
typedef struct tagSC_FRIEND_INFO_CHANGE_NTF{
	enum{Type = SCID_FRIEND_INFO_CHANGE_NTF};
	typedef CCliProto ProtoType;
	FRIEND_INFO_CHANGE_NTF stInfo;
}SC_FRIEND_INFO_CHANGE_NTF;

/* 删除邀请列表中的请求 */
typedef struct tagSC_FRIEND_REMOVE_INVITE_NTF{
	enum{Type = SCID_FRIEND_REMOVE_INVITE_NTF};
	typedef CCliProto ProtoType;
	FRIEND_REMOVE_INVITE_NTF stInfo;
}SC_FRIEND_REMOVE_INVITE_NTF;

/* 好友助战列表请求 */
typedef struct tagCS_FRIEND_ASSIST_LIST_REQ{
	enum{Type = CSID_FRIEND_ASSIST_LIST_REQ};
	typedef CCliProto ProtoType;
	FRIEND_ASSIST_LIST_REQ stInfo;
}CS_FRIEND_ASSIST_LIST_REQ;

typedef struct tagSAssistBattleInfo{
	typedef CCliProto ProtoType;
	SAssistBattlePersonInfo stAssistor;	/// 助战人信息      
	SPetInfo         stBattlePet;	/// 战斗宠物        
}SAssistBattleInfo;

/* 好友助战列表请求 */
typedef struct tagSC_FRIEND_ASSIST_LIST_ACK{
	enum{Type = SCID_FRIEND_ASSIST_LIST_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byCount;	/// 数量            
	SAssistBattleInfo astAssistors[MAX_FRIENDASSIST_COUNT];
}SC_FRIEND_ASSIST_LIST_ACK;

/* 选择助战好友请求 */
typedef struct tagCS_SELECT_FRIEND_ASSIST_REQ{
	enum{Type = CSID_SELECT_FRIEND_ASSIST_REQ};
	typedef CCliProto ProtoType;
	SELECT_FRIEND_ASSIST_REQ stInfo;
}CS_SELECT_FRIEND_ASSIST_REQ;

/* 选择助战好友反馈 */
typedef struct tagSC_SELECT_FRIEND_ASSIST_ACK{
	enum{Type = SCID_SELECT_FRIEND_ASSIST_ACK};
	typedef CCliProto ProtoType;
	SELECT_FRIEND_ASSIST_ACK stInfo;
}SC_SELECT_FRIEND_ASSIST_ACK;

/* 触发深渊反馈 */
typedef struct tagSC_ABYSS_TRIGGER_ACK{
	enum{Type = SCID_ABYSS_TRIGGER_ACK};
	typedef CCliProto ProtoType;
	ABYSS_TRIGGER_ACK stInfo;
}SC_ABYSS_TRIGGER_ACK;

/* 打开请求 */
typedef struct tagCS_ABYSS_OPEN_REQ{
	enum{Type = CSID_ABYSS_OPEN_REQ};
	typedef CCliProto ProtoType;
	ABYSS_OPEN_REQ   stInfo;
}CS_ABYSS_OPEN_REQ;

/* 打开深渊反馈 */
typedef struct tagSC_ABYSS_OPEN_ACK{
	enum{Type = SCID_ABYSS_OPEN_ACK};
	typedef CCliProto ProtoType;
	ABYSS_OPEN_ACK   stInfo;
}SC_ABYSS_OPEN_ACK;

/* 打开深渊通知 */
typedef struct tagSC_ABYSS_OPEN_NTF{
	enum{Type = SCID_ABYSS_OPEN_NTF};
	typedef CCliProto ProtoType;
	ABYSS_OPEN_ACK   stInfo;
}SC_ABYSS_OPEN_NTF;

/* 获取触发列表请求 */
typedef struct tagCS_GET_ABYSS_TRIGGER_LIST_REQ{
	enum{Type = CSID_GET_ABYSS_TRIGGER_LIST_REQ};
	typedef CCliProto ProtoType;
	GET_ABYSS_TRIGGER_LIST_REQ stInfo;
}CS_GET_ABYSS_TRIGGER_LIST_REQ;

/* 获取触发列表反馈 */
typedef struct tagSC_GET_ABYSS_TRIGGER_LIST_ACK{
	enum{Type = SCID_GET_ABYSS_TRIGGER_LIST_ACK};
	typedef CCliProto ProtoType;
	GET_ABYSS_TRIGGER_LIST_ACK stInfo;
}SC_GET_ABYSS_TRIGGER_LIST_ACK;

/* 获取打开列表请求 */
typedef struct tagCS_GET_ABYSS_OPEN_LIST_REQ{
	enum{Type = CSID_GET_ABYSS_OPEN_LIST_REQ};
	typedef CCliProto ProtoType;
	GET_ABYSS_OPEN_LIST_REQ stInfo;
}CS_GET_ABYSS_OPEN_LIST_REQ;

/* 获取打开列表反馈 */
typedef struct tagSC_GET_ABYSS_OPEN_LIST_ACK{
	enum{Type = SCID_GET_ABYSS_OPEN_LIST_ACK};
	typedef CCliProto ProtoType;
	GET_ABYSS_OPEN_LIST_ACK stInfo;
}SC_GET_ABYSS_OPEN_LIST_ACK;

/* 获取打开记录请求 */
typedef struct tagCS_GET_ABYSS_OPEN_REC_REQ{
	enum{Type = CSID_GET_ABYSS_OPEN_REC_REQ};
	typedef CCliProto ProtoType;
	GET_ABYSS_OPEN_REC_REQ stInfo;
}CS_GET_ABYSS_OPEN_REC_REQ;

/* 获取打开记录反馈 */
typedef struct tagSC_GET_ABYSS_OPEN_REC_ACK{
	enum{Type = SCID_GET_ABYSS_OPEN_REC_ACK};
	typedef CCliProto ProtoType;
	GET_ABYSS_OPEN_REC_ACK stInfo;
}SC_GET_ABYSS_OPEN_REC_ACK;

/* 进入深渊活动场景表反馈 */
typedef struct tagSC_ENTER_ABYSS_ACK{
	enum{Type = SCID_ENTER_ABYSS_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// GS_RESULT_SUCCESS，GS_RESULT_FAIL
	GET_ABYSS_OPEN_LIST_ACK stInfo;
}SC_ENTER_ABYSS_ACK;

/* 深渊活动boss逃跑通知 */
typedef struct tagSC_ABYSS_RUN_NTF{
	enum{Type = SCID_ABYSS_RUN_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwActivityAbyssDBID;	/// 深渊活动的DBID  
}SC_ABYSS_RUN_NTF;

/* 邮件通知 */
typedef struct tagSC_MAIL_LIST_NTF{
	enum{Type = SCID_MAIL_LIST_NTF};
	typedef CCliProto ProtoType;
	MAIL_LIST        stList;	/// 邮件列表        
}SC_MAIL_LIST_NTF;

/* 发送邮件请求 */
typedef struct tagCS_SEND_MAIL_REQ{
	enum{Type = CSID_SEND_MAIL_REQ};
	typedef CCliProto ProtoType;
	SEND_MAIL        stMailInfo;
}CS_SEND_MAIL_REQ;

/* 发送邮件回应 */
typedef struct tagSC_SEND_MAIL_ACK{
	enum{Type = SCID_SEND_MAIL_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byResult;
}SC_SEND_MAIL_ACK;

/* 提取邮件物品 */
typedef struct tagCS_GET_ITEM_FROM_MAIL_REQ{
	enum{Type = CSID_GET_ITEM_FROM_MAIL_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwMailID;
}CS_GET_ITEM_FROM_MAIL_REQ;

/* 提取邮件金钱 */
typedef struct tagCS_GET_MONEY_FROM_MAIL_REQ{
	enum{Type = CSID_GET_MONEY_FROM_MAIL_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwMailID;
}CS_GET_MONEY_FROM_MAIL_REQ;

/* 邮件阅读请求 */
typedef struct tagCS_READ_MAIL_REQ{
	enum{Type = CSID_READ_MAIL_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwMailID;
}CS_READ_MAIL_REQ;

/* 邮件阅读回应 */
typedef struct tagSC_READ_MAIL_ACK{
	enum{Type = SCID_READ_MAIL_ACK};
	typedef CCliProto ProtoType;
	unsigned long long qwMailID;
	unsigned int     dwReadTime;
}SC_READ_MAIL_ACK;

/* 删除邮件请求 */
typedef struct tagCS_DELETE_MAIL_REQ{
	enum{Type = CSID_DELETE_MAIL_REQ};
	typedef CCliProto ProtoType;
	MAIL_ID_LIST     stMails;
}CS_DELETE_MAIL_REQ;

/* 删除邮件回应 */
typedef struct tagSC_DELETE_MAIL_ACK{
	enum{Type = SCID_DELETE_MAIL_ACK};
	typedef CCliProto ProtoType;
	MAIL_ID_LIST     stMails;
}SC_DELETE_MAIL_ACK;

/* 更新邮件通知 */
typedef struct tagSC_UPDATE_MAIL_NTF{
	enum{Type = SCID_UPDATE_MAIL_NTF};
	typedef CCliProto ProtoType;
	MAIL_LIST        stList;	/// 邮件列表        
}SC_UPDATE_MAIL_NTF;

/* 体力购买次数通知客户端 */
typedef struct tagSC_SHOP_ACTION_POINT_BOUGHT_NTF{
	enum{Type = SCID_SHOP_ACTION_POINT_BOUGHT_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwBoughtCount;	/// 已经购买次数    
}SC_SHOP_ACTION_POINT_BOUGHT_NTF;

/* 购买体力 */
typedef struct tagCS_SHOP_BUY_ACTION_POINT_REQ{
	enum{Type = CSID_SHOP_BUY_ACTION_POINT_REQ};
	typedef CCliProto ProtoType;
}CS_SHOP_BUY_ACTION_POINT_REQ;

/* 购买体力结果 */
typedef struct tagSC_SHOP_BUY_ACTION_POINT_ACK{
	enum{Type = SCID_SHOP_BUY_ACTION_POINT_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;
}SC_SHOP_BUY_ACTION_POINT_ACK;

/* 购买低档战魂信息通知 */
typedef struct tagSC_SHOP_BUY_PET_INFO_CHEAP_NTF{
	enum{Type = SCID_SHOP_BUY_PET_INFO_CHEAP_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwRemainTimeCheap;	/// 低档免费剩余时间(单位毫秒)
}SC_SHOP_BUY_PET_INFO_CHEAP_NTF;

/* 购买高档战魂信息通知 */
typedef struct tagSC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF{
	enum{Type = SCID_SHOP_BUY_PET_INFO_EXPENSIVE_NTF};
	typedef CCliProto ProtoType;
	unsigned char    byRemainCount;	/// 一定得紫色战魂剩余次数
	unsigned long long qwRemainTimeExpensive;	/// 高档免费剩余时间(单位毫秒)
}SC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF;

/* 购买战魂 */
typedef struct tagCS_SHOP_BUY_PET_REQ{
	enum{Type = CSID_SHOP_BUY_PET_REQ};
	typedef CCliProto ProtoType;
	unsigned char    byBuyType;	/// 见 EBuyPetType  
}CS_SHOP_BUY_PET_REQ;

/* 购买战魂结果 */
typedef struct tagSC_SHOP_BUY_PET_ACK{
	enum{Type = SCID_SHOP_BUY_PET_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byType;	/// 购买类型        
	unsigned char    byResult;
	unsigned char    byCount;	/// 结果数量        
	unsigned int     adwTemplateID[MAX_SHOP_BUY_PET_RESULT_COUNT];	/// 模板id          
}SC_SHOP_BUY_PET_ACK;

/* 获取商城物品列表 */
typedef struct tagCS_SHOP_GET_GOODSLIST_REQ{
	enum{Type = CSID_SHOP_GET_GOODSLIST_REQ};
	typedef CCliProto ProtoType;
}CS_SHOP_GET_GOODSLIST_REQ;

/* 商城物品信息 */
typedef struct tagSGoodsInfo{
	typedef CCliProto ProtoType;
	unsigned int     dwGoodsId;	/// 商城道具ID      
	unsigned int     dwNum;	/// 数量            
}SGoodsInfo;

/* 返回商城物品列表 */
typedef struct tagSC_SHOP_GET_GOODSLIST_ACK{
	enum{Type = SCID_SHOP_GET_GOODSLIST_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byCount;	/// 数量            
	SGoodsInfo       astGOODSINFOS[MAX_SHOP_GOODS_COUNT];
}SC_SHOP_GET_GOODSLIST_ACK;

/* 商城购买物品 */
typedef struct tagCS_SHOP_BUY_GOODS_REQ{
	enum{Type = CSID_SHOP_BUY_GOODS_REQ};
	typedef CCliProto ProtoType;
	unsigned int     dwGoodsId;	/// 购买商城道具ID  
	int              nGoodsCount;	/// 购买数量        
}CS_SHOP_BUY_GOODS_REQ;

/* 商城购买物品结果 */
typedef struct tagSC_SHOP_BUY_GOODS_ACK{
	enum{Type = SCID_SHOP_BUY_GOODS_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byResult;
	int              nItemCount;	/// 获得物品数量    
	SGoodsInfo       astTemplateID[MAX_SHOP_BUY_ITEM_COUNT];	/// 获得物品模板ID  
}SC_SHOP_BUY_GOODS_ACK;

/* 神秘商店物品列表请求 */
typedef struct tagCS_SHOP_SECRET_GOODS_REQ{
	enum{Type = CSID_SHOP_SECRET_GOODS_REQ};
	typedef CCliProto ProtoType;
}CS_SHOP_SECRET_GOODS_REQ;

/* 商城.神秘商店物品信息 */
typedef struct tagSSecretItemInfo{
	typedef CCliProto ProtoType;
	int              nUID;	/// 对应的兑换唯一ID
	unsigned char    byBought;	/// 是否已经购买过了，0没买1买了
}SSecretItemInfo;

/* 神秘商店物品列表返回 */
typedef struct tagSC_SHOP_SECRET_GOODS_ACK{
	enum{Type = SCID_SHOP_SECRET_GOODS_ACK};
	typedef CCliProto ProtoType;
	unsigned long long qwRefreshRemainTimeMS;	/// 刷新剩余时间(单位毫秒)
	int              nFreeRefreshRemainCount;	/// 免费刷新剩余次数
	int              nItemCount;	/// 神秘商店物品数量
	SSecretItemInfo  astSecretItems[MAX_SHOP_SECRET_ITEM_COUNT];	/// 神秘商店物品    
}SC_SHOP_SECRET_GOODS_ACK;

/* 神秘商店购买物品请求 */
typedef struct tagCS_SHOP_SECRET_BUY_REQ{
	enum{Type = CSID_SHOP_SECRET_BUY_REQ};
	typedef CCliProto ProtoType;
	int              nUID;	/// 对应的兑换唯一ID
}CS_SHOP_SECRET_BUY_REQ;

/* 神秘商店购买物品返回 */
typedef struct tagSC_SHOP_SECRET_BUY_ACK{
	enum{Type = SCID_SHOP_SECRET_BUY_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byResult;	/// 结果 EShopBuyResult 枚举
	int              nUID;	/// 对应的兑换唯一ID
}SC_SHOP_SECRET_BUY_ACK;

/* 神秘商店刷新请求，如果成功直接返回SC_SHOP_SECRET_GOODS_ACK列表信息，失败不返回 */
typedef struct tagCS_SHOP_SECRET_REFRESH_REQ{
	enum{Type = CSID_SHOP_SECRET_REFRESH_REQ};
	typedef CCliProto ProtoType;
}CS_SHOP_SECRET_REFRESH_REQ;

/* VIP信息通知 */
typedef struct tagSC_VIP_INFO_NTF{
	enum{Type = SCID_VIP_INFO_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwVIPLevel;	/// VIP等级         
	unsigned char    byGMLevel;	/// 账号GM等级      
}SC_VIP_INFO_NTF;

/* VIP.RMB充值信息通知 */
typedef struct tagSC_VIP_RMBINFO_NTF{
	enum{Type = SCID_VIP_RMBINFO_NTF};
	typedef CCliProto ProtoType;
	int              nRMBCount;	/// 充值次数        
	int              nRMBSum;	/// 充值RMB总额     
}SC_VIP_RMBINFO_NTF;

/* VIP.月卡信息通知 */
typedef struct tagSC_VIP_MONTHCARD_NTF{
	enum{Type = SCID_VIP_MONTHCARD_NTF};
	typedef CCliProto ProtoType;
	unsigned char    byMonthCardCount;	/// 月卡数量        
	MonthCardInfo    astMonthCardInfos[MAX_MONTHCARD_COUNT];	/// 账号月卡信息    
}SC_VIP_MONTHCARD_NTF;

/* VIP.月卡领取奖励请求 */
typedef struct tagCS_VIP_MONTHCARD_GETITEM_REQ{
	enum{Type = CSID_VIP_MONTHCARD_GETITEM_REQ};
	typedef CCliProto ProtoType;
	int              nUId;	/// 领取的月卡ID    
}CS_VIP_MONTHCARD_GETITEM_REQ;

/* VIP.月卡领取奖励回应 */
typedef struct tagSC_VIP_MONTHCARD_GETITEM_ACK{
	enum{Type = SCID_VIP_MONTHCARD_GETITEM_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byResult;	/// 结果 EMonthCardAwardResult 枚举
	int              nUId;	/// 领取的月卡ID    
}SC_VIP_MONTHCARD_GETITEM_ACK;

/* 角色PVP信息  */
typedef struct tagCS_SELF_PVP_PRO_REQ{
	enum{Type = CSID_SELF_PVP_PRO_REQ};
	typedef CCliProto ProtoType;
}CS_SELF_PVP_PRO_REQ;

/* 角色PVP信息  */
typedef struct tagSC_SELF_PVP_PRO_ACK{
	enum{Type = SCID_SELF_PVP_PRO_ACK};
	typedef CCliProto ProtoType;
	int              nMilitaryLevel;	/// 军阶等级        
	unsigned int     dwRepute;	/// 声望            
	unsigned int     dwPoints;	/// 积分            
	unsigned int     dwTimes;
	unsigned int     dwWins;
	unsigned int     dwLoses;
	unsigned int     dwRanks;
	unsigned char    byMiFlag;
	unsigned int     dwDayRepute;
	unsigned long long qwDayReFlag;
	int              nBuyTimesLeft;
}SC_SELF_PVP_PRO_ACK;

/* 获取pvp对手请求  */
typedef struct tagCS_GET_PVP_MATCH_REQ{
	enum{Type = CSID_GET_PVP_MATCH_REQ};
	typedef CCliProto ProtoType;
}CS_GET_PVP_MATCH_REQ;

/* 获取pvp对手回应  */
typedef struct tagSC_GET_PVP_MATCH_ACK{
	enum{Type = SCID_GET_PVP_MATCH_ACK};
	typedef CCliProto ProtoType;
	PVP_MATCH_LIST   stPVPMatchList;
}SC_GET_PVP_MATCH_ACK;

/* 挑战请求  */
typedef struct tagCS_ENTER_PVP_REQ{
	enum{Type = CSID_ENTER_PVP_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwRoleID;	/// 挑战的角色id    
}CS_ENTER_PVP_REQ;

/* 挑战反馈  */
typedef struct tagSC_ENTER_PVP_ACK{
	enum{Type = SCID_ENTER_PVP_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 0表示成功，非0表示失败
	SC_SELF_BASE_PRO stBasePro;	/// 基本属性        
	SC_USER_JOIN_PETS stPet;	/// 宠物            
	SC_USER_SKILLS_NTF stSkill;	/// 技能            
	SC_ROLE_EQUIP_NTF stEquip;	/// 装备            
	SRobotBuffs      stRobotBuff;	/// buffs           
}SC_ENTER_PVP_ACK;

/* PVP结算请求  */
typedef struct tagCS_PVP_RETULT_REQ{
	enum{Type = CSID_PVP_RETULT_REQ};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 0表示挑战成功，非0表示挑战失败：1表示中途退出
	int              nTimeout;	/// 是否时间耗尽结束 否-0  是-1
}CS_PVP_RETULT_REQ;

/* PVP结算反馈  */
typedef struct tagSC_PVP_RETULT_ACK{
	enum{Type = SCID_PVP_RETULT_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 0表示成功，非0表示失败
	SC_SELF_PVP_PRO_ACK stPro;	/// 结算后PVP信息   
	int              nPoints;	/// 积分            
	int              nRepute;	/// 声望            
}SC_PVP_RETULT_ACK;

/* 获取军阶奖励请求  */
typedef struct tagCS_GET_PVP_MILITARY_REWARD_REQ{
	enum{Type = CSID_GET_PVP_MILITARY_REWARD_REQ};
	typedef CCliProto ProtoType;
}CS_GET_PVP_MILITARY_REWARD_REQ;

/* 获取军阶奖励反馈  */
typedef struct tagSC_GET_PVP_MILITARY_REWARD_ACK{
	enum{Type = SCID_GET_PVP_MILITARY_REWARD_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 0表示成功，非0表示失败
	unsigned char    byMiFlag;
}SC_GET_PVP_MILITARY_REWARD_ACK;

/* 获取声望奖励请求  */
typedef struct tagCS_GET_PVP_REPUTE_REWARD_REQ{
	enum{Type = CSID_GET_PVP_REPUTE_REWARD_REQ};
	typedef CCliProto ProtoType;
	unsigned int     dwRewardId;	/// 领取声望奖励id 1-领取20点 2-40点 3-60点 4-80点 5-100点
}CS_GET_PVP_REPUTE_REWARD_REQ;

/* 获取声望奖励反馈  */
typedef struct tagSC_GET_PVP_REPUTE_REWARD_ACK{
	enum{Type = SCID_GET_PVP_REPUTE_REWARD_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 0表示成功，非0表示失败
	unsigned int     dwDayRepute;
	unsigned long long qwDayReFlag;
}SC_GET_PVP_REPUTE_REWARD_ACK;

/* 获取排行榜请求  */
typedef struct tagCS_GET_RANK_LIST_REQ{
	enum{Type = CSID_GET_RANK_LIST_REQ};
	typedef CCliProto ProtoType;
}CS_GET_RANK_LIST_REQ;

/* 获取排行榜反馈  */
typedef struct tagSC_GET_RANK_LIST_ACK{
	enum{Type = SCID_GET_RANK_LIST_ACK};
	typedef CCliProto ProtoType;
	PVP_RANK_LIST    stRankList;	/// 排行榜          
}SC_GET_RANK_LIST_ACK;

/* 买挑战次数请求  */
typedef struct tagCS_PVP_BUY_CHALLENGE_TIMES_REQ{
	enum{Type = CSID_PVP_BUY_CHALLENGE_TIMES_REQ};
	typedef CCliProto ProtoType;
	int              nBuyTimes;
}CS_PVP_BUY_CHALLENGE_TIMES_REQ;

/* 买挑战次数反馈  */
typedef struct tagSC_PVP_BUY_CHALLENGE_TIMES_ACK{
	enum{Type = SCID_PVP_BUY_CHALLENGE_TIMES_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 非0表示购买的挑战次数
	int              nBuyTimesLeft;
}SC_PVP_BUY_CHALLENGE_TIMES_ACK;

/* 通知pvp时间  */
typedef struct tagSC_PVP_TIME_NTF{
	enum{Type = SCID_PVP_TIME_NTF};
	typedef CCliProto ProtoType;
	unsigned long long qwTime;	/// 到PVP开始的毫秒数
}SC_PVP_TIME_NTF;

/* 获取PVP角色信息请求  */
typedef struct tagCS_GET_PVP_ROLE_INFO_REQ{
	enum{Type = CSID_GET_PVP_ROLE_INFO_REQ};
	typedef CCliProto ProtoType;
	unsigned long long qwRoleID;	/// 挑战的角色id    
}CS_GET_PVP_ROLE_INFO_REQ;

/* 获取PVP角色信息反馈  */
typedef struct tagSC_GET_PVP_ROLE_INFO_ACK{
	enum{Type = SCID_GET_PVP_ROLE_INFO_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 0表示人，1表示机器人，其他失败
	int              nAttack;	/// 战斗力          
	SC_ROLE_EQUIP_NTF stEquip;	/// 装备            
	SC_USER_JOIN_PETS stPet;	/// 宠物            
	SC_USER_SKILLS_NTF stSkill;	/// 技能            
}SC_GET_PVP_ROLE_INFO_ACK;

/* 每日签到信息通知，上线发一次，签到时发一次，刷新时发一次 */
typedef struct tagSC_GIFT_SIGN_NTF{
	enum{Type = SCID_GIFT_SIGN_NTF};
	typedef CCliProto ProtoType;
	unsigned char    byCanSign;	/// 是否可以签到 0不可以 1可以
	unsigned int     dwSignCount;	/// 当月签到次数    
}SC_GIFT_SIGN_NTF;

/* 每日签到VIP补领情况通知 */
typedef struct tagSC_GIFT_SIGN_VIP_NTF{
	enum{Type = SCID_GIFT_SIGN_VIP_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwCount;	/// VIP补领次数     
	unsigned int     adwDay[MAX_GIFT_VIP_COUNT];	/// VIP补领已补领次数
}SC_GIFT_SIGN_VIP_NTF;

/* 签到，会直接触发领奖，VIP会直接领奖两次 */
typedef struct tagCS_GIFT_SIGN{
	enum{Type = CSID_GIFT_SIGN};
	typedef CCliProto ProtoType;
}CS_GIFT_SIGN;

/* VIP补领奖励 */
typedef struct tagCS_GIFT_SIGN_VIP{
	enum{Type = CSID_GIFT_SIGN_VIP};
	typedef CCliProto ProtoType;
	unsigned int     dwSignDate;	/// 补领当月的第几次，发次数
}CS_GIFT_SIGN_VIP;

/* 成长已领奖信息通知 */
typedef struct tagSC_GIFT_LEVEL_NTF{
	enum{Type = SCID_GIFT_LEVEL_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwCount;	/// 已领次数        
	unsigned int     adwLevel[MAX_GIFT_LEVEL_COUNT];	/// 已领取等级      
}SC_GIFT_LEVEL_NTF;

/* 成长领奖 */
typedef struct tagCS_GIFT_LEVEL{
	enum{Type = CSID_GIFT_LEVEL};
	typedef CCliProto ProtoType;
	int              nLevel;	/// 奖励的等级      
}CS_GIFT_LEVEL;

/* 每日任务完成信息 */
typedef struct tagSDayQuestInfo{
	typedef CCliProto ProtoType;
	unsigned int     dwQuestId;	/// 每日任务类型ID  
	unsigned int     dwFinishProgress;	/// 已完成次数      
	unsigned char    byScoreReceived;	/// 积分已领取0未领取1领取
}SDayQuestInfo;

/* 每日任务完成信息，上线发一次，刷新时发一次 */
typedef struct tagSC_GIFT_DAY_NTF{
	enum{Type = SCID_GIFT_DAY_NTF};
	typedef CCliProto ProtoType;
	unsigned int     dwCount;	/// 信息数量        
	SDayQuestInfo    astInfo[MAX_DAY_QUEST_COUNT];	/// 完成信息        
}SC_GIFT_DAY_NTF;

/* 每日任务完成信息增量更新 */
typedef struct tagSC_GIFT_DAY_UPD{
	enum{Type = SCID_GIFT_DAY_UPD};
	typedef CCliProto ProtoType;
	SDayQuestInfo    stInfo;	/// 完成信息        
}SC_GIFT_DAY_UPD;

/* 每日任务领取积分，回 SC_GIFT_DAY_NTF 消息 */
typedef struct tagCS_GIFT_DAY_SCORE_REQ{
	enum{Type = CSID_GIFT_DAY_SCORE_REQ};
	typedef CCliProto ProtoType;
	unsigned int     dwQuestId;	/// 每日任务类型ID  
}CS_GIFT_DAY_SCORE_REQ;

/* 每日任务领取宝箱 */
typedef struct tagCS_GIFT_DAY_BOX_REQ{
	enum{Type = CSID_GIFT_DAY_BOX_REQ};
	typedef CCliProto ProtoType;
	unsigned int     dwBoxID;	/// 宝箱id          
}CS_GIFT_DAY_BOX_REQ;

/* 每日任务已领取宝箱列表 */
typedef struct tagSC_GIFT_DAY_BOX_NTF{
	enum{Type = SCID_GIFT_DAY_BOX_NTF};
	typedef CCliProto ProtoType;
	unsigned char    byCount;	/// 信息数量        
	unsigned int     adwBoxID[MAX_DAY_QUEST_BOX_COUNT];	/// 宝箱id          
}SC_GIFT_DAY_BOX_NTF;

/* 激活码领奖请求 */
typedef struct tagCS_GIFT_JIHUOMA_REQ{
	enum{Type = CSID_GIFT_JIHUOMA_REQ};
	typedef CCliProto ProtoType;
	char             szJiHuoMa[MAX_JIHUOMA_LEN];	/// 激活码          
}CS_GIFT_JIHUOMA_REQ;

/* 激活码领奖回应 */
typedef struct tagSC_GIFT_JIHUOMA_ACK{
	enum{Type = SCID_GIFT_JIHUOMA_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byRet;	/// 结果 参见枚举 EJihuoma 
	SMultiItems      stItems;	/// 获得物品        
}SC_GIFT_JIHUOMA_ACK;

/* 获取体力领取信息，每次打开面板时请求一次，刷新时间点到时请求一次 */
typedef struct tagCS_GIFT_EP_INFO_REQ{
	enum{Type = CSID_GIFT_EP_INFO_REQ};
	typedef CCliProto ProtoType;
}CS_GIFT_EP_INFO_REQ;

/* 体力领取信息,所有已领取信息的 DayFoodID  */
typedef struct tagSC_GIFT_EP_INFO_ACK{
	enum{Type = SCID_GIFT_EP_INFO_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byCount;	/// 信息数量        
	int              anDayFoodID[MAX_FOODS_COUNT];	/// 已领取美食的id  
}SC_GIFT_EP_INFO_ACK;

/* 领取体力请求 */
typedef struct tagCS_GIFT_RECEIVE_EP_REQ{
	enum{Type = CSID_GIFT_RECEIVE_EP_REQ};
	typedef CCliProto ProtoType;
	int              nDayFoodID;	/// 领取美食的id    
}CS_GIFT_RECEIVE_EP_REQ;

/* 领取体力回应 */
typedef struct tagSC_GIFT_RECEIVE_EP_ACK{
	enum{Type = SCID_GIFT_RECEIVE_EP_ACK};
	typedef CCliProto ProtoType;
	unsigned char    byResult;	/// 结果 见枚举 EReceiveEPResult 
	int              nDayFoodID;	/// 领取的美食ID，只有在Result成功时有意义 
}SC_GIFT_RECEIVE_EP_ACK;

/* 世界boss信息刷新请求 */
typedef struct tagCS_WB_INFO_REFRESH_REQ{
	enum{Type = CSID_WB_INFO_REFRESH_REQ};
	typedef CCliProto ProtoType;
}CS_WB_INFO_REFRESH_REQ;

/* 世界boss信息刷新反馈 */
typedef struct tagSC_WB_INFO_REFRESH_ACK{
	enum{Type = SCID_WB_INFO_REFRESH_ACK};
	typedef CCliProto ProtoType;
	SWorldBossInfo   stInfo;	/// 信息            
}SC_WB_INFO_REFRESH_ACK;

/* 世界boss鼓舞buff请求 */
typedef struct tagCS_WB_ADD_BUF_REQ{
	enum{Type = CSID_WB_ADD_BUF_REQ};
	typedef CCliProto ProtoType;
	int              nType;	/// 鼓舞类别（0-金币、1-徽章）
}CS_WB_ADD_BUF_REQ;

/* 世界boss鼓舞buff反馈 */
typedef struct tagSC_WB_ADD_BUF_ACK{
	enum{Type = SCID_WB_ADD_BUF_ACK};
	typedef CCliProto ProtoType;
	int              nResult;	/// 结果信息 0-成功 
}SC_WB_ADD_BUF_ACK;

/* 世界boss立即复活请求 */
typedef struct tagCS_WB_RELIVE_REQ{
	enum{Type = CSID_WB_RELIVE_REQ};
	typedef CCliProto ProtoType;
}CS_WB_RELIVE_REQ;

/* 世界boss立即复活反馈 */
typedef struct tagSC_WB_RELIVE_ACK{
	enum{Type = SCID_WB_RELIVE_ACK};
	typedef CCliProto ProtoType;
	int              nResult;	/// 结果信息 0-成功 
}SC_WB_RELIVE_ACK;

/* 世界boss被杀通知 */
typedef struct tagSC_WB_KILLED_NTF{
	enum{Type = SCID_WB_KILLED_NTF};
	typedef CCliProto ProtoType;
}SC_WB_KILLED_NTF;

/* 世界boss逃跑通知 */
typedef struct tagSC_WB_RUN_NTF{
	enum{Type = SCID_WB_RUN_NTF};
	typedef CCliProto ProtoType;
}SC_WB_RUN_NTF;

/* 进入世界boss请求 */
typedef struct tagCS_WB_ENTER_REQ{
	enum{Type = CSID_WB_ENTER_REQ};
	typedef CCliProto ProtoType;
}CS_WB_ENTER_REQ;

/* 进入世界boss反馈 */
typedef struct tagSC_WB_ENTER_ACK{
	enum{Type = SCID_WB_ENTER_ACK};
	typedef CCliProto ProtoType;
	int              nResult;	/// 结果信息 0-成功 
	SWorldBossInfo   stInfo;	/// 信息            
}SC_WB_ENTER_ACK;

/* 进入世界boss请求 */
typedef struct tagCS_WB_RESULT_REQ{
	enum{Type = CSID_WB_RESULT_REQ};
	typedef CCliProto ProtoType;
	int              nResult;	/// 结果信息 0-成功 
	int              nDamage;
}CS_WB_RESULT_REQ;

/* 进入世界boss反馈 */
typedef struct tagSC_WB_RESULT_ACK{
	enum{Type = SCID_WB_RESULT_ACK};
	typedef CCliProto ProtoType;
	int              nResult;	/// 结果信息 0-成功 
	SWorldBossInfo   stInfo;	/// 信息            
}SC_WB_RESULT_ACK;

/* 申请排名信息 */
typedef struct tagCS_ROLE_RANK_REQ{
	enum{Type = CSID_ROLE_RANK_REQ};
	typedef CCliProto ProtoType;
	SRankRoleReq     stReq;
}CS_ROLE_RANK_REQ;

/* 申请排名信息回应 */
typedef struct tagSC_ROLE_RANK_ACK{
	enum{Type = SCID_ROLE_RANK_ACK};
	typedef CCliProto ProtoType;
	SRankRoleAck     stAck;
}SC_ROLE_RANK_ACK;

/* 获取战魂试炼基本信息请求 */
typedef struct tagCS_GET_PT_BASEINFO_REQ{
	enum{Type = CSID_GET_PT_BASEINFO_REQ};
	typedef CCliProto ProtoType;
}CS_GET_PT_BASEINFO_REQ;

/* 获取战魂试炼基本信息回应 */
typedef struct tagSC_GET_PT_BASEINFO_ACK{
	enum{Type = SCID_GET_PT_BASEINFO_ACK};
	typedef CCliProto ProtoType;
	int              nTimes;	/// 剩余挑战次数    
	int              nBuys;	/// 剩余购买次数    
	int              nPass;	/// 已过难度 1-难度1 2-难度2 3-难度3
}SC_GET_PT_BASEINFO_ACK;

/* 买挑战次数请求  */
typedef struct tagCS_BUY_PT_TIMES_REQ{
	enum{Type = CSID_BUY_PT_TIMES_REQ};
	typedef CCliProto ProtoType;
	int              nBuyTimes;
}CS_BUY_PT_TIMES_REQ;

/* 买挑战次数反馈  */
typedef struct tagSC_BUY_PT_TIMES_ACK{
	enum{Type = SCID_BUY_PT_TIMES_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 非0表示购买的挑战次数
	int              nBuyTimesLeft;
}SC_BUY_PT_TIMES_ACK;

/* 获取金钱副本基本信息请求 */
typedef struct tagCS_GET_MD_BASEINFO_REQ{
	enum{Type = CSID_GET_MD_BASEINFO_REQ};
	typedef CCliProto ProtoType;
}CS_GET_MD_BASEINFO_REQ;

/* 获取金钱副本基本信息回应 */
typedef struct tagSC_GET_MD_BASEINFO_ACK{
	enum{Type = SCID_GET_MD_BASEINFO_ACK};
	typedef CCliProto ProtoType;
	int              nTimes;	/// 剩余挑战次数    
	int              nBuys;	/// 剩余购买次数    
	int              nPass;	/// 已过难度 1-难度1 2-难度2 3-难度3
}SC_GET_MD_BASEINFO_ACK;

/* 买挑战次数请求  */
typedef struct tagCS_BUY_MD_TIMES_REQ{
	enum{Type = CSID_BUY_MD_TIMES_REQ};
	typedef CCliProto ProtoType;
	int              nBuyTimes;
}CS_BUY_MD_TIMES_REQ;

/* 买挑战次数反馈  */
typedef struct tagSC_BUY_MD_TIMES_ACK{
	enum{Type = SCID_BUY_MD_TIMES_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 非0表示购买的挑战次数
	int              nBuyTimesLeft;
}SC_BUY_MD_TIMES_ACK;

/* 获取火龙塔基本信息请求 */
typedef struct tagCS_GET_FD_BASEINFO_REQ{
	enum{Type = CSID_GET_FD_BASEINFO_REQ};
	typedef CCliProto ProtoType;
}CS_GET_FD_BASEINFO_REQ;

/* 获取火龙塔基本信息回应 */
typedef struct tagSC_GET_FD_BASEINFO_ACK{
	enum{Type = SCID_GET_FD_BASEINFO_ACK};
	typedef CCliProto ProtoType;
	int              nTimes;	/// 剩余挑战次数    
	int              nBuys;	/// 剩余购买次数    
	int              nPass;	/// 已过难度 1-难度1 2-难度2 3-难度3
}SC_GET_FD_BASEINFO_ACK;

/* 买挑战次数请求  */
typedef struct tagCS_BUY_FD_TIMES_REQ{
	enum{Type = CSID_BUY_FD_TIMES_REQ};
	typedef CCliProto ProtoType;
	int              nBuyTimes;
}CS_BUY_FD_TIMES_REQ;

/* 买挑战次数反馈  */
typedef struct tagSC_BUY_FD_TIMES_ACK{
	enum{Type = SCID_BUY_FD_TIMES_ACK};
	typedef CCliProto ProtoType;
	unsigned int     dwResult;	/// 非0表示购买的挑战次数
	int              nBuyTimesLeft;
}SC_BUY_FD_TIMES_ACK;

/* 公会信息请求，非入会返回SC_GUILD_LIST_ACK(第一页) 入会返回SC_GUILD_BASEINFO_ACK公会基本信息 */
typedef struct tagCS_GUILD_INFO_REQ{
	enum{Type = CSID_GUILD_INFO_REQ};
	typedef CCliProto ProtoType;
}CS_GUILD_INFO_REQ;

/* 公会列表请求，非入会玩家，返回SC_GUILD_LIST_ACK  */
typedef struct tagCS_GUILD_LIST_REQ{
	enum{Type = CSID_GUILD_LIST_REQ};
	typedef CCliProto ProtoType;
	SGuildListReq    stReq;	/// 请求信息        
}CS_GUILD_LIST_REQ;

/* 公会列表回应，非入会玩家  */
typedef struct tagSC_GUILD_LIST_ACK{
	enum{Type = SCID_GUILD_LIST_ACK};
	typedef CCliProto ProtoType;
	SGuildListAck    stAck;	/// 返回信息        
}SC_GUILD_LIST_ACK;

/* 公会入会申请  */
typedef struct tagCS_GUILD_ENTER_REQ{
	enum{Type = CSID_GUILD_ENTER_REQ};
	typedef CCliProto ProtoType;
	SGuildEnterReq   stReq;
}CS_GUILD_ENTER_REQ;

/* 公会入会申请返回  */
typedef struct tagSC_GUILD_ENTER_ACK{
	enum{Type = SCID_GUILD_ENTER_ACK};
	typedef CCliProto ProtoType;
	SGuildEnterAck   stAck;
}SC_GUILD_ENTER_ACK;

/* 创建公会  */
typedef struct tagCS_GUILD_CREATE_REQ{
	enum{Type = CSID_GUILD_CREATE_REQ};
	typedef CCliProto ProtoType;
	SGuildEnterAck   stReq;
}CS_GUILD_CREATE_REQ;

/* 创建公会  */
typedef struct tagSC_GUILD_CREATE_ACK{
	enum{Type = SCID_GUILD_CREATE_ACK};
	typedef CCliProto ProtoType;
	SGuildEnterAck   stAck;
}SC_GUILD_CREATE_ACK;

/* 离开公会请求  */
typedef struct tagCS_GUILD_LEAVE_REQ{
	enum{Type = CSID_GUILD_LEAVE_REQ};
	typedef CCliProto ProtoType;
}CS_GUILD_LEAVE_REQ;

/* 离开公会返回  */
typedef struct tagSC_GUILD_LEAVE_ACK{
	enum{Type = SCID_GUILD_LEAVE_ACK};
	typedef CCliProto ProtoType;
	SGuildLeaveAck   stAck;
}SC_GUILD_LEAVE_ACK;

/* 公会基本信息  */
typedef struct tagSC_GUILD_BASEINFO_ACK{
	enum{Type = SCID_GUILD_BASEINFO_ACK};
	typedef CCliProto ProtoType;
	SGuildBaseInfo   stAck;
}SC_GUILD_BASEINFO_ACK;

/* 公会日志查询  */
typedef struct tagCS_GUILD_LOG_REQ{
	enum{Type = CSID_GUILD_LOG_REQ};
	typedef CCliProto ProtoType;
}CS_GUILD_LOG_REQ;

/* 公会日志结果  */
typedef struct tagSC_GUILD_LOG_ACK{
	enum{Type = SCID_GUILD_LOG_ACK};
	typedef CCliProto ProtoType;
	SGuildLogAck     stAck;
}SC_GUILD_LOG_ACK;

/* 公会修改公告请求  */
typedef struct tagCS_GUILD_CHANGE_NOTICE_REQ{
	enum{Type = CSID_GUILD_CHANGE_NOTICE_REQ};
	typedef CCliProto ProtoType;
	SGuildChangeNoticeReq stReq;
}CS_GUILD_CHANGE_NOTICE_REQ;

/* 公会修改公告结果  */
typedef struct tagSC_GUILD_CHANGE_NOTICE_ACK{
	typedef CCliProto ProtoType;
	SGuildChangeNoticeAck stAck;
}SC_GUILD_CHANGE_NOTICE_ACK;

/* 公会详细信息请求（公会大厅）  */
typedef struct tagCS_GUILD_DETAIL_REQ{
	enum{Type = CSID_GUILD_DETAIL_REQ};
	typedef CCliProto ProtoType;
}CS_GUILD_DETAIL_REQ;

/* 公会详细信息返回（公会大厅）  */
typedef struct tagSC_GUILD_DETAIL_ACK{
	enum{Type = SCID_GUILD_DETAIL_ACK};
	typedef CCliProto ProtoType;
	SGuildDetailAck  stAck;
}SC_GUILD_DETAIL_ACK;

/* 公会申请列表请求  */
typedef struct tagCS_GUILD_ENTERLIST_REQ{
	enum{Type = CSID_GUILD_ENTERLIST_REQ};
	typedef CCliProto ProtoType;
}CS_GUILD_ENTERLIST_REQ;

/* 公会申请列表返回  */
typedef struct tagSC_GUILD_ENTERLIST_ACK{
	enum{Type = SCID_GUILD_ENTERLIST_ACK};
	typedef CCliProto ProtoType;
	SGuildEnterListAck stAck;
}SC_GUILD_ENTERLIST_ACK;

/* 公会申请.同意/拒绝  */
typedef struct tagCS_GUILD_ENTER_ACCEPT_REQ{
	enum{Type = CSID_GUILD_ENTER_ACCEPT_REQ};
	typedef CCliProto ProtoType;
	SGuildEnterAcceptReq stReq;
}CS_GUILD_ENTER_ACCEPT_REQ;

/* 公会申请.同意/拒绝 返回  */
typedef struct tagSC_GUILD_ENTER_ACCEPT_ACK{
	enum{Type = SCID_GUILD_ENTER_ACCEPT_ACK};
	typedef CCliProto ProtoType;
	SGuildEnterAcceptAck stAck;
}SC_GUILD_ENTER_ACCEPT_ACK;

/* 公会申请.清空 请求  */
typedef struct tagCS_GUILD_ENTER_CLEAR_REQ{
	enum{Type = CSID_GUILD_ENTER_CLEAR_REQ};
	typedef CCliProto ProtoType;
}CS_GUILD_ENTER_CLEAR_REQ;

/* 公会申请.清空 返回  */
typedef struct tagSC_GUILD_ENTER_CLEAR_ACK{
	enum{Type = SCID_GUILD_ENTER_CLEAR_ACK};
	typedef CCliProto ProtoType;
	SGuildEnterClearAck stAck;
}SC_GUILD_ENTER_CLEAR_ACK;

/*Define Structs and Unions        End*/


/*Encode and Decode Function Declare Begin*/
int EncodeLGPKG_LOGIN_REQ(const void *pHost, INetData* poNetData);
int DecodeLGPKG_LOGIN_REQ(void *pHost, INetData* poNetData);
int EncodeLGPKG_ACT_REQ(const void *pHost, INetData* poNetData);
int DecodeLGPKG_ACT_REQ(void *pHost, INetData* poNetData);
int EncodeSCDNInfo(const void *pHost, INetData* poNetData);
int DecodeSCDNInfo(void *pHost, INetData* poNetData);
int EncodeSBundleInfoList(const void *pHost, INetData* poNetData);
int DecodeSBundleInfoList(void *pHost, INetData* poNetData);
int EncodeLGDT_LOGIN_SUCCESS(const void *pHost, INetData* poNetData);
int DecodeLGDT_LOGIN_SUCCESS(void *pHost, INetData* poNetData);
int EncodeLGDT_LOGIN_FAIL(const void *pHost, INetData* poNetData);
int DecodeLGDT_LOGIN_FAIL(void *pHost, INetData* poNetData);
int EncodeLGDT_LOGIN_INTERMEDIATE(const void *pHost, INetData* poNetData);
int DecodeLGDT_LOGIN_INTERMEDIATE(void *pHost, INetData* poNetData);
int EncodeUnLGDT_ACT_REPLY(const void *pHost, int iSelect, INetData* poNetData);
int DecodeUnLGDT_ACT_REPLY(void *pHost, int iSelect, INetData* poNetData);
int EncodeLGPKG_LOGIN_ACK(const void *pHost, INetData* poNetData);
int DecodeLGPKG_LOGIN_ACK(void *pHost, INetData* poNetData);
int EncodeLGPKG_GAMESERVER_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeLGPKG_GAMESERVER_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeLGPKG_GAMESERVER_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeLGPKG_GAMESERVER_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeGC_ERROR(const void *pHost, INetData* poNetData);
int DecodeGC_ERROR(void *pHost, INetData* poNetData);
int EncodeGC_ERRORSTRING(const void *pHost, INetData* poNetData);
int DecodeGC_ERRORSTRING(void *pHost, INetData* poNetData);
int EncodeCG_HEART_BEAT(const void *pHost, INetData* poNetData);
int DecodeCG_HEART_BEAT(void *pHost, INetData* poNetData);
int EncodeGC_HEART_BEAT(const void *pHost, INetData* poNetData);
int DecodeGC_HEART_BEAT(void *pHost, INetData* poNetData);
int EncodeGC_PUBLIC_STRING(const void *pHost, INetData* poNetData);
int DecodeGC_PUBLIC_STRING(void *pHost, INetData* poNetData);
int EncodeCG_LOGIN(const void *pHost, INetData* poNetData);
int DecodeCG_LOGIN(void *pHost, INetData* poNetData);
int EncodeGC_LOGIN(const void *pHost, INetData* poNetData);
int DecodeGC_LOGIN(void *pHost, INetData* poNetData);
int EncodeCG_LOGOUT(const void *pHost, INetData* poNetData);
int DecodeCG_LOGOUT(void *pHost, INetData* poNetData);
int EncodeGC_LOGOUT(const void *pHost, INetData* poNetData);
int DecodeGC_LOGOUT(void *pHost, INetData* poNetData);
int EncodeGC_QUEUE_INFO(const void *pHost, INetData* poNetData);
int DecodeGC_QUEUE_INFO(void *pHost, INetData* poNetData);
int EncodeGC_ROLELIST(const void *pHost, INetData* poNetData);
int DecodeGC_ROLELIST(void *pHost, INetData* poNetData);
int EncodeCG_CREATEROLE(const void *pHost, INetData* poNetData);
int DecodeCG_CREATEROLE(void *pHost, INetData* poNetData);
int EncodeGC_CREATEROLE(const void *pHost, INetData* poNetData);
int DecodeGC_CREATEROLE(void *pHost, INetData* poNetData);
int EncodeCG_DELROLE(const void *pHost, INetData* poNetData);
int DecodeCG_DELROLE(void *pHost, INetData* poNetData);
int EncodeGC_DELROLE(const void *pHost, INetData* poNetData);
int DecodeGC_DELROLE(void *pHost, INetData* poNetData);
int EncodeCG_SELECTROLE(const void *pHost, INetData* poNetData);
int DecodeCG_SELECTROLE(void *pHost, INetData* poNetData);
int EncodeGC_SELECTROLE(const void *pHost, INetData* poNetData);
int DecodeGC_SELECTROLE(void *pHost, INetData* poNetData);
int EncodeGC_GPK_CLT_DYN_CODE(const void *pHost, INetData* poNetData);
int DecodeGC_GPK_CLT_DYN_CODE(void *pHost, INetData* poNetData);
int EncodeCG_GPK_CLT_NEGLECT(const void *pHost, INetData* poNetData);
int DecodeCG_GPK_CLT_NEGLECT(void *pHost, INetData* poNetData);
int EncodeGC_GPK_CAL_ORIGIN(const void *pHost, INetData* poNetData);
int DecodeGC_GPK_CAL_ORIGIN(void *pHost, INetData* poNetData);
int EncodeCG_GPK_CAL_RESULT(const void *pHost, INetData* poNetData);
int DecodeCG_GPK_CAL_RESULT(void *pHost, INetData* poNetData);
int EncodeGSPKG_SERVERINFO_RPT(const void *pHost, INetData* poNetData);
int DecodeGSPKG_SERVERINFO_RPT(void *pHost, INetData* poNetData);
int EncodeGSPKG_SERVER_GROUP_DESC_RPT(const void *pHost, INetData* poNetData);
int DecodeGSPKG_SERVER_GROUP_DESC_RPT(void *pHost, INetData* poNetData);
int EncodeGSPKG_PLAYER_GPK_RPT(const void *pHost, INetData* poNetData);
int DecodeGSPKG_PLAYER_GPK_RPT(void *pHost, INetData* poNetData);
int EncodeGSPKG_ENTERGAME_REQ(const void *pHost, INetData* poNetData);
int DecodeGSPKG_ENTERGAME_REQ(void *pHost, INetData* poNetData);
int EncodeGSPKG_ENTERGAME_ACK(const void *pHost, INetData* poNetData);
int DecodeGSPKG_ENTERGAME_ACK(void *pHost, INetData* poNetData);
int EncodeGSPKG_LEAVEGAME_REQ(const void *pHost, INetData* poNetData);
int DecodeGSPKG_LEAVEGAME_REQ(void *pHost, INetData* poNetData);
int EncodeGSPKG_LEAVEGAME_ACK(const void *pHost, INetData* poNetData);
int DecodeGSPKG_LEAVEGAME_ACK(void *pHost, INetData* poNetData);
int EncodeGSPKG_SWITCHSCENE_REQ(const void *pHost, INetData* poNetData);
int DecodeGSPKG_SWITCHSCENE_REQ(void *pHost, INetData* poNetData);
int EncodeGSPKG_SWITCHSCENE_ACK(const void *pHost, INetData* poNetData);
int DecodeGSPKG_SWITCHSCENE_ACK(void *pHost, INetData* poNetData);
int EncodeGSPKG_KICKOUT_NTF(const void *pHost, INetData* poNetData);
int DecodeGSPKG_KICKOUT_NTF(void *pHost, INetData* poNetData);
int EncodeGSPKG_MSG_BROADCAST(const void *pHost, INetData* poNetData);
int DecodeGSPKG_MSG_BROADCAST(void *pHost, INetData* poNetData);
int EncodeGSPKG_LOAD_GSDATA_NTF(const void *pHost, INetData* poNetData);
int DecodeGSPKG_LOAD_GSDATA_NTF(void *pHost, INetData* poNetData);
int EncodeGSPKG_UPDATEGMLEVEL_NTF(const void *pHost, INetData* poNetData);
int DecodeGSPKG_UPDATEGMLEVEL_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ERROR_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ERROR_NTF(void *pHost, INetData* poNetData);
int EncodeSC_LEVEL_INFO(const void *pHost, INetData* poNetData);
int DecodeSC_LEVEL_INFO(void *pHost, INetData* poNetData);
int EncodeCS_LEVEL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_LEVEL_REQ(void *pHost, INetData* poNetData);
int EncodeCS_GET_BATTLE_BOX_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_BATTLE_BOX_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_BATTLE_BOX_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_BATTLE_BOX_ACK(void *pHost, INetData* poNetData);
int EncodeSC_BATTLE_GOT_STAR_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_BATTLE_GOT_STAR_NTF(void *pHost, INetData* poNetData);
int EncodeSDropInfo(const void *pHost, INetData* poNetData);
int DecodeSDropInfo(void *pHost, INetData* poNetData);
int EncodeSDropInfoList(const void *pHost, INetData* poNetData);
int DecodeSDropInfoList(void *pHost, INetData* poNetData);
int EncodeSDropInfos(const void *pHost, INetData* poNetData);
int DecodeSDropInfos(void *pHost, INetData* poNetData);
int EncodeSMonsterInfo(const void *pHost, INetData* poNetData);
int DecodeSMonsterInfo(void *pHost, INetData* poNetData);
int EncodeSMonsterInfos(const void *pHost, INetData* poNetData);
int DecodeSMonsterInfos(void *pHost, INetData* poNetData);
int EncodeSC_LEVEL_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_LEVEL_ACK(void *pHost, INetData* poNetData);
int EncodeSSkillCount(const void *pHost, INetData* poNetData);
int DecodeSSkillCount(void *pHost, INetData* poNetData);
int EncodeCS_LEVEL_RESULT_NTF(const void *pHost, INetData* poNetData);
int DecodeCS_LEVEL_RESULT_NTF(void *pHost, INetData* poNetData);
int EncodeSLevelSelectCardInfo(const void *pHost, INetData* poNetData);
int DecodeSLevelSelectCardInfo(void *pHost, INetData* poNetData);
int EncodeSC_TREASURE_CHEST_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_TREASURE_CHEST_NTF(void *pHost, INetData* poNetData);
int EncodeCS_OPEN_TREASURE_CHEST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_OPEN_TREASURE_CHEST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_OPEN_TREASURE_CHEST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_OPEN_TREASURE_CHEST_ACK(void *pHost, INetData* poNetData);
int EncodeSC_SELF_LOADSCENE(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_LOADSCENE(void *pHost, INetData* poNetData);
int EncodeCS_ENTERSCENE(const void *pHost, INetData* poNetData);
int DecodeCS_ENTERSCENE(void *pHost, INetData* poNetData);
int EncodeSC_SELF_ENTERSCENE(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_ENTERSCENE(void *pHost, INetData* poNetData);
int EncodeSC_SELF_DATA_END(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_DATA_END(void *pHost, INetData* poNetData);
int EncodeSC_SELF_APPEAR(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_APPEAR(void *pHost, INetData* poNetData);
int EncodeSC_SELF_VOLATILE_PRO(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_VOLATILE_PRO(void *pHost, INetData* poNetData);
int EncodeSC_CLIENT_CONFIG_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_CLIENT_CONFIG_NTF(void *pHost, INetData* poNetData);
int EncodeCS_CLIENT_CONFIG_UPDATE(const void *pHost, INetData* poNetData);
int DecodeCS_CLIENT_CONFIG_UPDATE(void *pHost, INetData* poNetData);
int EncodeSC_SELF_BASE_PRO(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_BASE_PRO(void *pHost, INetData* poNetData);
int EncodeSPetInfo(const void *pHost, INetData* poNetData);
int DecodeSPetInfo(void *pHost, INetData* poNetData);
int EncodePET_RECORD(const void *pHost, INetData* poNetData);
int DecodePET_RECORD(void *pHost, INetData* poNetData);
int EncodeSC_PETS_RECORD_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PETS_RECORD_NTF(void *pHost, INetData* poNetData);
int EncodeSC_USER_PETS_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_USER_PETS_NTF(void *pHost, INetData* poNetData);
int EncodeSC_USER_JOIN_PETS(const void *pHost, INetData* poNetData);
int DecodeSC_USER_JOIN_PETS(void *pHost, INetData* poNetData);
int EncodeSC_PET_INFO_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_INFO_NTF(void *pHost, INetData* poNetData);
int EncodeSC_PET_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData);
int EncodeSC_PET_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData);
int EncodeSC_GATHER_ITEM(const void *pHost, INetData* poNetData);
int DecodeSC_GATHER_ITEM(void *pHost, INetData* poNetData);
int EncodeSC_GATHER_INFO_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GATHER_INFO_NTF(void *pHost, INetData* poNetData);
int EncodeSC_GATHER_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GATHER_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData);
int EncodeSC_GATHER_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GATHER_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData);
int EncodeCS_GATHER_ITEM_MERGE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GATHER_ITEM_MERGE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GATHER_ITEM_MERGE_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GATHER_ITEM_MERGE_ACK(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_PROD_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_PROD_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_PROD_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_PROD_ACK(void *pHost, INetData* poNetData);
int EncodeCS_PET_GET_EXP_RPT(const void *pHost, INetData* poNetData);
int DecodeCS_PET_GET_EXP_RPT(void *pHost, INetData* poNetData);
int EncodeSC_PET_GET_EXP_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_PET_GET_EXP_ACK(void *pHost, INetData* poNetData);
int EncodeSC_PET_LEVEL_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_LEVEL_NTF(void *pHost, INetData* poNetData);
int EncodeCS_PET_UP_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_PET_UP_REQ(void *pHost, INetData* poNetData);
int EncodeSC_PET_UP_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_PET_UP_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SET_BATTLE_PET_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SET_BATTLE_PET_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SET_BATTLE_PET_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_SET_BATTLE_PET_NTF(void *pHost, INetData* poNetData);
int EncodeCS_PET_MERGE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_PET_MERGE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_PET_ADD_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_ADD_NTF(void *pHost, INetData* poNetData);
int EncodeSOtherInfo(const void *pHost, INetData* poNetData);
int DecodeSOtherInfo(void *pHost, INetData* poNetData);
int EncodeSOtherInfoWithPos(const void *pHost, INetData* poNetData);
int DecodeSOtherInfoWithPos(void *pHost, INetData* poNetData);
int EncodeSC_OTHER_APPEAR(const void *pHost, INetData* poNetData);
int DecodeSC_OTHER_APPEAR(void *pHost, INetData* poNetData);
int EncodeSC_OTHER_UPDATE(const void *pHost, INetData* poNetData);
int DecodeSC_OTHER_UPDATE(void *pHost, INetData* poNetData);
int EncodeSC_OTHER_DISAPPEAR(const void *pHost, INetData* poNetData);
int DecodeSC_OTHER_DISAPPEAR(void *pHost, INetData* poNetData);
int EncodeCS_MOVE_SYNC_MODE(const void *pHost, INetData* poNetData);
int DecodeCS_MOVE_SYNC_MODE(void *pHost, INetData* poNetData);
int EncodeCS_MOVE_BEGIN(const void *pHost, INetData* poNetData);
int DecodeCS_MOVE_BEGIN(void *pHost, INetData* poNetData);
int EncodeCS_MOVE_STOP(const void *pHost, INetData* poNetData);
int DecodeCS_MOVE_STOP(void *pHost, INetData* poNetData);
int EncodeSMoveObj(const void *pHost, INetData* poNetData);
int DecodeSMoveObj(void *pHost, INetData* poNetData);
int EncodeSC_MOVE_BEGIN(const void *pHost, INetData* poNetData);
int DecodeSC_MOVE_BEGIN(void *pHost, INetData* poNetData);
int EncodeSC_MOVE_STOP(const void *pHost, INetData* poNetData);
int DecodeSC_MOVE_STOP(void *pHost, INetData* poNetData);
int EncodeSSkillInfo(const void *pHost, INetData* poNetData);
int DecodeSSkillInfo(void *pHost, INetData* poNetData);
int EncodeSC_USER_SKILLS_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_USER_SKILLS_NTF(void *pHost, INetData* poNetData);
int EncodeCS_LEARN_SKILL(const void *pHost, INetData* poNetData);
int DecodeCS_LEARN_SKILL(void *pHost, INetData* poNetData);
int EncodeSC_SKILL_INFO_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_SKILL_INFO_NTF(void *pHost, INetData* poNetData);
int EncodeSC_REMOVE_SKILL_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_REMOVE_SKILL_NTF(void *pHost, INetData* poNetData);
int EncodeSC_SKILL_POINT_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_SKILL_POINT_NTF(void *pHost, INetData* poNetData);
int EncodeCS_SKILL_RESET_ALL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SKILL_RESET_ALL_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SELF_ITEM_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_ITEM_NTF(void *pHost, INetData* poNetData);
int EncodeCS_MOVE_ITEM_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_MOVE_ITEM_REQ(void *pHost, INetData* poNetData);
int EncodeSC_MOVE_ITEM_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_MOVE_ITEM_ACK(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_BAG_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_BAG_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_LIMIT_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_LIMIT_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_EQUIP_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_EQUIP_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_BAG_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_BAG_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_BAG_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_BAG_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_EQUIP_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_EQUIP_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_EQUIP_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_EQUIP_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_EQUIP_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_EQUIP_REQ(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_EVENT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_EVENT_REQ(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_ITEMUP_RPT(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_ITEMUP_RPT(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_ITEMUP_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_ITEMUP_ACK(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_ITEMUP_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_ITEMUP_NTF(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_SUIT_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_SUIT_NTF(void *pHost, INetData* poNetData);
int EncodeSROLE_HOLE_ON(const void *pHost, INetData* poNetData);
int DecodeSROLE_HOLE_ON(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_HOLE_ON_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_HOLE_ON_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_HOLE_ON_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_HOLE_ON_ACK(void *pHost, INetData* poNetData);
int EncodeSROLE_HOLE_OFF(const void *pHost, INetData* poNetData);
int DecodeSROLE_HOLE_OFF(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_HOLE_OFF_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_HOLE_OFF_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_HOLE_OFF_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_HOLE_OFF_ACK(void *pHost, INetData* poNetData);
int EncodeSROLE_HOLE_REFRESH(const void *pHost, INetData* poNetData);
int DecodeSROLE_HOLE_REFRESH(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_HOLE_REFRESH_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_HOLE_REFRESH_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_HOLE_REFRESH_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_HOLE_REFRESH_ACK(void *pHost, INetData* poNetData);
int EncodeSROLE_HOLE_MERGE(const void *pHost, INetData* poNetData);
int DecodeSROLE_HOLE_MERGE(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_HOLE_MERGE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_HOLE_MERGE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_HOLE_MERGE_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_HOLE_MERGE_ACK(void *pHost, INetData* poNetData);
int EncodeSROLE_HOLE_MERGE2(const void *pHost, INetData* poNetData);
int DecodeSROLE_HOLE_MERGE2(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_HOLE_MERGE2_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_HOLE_MERGE2_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_HOLE_MERGE2_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_HOLE_MERGE2_ACK(void *pHost, INetData* poNetData);
int EncodeCS_LOCK_RPT(const void *pHost, INetData* poNetData);
int DecodeCS_LOCK_RPT(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_USEITEM_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_USEITEM_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_USEITEM_START_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_USEITEM_START_ACK(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_USEITEM_END_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_USEITEM_END_ACK(void *pHost, INetData* poNetData);
int EncodeCS_PET_USEITEM_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_PET_USEITEM_REQ(void *pHost, INetData* poNetData);
int EncodeSC_PET_USEITEM_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_PET_USEITEM_ACK(void *pHost, INetData* poNetData);
int EncodeSC_PET_BAG_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_BAG_NTF(void *pHost, INetData* poNetData);
int EncodeSC_PET_BAG_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_BAG_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData);
int EncodeSC_PET_BAG_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_BAG_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData);
int EncodeCS_PET_EQUIP_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_PET_EQUIP_REQ(void *pHost, INetData* poNetData);
int EncodeCS_PET_EVENT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_PET_EVENT_REQ(void *pHost, INetData* poNetData);
int EncodeSC_PET_EVENT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_PET_EVENT_ACK(void *pHost, INetData* poNetData);
int EncodeCS_PET_TEAM_RPT(const void *pHost, INetData* poNetData);
int DecodeCS_PET_TEAM_RPT(void *pHost, INetData* poNetData);
int EncodeSC_PET_TEAM_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PET_TEAM_NTF(void *pHost, INetData* poNetData);
int EncodeCS_CHAT(const void *pHost, INetData* poNetData);
int DecodeCS_CHAT(void *pHost, INetData* poNetData);
int EncodeSC_CHAT(const void *pHost, INetData* poNetData);
int DecodeSC_CHAT(void *pHost, INetData* poNetData);
int EncodeSC_CHAT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_CHAT_ACK(void *pHost, INetData* poNetData);
int EncodeCS_FRIENDS_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_FRIENDS_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_FRIENDS_LIST_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_FRIENDS_LIST_NTF(void *pHost, INetData* poNetData);
int EncodeSC_FRIEND_EPINFO_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_FRIEND_EPINFO_NTF(void *pHost, INetData* poNetData);
int EncodeCS_QUERY_ROLE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_QUERY_ROLE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_QUERY_ROLE_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_QUERY_ROLE_ACK(void *pHost, INetData* poNetData);
int EncodeCS_ADD_FRIEND_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ADD_FRIEND_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ADD_FRIEND_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ADD_FRIEND_ACK(void *pHost, INetData* poNetData);
int EncodeCS_REMOVE_FRIEND_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_REMOVE_FRIEND_REQ(void *pHost, INetData* poNetData);
int EncodeSC_REMOVE_FRIEND_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_REMOVE_FRIEND_ACK(void *pHost, INetData* poNetData);
int EncodeCS_DONATE_ACTION_POINT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_DONATE_ACTION_POINT_REQ(void *pHost, INetData* poNetData);
int EncodeSC_DONATE_ACTION_POINT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_DONATE_ACTION_POINT_ACK(void *pHost, INetData* poNetData);
int EncodeSC_DONATE_ACTION_POINT_OTHER_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_DONATE_ACTION_POINT_OTHER_NTF(void *pHost, INetData* poNetData);
int EncodeCS_RECEIVE_ACTION_POINT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_RECEIVE_ACTION_POINT_REQ(void *pHost, INetData* poNetData);
int EncodeSC_RECEIVE_ACTION_POINT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_RECEIVE_ACTION_POINT_ACK(void *pHost, INetData* poNetData);
int EncodeCS_RESPONSE_ADD_FRIEND_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_RESPONSE_ADD_FRIEND_REQ(void *pHost, INetData* poNetData);
int EncodeSC_REQUEST_ADD_FRIEND_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_REQUEST_ADD_FRIEND_NTF(void *pHost, INetData* poNetData);
int EncodeSC_FRIEND_INFO_CHANGE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_FRIEND_INFO_CHANGE_NTF(void *pHost, INetData* poNetData);
int EncodeSC_FRIEND_REMOVE_INVITE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_FRIEND_REMOVE_INVITE_NTF(void *pHost, INetData* poNetData);
int EncodeCS_FRIEND_ASSIST_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_FRIEND_ASSIST_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeSAssistBattleInfo(const void *pHost, INetData* poNetData);
int DecodeSAssistBattleInfo(void *pHost, INetData* poNetData);
int EncodeSC_FRIEND_ASSIST_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_FRIEND_ASSIST_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SELECT_FRIEND_ASSIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SELECT_FRIEND_ASSIST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SELECT_FRIEND_ASSIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SELECT_FRIEND_ASSIST_ACK(void *pHost, INetData* poNetData);
int EncodeSC_ABYSS_TRIGGER_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ABYSS_TRIGGER_ACK(void *pHost, INetData* poNetData);
int EncodeCS_ABYSS_OPEN_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ABYSS_OPEN_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ABYSS_OPEN_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ABYSS_OPEN_ACK(void *pHost, INetData* poNetData);
int EncodeSC_ABYSS_OPEN_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ABYSS_OPEN_NTF(void *pHost, INetData* poNetData);
int EncodeCS_GET_ABYSS_TRIGGER_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_ABYSS_TRIGGER_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_ABYSS_TRIGGER_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_ABYSS_TRIGGER_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_ABYSS_OPEN_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_ABYSS_OPEN_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_ABYSS_OPEN_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_ABYSS_OPEN_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_ABYSS_OPEN_REC_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_ABYSS_OPEN_REC_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_ABYSS_OPEN_REC_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_ABYSS_OPEN_REC_ACK(void *pHost, INetData* poNetData);
int EncodeSC_ENTER_ABYSS_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ENTER_ABYSS_ACK(void *pHost, INetData* poNetData);
int EncodeSC_ABYSS_RUN_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_ABYSS_RUN_NTF(void *pHost, INetData* poNetData);
int EncodeSC_MAIL_LIST_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_MAIL_LIST_NTF(void *pHost, INetData* poNetData);
int EncodeCS_SEND_MAIL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SEND_MAIL_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SEND_MAIL_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SEND_MAIL_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_ITEM_FROM_MAIL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_ITEM_FROM_MAIL_REQ(void *pHost, INetData* poNetData);
int EncodeCS_GET_MONEY_FROM_MAIL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_MONEY_FROM_MAIL_REQ(void *pHost, INetData* poNetData);
int EncodeCS_READ_MAIL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_READ_MAIL_REQ(void *pHost, INetData* poNetData);
int EncodeSC_READ_MAIL_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_READ_MAIL_ACK(void *pHost, INetData* poNetData);
int EncodeCS_DELETE_MAIL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_DELETE_MAIL_REQ(void *pHost, INetData* poNetData);
int EncodeSC_DELETE_MAIL_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_DELETE_MAIL_ACK(void *pHost, INetData* poNetData);
int EncodeSC_UPDATE_MAIL_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_UPDATE_MAIL_NTF(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_ACTION_POINT_BOUGHT_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_ACTION_POINT_BOUGHT_NTF(void *pHost, INetData* poNetData);
int EncodeCS_SHOP_BUY_ACTION_POINT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SHOP_BUY_ACTION_POINT_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_BUY_ACTION_POINT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_BUY_ACTION_POINT_ACK(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_BUY_PET_INFO_CHEAP_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_BUY_PET_INFO_CHEAP_NTF(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF(void *pHost, INetData* poNetData);
int EncodeCS_SHOP_BUY_PET_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SHOP_BUY_PET_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_BUY_PET_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_BUY_PET_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SHOP_GET_GOODSLIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SHOP_GET_GOODSLIST_REQ(void *pHost, INetData* poNetData);
int EncodeSGoodsInfo(const void *pHost, INetData* poNetData);
int DecodeSGoodsInfo(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_GET_GOODSLIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_GET_GOODSLIST_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SHOP_BUY_GOODS_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SHOP_BUY_GOODS_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_BUY_GOODS_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_BUY_GOODS_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SHOP_SECRET_GOODS_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SHOP_SECRET_GOODS_REQ(void *pHost, INetData* poNetData);
int EncodeSSecretItemInfo(const void *pHost, INetData* poNetData);
int DecodeSSecretItemInfo(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_SECRET_GOODS_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_SECRET_GOODS_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SHOP_SECRET_BUY_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SHOP_SECRET_BUY_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SHOP_SECRET_BUY_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SHOP_SECRET_BUY_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SHOP_SECRET_REFRESH_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SHOP_SECRET_REFRESH_REQ(void *pHost, INetData* poNetData);
int EncodeSC_VIP_INFO_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_VIP_INFO_NTF(void *pHost, INetData* poNetData);
int EncodeSC_VIP_RMBINFO_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_VIP_RMBINFO_NTF(void *pHost, INetData* poNetData);
int EncodeSC_VIP_MONTHCARD_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_VIP_MONTHCARD_NTF(void *pHost, INetData* poNetData);
int EncodeCS_VIP_MONTHCARD_GETITEM_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_VIP_MONTHCARD_GETITEM_REQ(void *pHost, INetData* poNetData);
int EncodeSC_VIP_MONTHCARD_GETITEM_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_VIP_MONTHCARD_GETITEM_ACK(void *pHost, INetData* poNetData);
int EncodeCS_SELF_PVP_PRO_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_SELF_PVP_PRO_REQ(void *pHost, INetData* poNetData);
int EncodeSC_SELF_PVP_PRO_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_SELF_PVP_PRO_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_PVP_MATCH_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_PVP_MATCH_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_PVP_MATCH_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_PVP_MATCH_ACK(void *pHost, INetData* poNetData);
int EncodeCS_ENTER_PVP_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ENTER_PVP_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ENTER_PVP_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ENTER_PVP_ACK(void *pHost, INetData* poNetData);
int EncodeCS_PVP_RETULT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_PVP_RETULT_REQ(void *pHost, INetData* poNetData);
int EncodeSC_PVP_RETULT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_PVP_RETULT_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_PVP_MILITARY_REWARD_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_PVP_MILITARY_REWARD_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_PVP_MILITARY_REWARD_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_PVP_MILITARY_REWARD_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_PVP_REPUTE_REWARD_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_PVP_REPUTE_REWARD_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_PVP_REPUTE_REWARD_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_PVP_REPUTE_REWARD_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_RANK_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_RANK_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_RANK_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_RANK_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeCS_PVP_BUY_CHALLENGE_TIMES_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_PVP_BUY_CHALLENGE_TIMES_REQ(void *pHost, INetData* poNetData);
int EncodeSC_PVP_BUY_CHALLENGE_TIMES_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_PVP_BUY_CHALLENGE_TIMES_ACK(void *pHost, INetData* poNetData);
int EncodeSC_PVP_TIME_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_PVP_TIME_NTF(void *pHost, INetData* poNetData);
int EncodeCS_GET_PVP_ROLE_INFO_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_PVP_ROLE_INFO_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_PVP_ROLE_INFO_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_PVP_ROLE_INFO_ACK(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_SIGN_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_SIGN_NTF(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_SIGN_VIP_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_SIGN_VIP_NTF(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_SIGN(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_SIGN(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_SIGN_VIP(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_SIGN_VIP(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_LEVEL_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_LEVEL_NTF(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_LEVEL(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_LEVEL(void *pHost, INetData* poNetData);
int EncodeSDayQuestInfo(const void *pHost, INetData* poNetData);
int DecodeSDayQuestInfo(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_DAY_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_DAY_NTF(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_DAY_UPD(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_DAY_UPD(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_DAY_SCORE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_DAY_SCORE_REQ(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_DAY_BOX_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_DAY_BOX_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_DAY_BOX_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_DAY_BOX_NTF(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_JIHUOMA_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_JIHUOMA_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_JIHUOMA_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_JIHUOMA_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_EP_INFO_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_EP_INFO_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_EP_INFO_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_EP_INFO_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GIFT_RECEIVE_EP_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GIFT_RECEIVE_EP_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GIFT_RECEIVE_EP_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GIFT_RECEIVE_EP_ACK(void *pHost, INetData* poNetData);
int EncodeCS_WB_INFO_REFRESH_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_WB_INFO_REFRESH_REQ(void *pHost, INetData* poNetData);
int EncodeSC_WB_INFO_REFRESH_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_WB_INFO_REFRESH_ACK(void *pHost, INetData* poNetData);
int EncodeCS_WB_ADD_BUF_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_WB_ADD_BUF_REQ(void *pHost, INetData* poNetData);
int EncodeSC_WB_ADD_BUF_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_WB_ADD_BUF_ACK(void *pHost, INetData* poNetData);
int EncodeCS_WB_RELIVE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_WB_RELIVE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_WB_RELIVE_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_WB_RELIVE_ACK(void *pHost, INetData* poNetData);
int EncodeSC_WB_KILLED_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_WB_KILLED_NTF(void *pHost, INetData* poNetData);
int EncodeSC_WB_RUN_NTF(const void *pHost, INetData* poNetData);
int DecodeSC_WB_RUN_NTF(void *pHost, INetData* poNetData);
int EncodeCS_WB_ENTER_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_WB_ENTER_REQ(void *pHost, INetData* poNetData);
int EncodeSC_WB_ENTER_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_WB_ENTER_ACK(void *pHost, INetData* poNetData);
int EncodeCS_WB_RESULT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_WB_RESULT_REQ(void *pHost, INetData* poNetData);
int EncodeSC_WB_RESULT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_WB_RESULT_ACK(void *pHost, INetData* poNetData);
int EncodeCS_ROLE_RANK_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_ROLE_RANK_REQ(void *pHost, INetData* poNetData);
int EncodeSC_ROLE_RANK_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_ROLE_RANK_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_PT_BASEINFO_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_PT_BASEINFO_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_PT_BASEINFO_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_PT_BASEINFO_ACK(void *pHost, INetData* poNetData);
int EncodeCS_BUY_PT_TIMES_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_BUY_PT_TIMES_REQ(void *pHost, INetData* poNetData);
int EncodeSC_BUY_PT_TIMES_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_BUY_PT_TIMES_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_MD_BASEINFO_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_MD_BASEINFO_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_MD_BASEINFO_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_MD_BASEINFO_ACK(void *pHost, INetData* poNetData);
int EncodeCS_BUY_MD_TIMES_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_BUY_MD_TIMES_REQ(void *pHost, INetData* poNetData);
int EncodeSC_BUY_MD_TIMES_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_BUY_MD_TIMES_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GET_FD_BASEINFO_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GET_FD_BASEINFO_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GET_FD_BASEINFO_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GET_FD_BASEINFO_ACK(void *pHost, INetData* poNetData);
int EncodeCS_BUY_FD_TIMES_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_BUY_FD_TIMES_REQ(void *pHost, INetData* poNetData);
int EncodeSC_BUY_FD_TIMES_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_BUY_FD_TIMES_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_INFO_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_INFO_REQ(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_ENTER_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_ENTER_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_ENTER_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_ENTER_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_CREATE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_CREATE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_CREATE_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_CREATE_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_LEAVE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_LEAVE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_LEAVE_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_LEAVE_ACK(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_BASEINFO_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_BASEINFO_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_LOG_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_LOG_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_LOG_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_LOG_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_CHANGE_NOTICE_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_CHANGE_NOTICE_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_CHANGE_NOTICE_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_CHANGE_NOTICE_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_DETAIL_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_DETAIL_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_DETAIL_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_DETAIL_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_ENTERLIST_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_ENTERLIST_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_ENTERLIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_ENTERLIST_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_ENTER_ACCEPT_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_ENTER_ACCEPT_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_ENTER_ACCEPT_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_ENTER_ACCEPT_ACK(void *pHost, INetData* poNetData);
int EncodeCS_GUILD_ENTER_CLEAR_REQ(const void *pHost, INetData* poNetData);
int DecodeCS_GUILD_ENTER_CLEAR_REQ(void *pHost, INetData* poNetData);
int EncodeSC_GUILD_ENTER_CLEAR_ACK(const void *pHost, INetData* poNetData);
int DecodeSC_GUILD_ENTER_CLEAR_ACK(void *pHost, INetData* poNetData);
/*Encode and Decode Function Declare End*/

typedef int (*EnFuncCCliProto)(const void *pHost, INetData* poNetData);
typedef int (*DeFuncCCliProto)(void *pHost, INetData* poNetData);

class CCliProto
{
public:
	CCliProto();
	~CCliProto();
	int Encode(int iMsgID, const void *pHost, char *pNet, int iNetSize);
	int Decode(int iMsgID, const char *pNet,int iNetSize, void *pHost, int iHostSize);
	const char * GetProtoMd5() const{ return "A258B49BEC819D37ADABA7B026B05B55"; }
	int GetPkgSize(int iMsgID) { return m_iPkgSizeArray[iMsgID - CLIPROTO_MSGID_OFFSET];}
	EnFuncCCliProto FindEncodeFunc(int iMsgID);
	DeFuncCCliProto FindDecodeFunc(int iMsgID);
	bool Init();
	int GetPkgEncodeCount(int iMsgID);
	int GetPkgDecodeCount(int iMsgID);
#ifdef CLIPROTO_ID2NAME_DES
    const char* GetPkgName(int iMsgID);
#endif
   void SetData(INetData &oData){m_poData = &oData;}

private:
	EnFuncCCliProto       m_EncodeFuncArray[CLIPROTO_MSGID_RANGE];
	DeFuncCCliProto       m_DecodeFuncArray[CLIPROTO_MSGID_RANGE];
	int      m_iPkgSizeArray[CLIPROTO_MSGID_RANGE];
	CNetData m_oData;
   INetData *m_poData;
	int      m_iPkgEncodeCount[CLIPROTO_MSGID_RANGE];
	int      m_iPkgDecodeCount[CLIPROTO_MSGID_RANGE];
#ifdef CLIPROTO_ID2NAME_DES
	const char* m_arrPkgID2Name[CLIPROTO_MSGID_RANGE];
#endif
};

#endif
