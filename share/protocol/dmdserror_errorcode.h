/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: Qiang Xin Bo                          **
********************************************************************/

/*       Version Number: 1_0          */

#ifndef DMDSERROR_ERRORCODE_H_INCLUDE_VERSION_1_0
#define DMDSERROR_ERRORCODE_H_INCLUDE_VERSION_1_0

#include "safeformatex.h"

#ifndef NSDMDSERROR_BEGIN
#define NSDMDSERROR_BEGIN
#endif

#ifndef NSDMDSERROR_NAMESPACE
#define NSDMDSERROR_NAMESPACE
#endif

#ifndef NSDMDSERROR_END
#define NSDMDSERROR_END
#endif

NSDMDSERROR_BEGIN

enum EErrorID
{
    ERR_OK                             = 0     , /// 操作成功错误码
    ERR_NG                             = 1     , /// 常规失败错误码
    ERR_SYSTEM                         = 2     , /// 系统
    ERR_SYSTEM_SENDER                  = 3     , /// 蕾安娜
    ERR_INVALID_ID                     = 5     , /// 角色不存在
    ERR_FRIEND_EXIST                   = 10    , /// 好友已存在
    ERR_FRIEND_NOT_EXIST               = 11    , /// 好友不存在
    ERR_FRIEND_COUNT_EXCEED            = 12    , /// 您不能再添加更多好友了
    ERR_FRIEND_ALLOCATE_FAIL           = 13    , /// 分配好友内存失败
    ERR_FRIEND_ACTION_COUNT_LESS       = 14    , /// 次数已经用完
    ERR_FRIEND_NO_AP_CAN_BE_RECEIVED   = 15    , /// 没有体力可领
    ERR_FRIEND_AP_HAS_BEEN_DONATED     = 16    , /// 今天已经向该好友赠送过体力了
    ERR_FRIEND_ADD_SELF                = 17    , /// 不能添加自己为好友
    ERR_FRIEND_OTHER_REFUSEED          = 18    , /// 对方拒绝了你的请求
    ERR_FRIEND_INVITE_EXIST            = 19    , /// 
    ERR_FRIEND_INVITE_NOT_EXIST        = 20    , /// 
    ERR_FRIEND_ADD_OLD_TIME_LIMIT      = 21    , /// 24小时内不能加以删除好友
    ERR_FRIEND_ASSIST_IN_CD            = 22    , /// 已经助战的好友12小时内不能再助战
    ERR_LEVEL_BATTLE_BOX_HAS_GOT       = 10001 , /// 已经打开过该宝箱
    ERR_ABYSS_RUN_MAIL_TITLE           = 20001 , /// 深渊boss逃跑邮件标题
    ERR_ABYSS_RUN_MAIL_CONTENT         = 20002 , /// 深渊boss逃跑邮件正文
    ERR_ABYSS_ASSIST_KILL_MAIL_TITLE   = 20003 , /// 协助击杀深渊BOSS邮件标题
    ERR_ABYSS_ASSIST_KILL_MAIL_CONTENT = 20004 , /// 协助击杀深渊BOSS内容
    ERR_ABYSS_OWNER_KILL_MAIL_TITLE    = 20005 , /// 击杀深渊BOSS，拥有者奖励邮件标题
    ERR_ABYSS_OWNER_KILL_MAIL_CONTENT  = 20006 , /// 击杀深渊BOSS，拥有者奖励邮件内容
    ERR_PVP_RANK_MAIL_TITLE            = 20007 , /// 竞技场排名奖励邮件标题
    ERR_PVP_RANK_MAIL_CONTENT          = 20008 , /// 竞技场排名奖励邮件正文
    ERR_ABYSS_EP_NOT_ENOUGH            = 20009 , /// 体力不足
    ERR_ABYSS_AP_NOT_ENOUGH            = 20010 , /// 协助点数不足
    ERR_ABYSS_FRIEND_ONE_TIME          = 20011 , /// 无法进入，好友深渊只能进入1次
    ERR_ABYSS_ENTER_ERROR              = 20012 , /// 进入深渊失败
    ERR_WB_RANK_MAIL_TITLE             = 20013 , /// 世界BOSS排名奖励邮件标题
    ERR_WB_RANK_MAIL_CONTENT           = 20014 , /// 世界BOSS排名奖励邮件正文
    ERR_JIHUOMA_SENDMAIL_TITLE         = 20015 , /// 领取激活码成功邮件标题
    ERR_JIHUOMA_SENDMAIL_CONTENT       = 20016 , /// 领取激活码成功邮件正文
    ERR_PAY_SUCCESS                    = 20017 , /// 充值成功提示
};


template<EErrorID ID> inline const char * GetErrorInfoEx();

inline const char * GetErrorInfoEx(){ return "ERR_UNKNOWN";}

template<> inline const char * GetErrorInfoEx<ERR_OK>(){ return "成功";}
template<> inline const char * GetErrorInfoEx<ERR_NG>(){ return "失败";}
template<> inline const char * GetErrorInfoEx<ERR_SYSTEM>(){ return "系统";}
template<> inline const char * GetErrorInfoEx<ERR_SYSTEM_SENDER>(){ return "蕾安娜";}
template<> inline const char * GetErrorInfoEx<ERR_INVALID_ID>(){ return "角色不存在";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_EXIST>(){ return "好友已存在";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_NOT_EXIST>(){ return "好友不存在";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_COUNT_EXCEED>(){ return "您不能再添加更多好友了";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_ALLOCATE_FAIL>(){ return "分配好友内存失败";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_ACTION_COUNT_LESS>(){ return "次数已经用完";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_NO_AP_CAN_BE_RECEIVED>(){ return "没有体力可领";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_AP_HAS_BEEN_DONATED>(){ return "今天已经向该好友赠送过体力了";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_ADD_SELF>(){ return "不能添加自己为好友";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_OTHER_REFUSEED>(){ return "对方拒绝了你的请求";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_INVITE_EXIST>(){ return "邀请信息已经存在";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_INVITE_NOT_EXIST>(){ return "邀请信息不存在";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_ADD_OLD_TIME_LIMIT>(){ return "24小时内不能加以删除好友";}
template<> inline const char * GetErrorInfoEx<ERR_FRIEND_ASSIST_IN_CD>(){ return "已经助战的好友12小时内不能再助战";}
template<> inline const char * GetErrorInfoEx<ERR_LEVEL_BATTLE_BOX_HAS_GOT>(){ return "宝箱已打开";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_RUN_MAIL_TITLE>(){ return "深渊BOSS %s 已逃跑！";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_RUN_MAIL_CONTENT>(){ return "很遗憾，你发现的深渊boss %s 已经逃跑，请再接再厉！";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_ASSIST_KILL_MAIL_TITLE>(){ return "协助击杀！%s";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_ASSIST_KILL_MAIL_CONTENT>(){ return "恭喜你！你在协助击杀深渊boss %s 的战斗中表现英勇，获得了丰厚的奖励！";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_OWNER_KILL_MAIL_TITLE>(){ return "深渊终结者！%s";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_OWNER_KILL_MAIL_CONTENT>(){ return "恭喜你！你发现的深渊boss %s 已被击杀，获得了丰厚的奖励！";}
template<> inline const char * GetErrorInfoEx<ERR_PVP_RANK_MAIL_TITLE>(){ return "竞技排名奖励邮件[第%d名]";}
template<> inline const char * GetErrorInfoEx<ERR_PVP_RANK_MAIL_CONTENT>(){ return "恭喜你！排名奖励发送啦！！你的排名是第%d名";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_EP_NOT_ENOUGH>(){ return "你的体力不足，无法进入";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_AP_NOT_ENOUGH>(){ return "你的协助点数不足，无法进入";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_FRIEND_ONE_TIME>(){ return "无法进入，好友深渊只能进入1次";}
template<> inline const char * GetErrorInfoEx<ERR_ABYSS_ENTER_ERROR>(){ return "进入深渊失败";}
template<> inline const char * GetErrorInfoEx<ERR_WB_RANK_MAIL_TITLE>(){ return "世界BOSS排名奖励邮件[第%d名]";}
template<> inline const char * GetErrorInfoEx<ERR_WB_RANK_MAIL_CONTENT>(){ return "恭喜你！世界BOSS排名奖励发送啦！！你的排名是第%d名";}
template<> inline const char * GetErrorInfoEx<ERR_JIHUOMA_SENDMAIL_TITLE>(){ return "恭喜您成功领取激活码！！";}
template<> inline const char * GetErrorInfoEx<ERR_JIHUOMA_SENDMAIL_CONTENT>(){ return "恭喜您！激活码领取成功了！！奖励物品随本邮件发放，请注意查收！";}
template<> inline const char * GetErrorInfoEx<ERR_PAY_SUCCESS>(){ return "恭喜您！充值成功！！";}

inline const char* GetErrorInfoEx(int nError)
{
    switch(nError)
    {
    case ERR_OK: return GetErrorInfoEx<ERR_OK>();
    case ERR_NG: return GetErrorInfoEx<ERR_NG>();
    case ERR_SYSTEM: return GetErrorInfoEx<ERR_SYSTEM>();
    case ERR_SYSTEM_SENDER: return GetErrorInfoEx<ERR_SYSTEM_SENDER>();
    case ERR_INVALID_ID: return GetErrorInfoEx<ERR_INVALID_ID>();
    case ERR_FRIEND_EXIST: return GetErrorInfoEx<ERR_FRIEND_EXIST>();
    case ERR_FRIEND_NOT_EXIST: return GetErrorInfoEx<ERR_FRIEND_NOT_EXIST>();
    case ERR_FRIEND_COUNT_EXCEED: return GetErrorInfoEx<ERR_FRIEND_COUNT_EXCEED>();
    case ERR_FRIEND_ALLOCATE_FAIL: return GetErrorInfoEx<ERR_FRIEND_ALLOCATE_FAIL>();
    case ERR_FRIEND_ACTION_COUNT_LESS: return GetErrorInfoEx<ERR_FRIEND_ACTION_COUNT_LESS>();
    case ERR_FRIEND_NO_AP_CAN_BE_RECEIVED: return GetErrorInfoEx<ERR_FRIEND_NO_AP_CAN_BE_RECEIVED>();
    case ERR_FRIEND_AP_HAS_BEEN_DONATED: return GetErrorInfoEx<ERR_FRIEND_AP_HAS_BEEN_DONATED>();
    case ERR_FRIEND_ADD_SELF: return GetErrorInfoEx<ERR_FRIEND_ADD_SELF>();
    case ERR_FRIEND_OTHER_REFUSEED: return GetErrorInfoEx<ERR_FRIEND_OTHER_REFUSEED>();
    case ERR_FRIEND_INVITE_EXIST: return GetErrorInfoEx<ERR_FRIEND_INVITE_EXIST>();
    case ERR_FRIEND_INVITE_NOT_EXIST: return GetErrorInfoEx<ERR_FRIEND_INVITE_NOT_EXIST>();
    case ERR_FRIEND_ADD_OLD_TIME_LIMIT: return GetErrorInfoEx<ERR_FRIEND_ADD_OLD_TIME_LIMIT>();
    case ERR_FRIEND_ASSIST_IN_CD: return GetErrorInfoEx<ERR_FRIEND_ASSIST_IN_CD>();
    case ERR_LEVEL_BATTLE_BOX_HAS_GOT: return GetErrorInfoEx<ERR_LEVEL_BATTLE_BOX_HAS_GOT>();
    case ERR_ABYSS_RUN_MAIL_TITLE: return GetErrorInfoEx<ERR_ABYSS_RUN_MAIL_TITLE>();
    case ERR_ABYSS_RUN_MAIL_CONTENT: return GetErrorInfoEx<ERR_ABYSS_RUN_MAIL_CONTENT>();
    case ERR_ABYSS_ASSIST_KILL_MAIL_TITLE: return GetErrorInfoEx<ERR_ABYSS_ASSIST_KILL_MAIL_TITLE>();
    case ERR_ABYSS_ASSIST_KILL_MAIL_CONTENT: return GetErrorInfoEx<ERR_ABYSS_ASSIST_KILL_MAIL_CONTENT>();
    case ERR_ABYSS_OWNER_KILL_MAIL_TITLE: return GetErrorInfoEx<ERR_ABYSS_OWNER_KILL_MAIL_TITLE>();
    case ERR_ABYSS_OWNER_KILL_MAIL_CONTENT: return GetErrorInfoEx<ERR_ABYSS_OWNER_KILL_MAIL_CONTENT>();
    case ERR_PVP_RANK_MAIL_TITLE: return GetErrorInfoEx<ERR_PVP_RANK_MAIL_TITLE>();
    case ERR_PVP_RANK_MAIL_CONTENT: return GetErrorInfoEx<ERR_PVP_RANK_MAIL_CONTENT>();
    case ERR_ABYSS_EP_NOT_ENOUGH: return GetErrorInfoEx<ERR_ABYSS_EP_NOT_ENOUGH>();
    case ERR_ABYSS_AP_NOT_ENOUGH: return GetErrorInfoEx<ERR_ABYSS_AP_NOT_ENOUGH>();
    case ERR_ABYSS_FRIEND_ONE_TIME: return GetErrorInfoEx<ERR_ABYSS_FRIEND_ONE_TIME>();
    case ERR_ABYSS_ENTER_ERROR: return GetErrorInfoEx<ERR_ABYSS_ENTER_ERROR>();
    case ERR_WB_RANK_MAIL_TITLE: return GetErrorInfoEx<ERR_WB_RANK_MAIL_TITLE>();
    case ERR_WB_RANK_MAIL_CONTENT: return GetErrorInfoEx<ERR_WB_RANK_MAIL_CONTENT>();
    case ERR_JIHUOMA_SENDMAIL_TITLE: return GetErrorInfoEx<ERR_JIHUOMA_SENDMAIL_TITLE>();
    case ERR_JIHUOMA_SENDMAIL_CONTENT: return GetErrorInfoEx<ERR_JIHUOMA_SENDMAIL_CONTENT>();
    case ERR_PAY_SUCCESS: return GetErrorInfoEx<ERR_PAY_SUCCESS>();
    default: break;
    }
    return GetErrorInfoEx();
}

inline std::string FormatErrorInfo(int nError){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError));}

template<class V0>
inline std::string FormatErrorInfo(int nError, const V0& p0){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0);}

template<class V0, class V1>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1);}

template<class V0, class V1, class V2>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2);}

template<class V0, class V1, class V2, class V3>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2,p3);}

template<class V0, class V1, class V2, class V3, class V4>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2,p3,p4);}

template<class V0, class V1, class V2, class V3, class V4, class V5>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2,p3,p4,p5);}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2,p3,p4,p5,p6);}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6, class V7>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6, const V7& p7){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2,p3,p4,p5,p6,p7);}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6, class V7, class V8>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6, const V7& p7, const V8& p8){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2,p3,p4,p5,p6,p7,p8);}

template<class V0, class V1, class V2, class V3, class V4, class V5, class V6, class V7, class V8, class V9>
inline std::string FormatErrorInfo(int nError, const V0& p0, const V1& p1, const V2& p2, const V3& p3, const V4& p4, const V5& p5, const V6& p6, const V7& p7, const V8& p8, const V9& p9){ std::string strError; return SafeFormat(strError,GetErrorInfoEx(nError),p0,p1,p2,p3,p4,p5,p6,p7,p8,p9);}

NSDMDSERROR_END
#endif
