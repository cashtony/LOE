#include "cliproto.h"

CCliProto::CCliProto()
{
	memset(m_EncodeFuncArray, 0, sizeof(m_EncodeFuncArray));
	memset(m_DecodeFuncArray, 0, sizeof(m_DecodeFuncArray));
	Init();
}

CCliProto::~CCliProto()
{
}

int CCliProto::Encode(int iMsgID, const void *pHost, char *pNet, int iNetSize)
{
	INetData *poData = m_poData ? m_poData : &m_oData;
	poData->Prepare(pNet, iNetSize);

	EnFuncCCliProto pfnEncode = FindEncodeFunc(iMsgID);
	if(NULL == pfnEncode)
		return -1;

	++m_iPkgEncodeCount[iMsgID - CLIPROTO_MSGID_OFFSET];

	return (*pfnEncode)(pHost, poData);
}

int CCliProto::Decode(int iMsgID, const char *pNet, int iNetSize, void *pHost, int iHostSize)
{
	INetData *poData = m_poData ? m_poData : &m_oData;
	poData->Prepare(const_cast<char *>(pNet), iNetSize);

	DeFuncCCliProto pfnDecode = FindDecodeFunc(iMsgID);
	if(NULL == pfnDecode)
		return -1;

	if(iHostSize < m_iPkgSizeArray[iMsgID - CLIPROTO_MSGID_OFFSET])
		return -1;
	++m_iPkgDecodeCount[iMsgID - CLIPROTO_MSGID_OFFSET];

	return (*pfnDecode)(pHost, poData);
}

EnFuncCCliProto CCliProto::FindEncodeFunc(int iMsgID)
{
	int iMsgIndex = iMsgID - CLIPROTO_MSGID_OFFSET; 
	if(iMsgIndex >= CLIPROTO_MSGID_RANGE || iMsgIndex < 0)
		return NULL;
	return m_EncodeFuncArray[iMsgIndex];
}

DeFuncCCliProto CCliProto::FindDecodeFunc(int iMsgID)
{
	int iMsgIndex = iMsgID - CLIPROTO_MSGID_OFFSET; 
	if(iMsgIndex >= CLIPROTO_MSGID_RANGE || iMsgIndex < 0)
		return NULL;
	return m_DecodeFuncArray[iMsgIndex];
}

bool CCliProto::Init()
{
	m_poData = 0;
	memset(m_iPkgEncodeCount, 0, sizeof(m_iPkgEncodeCount));
	memset(m_iPkgDecodeCount, 0, sizeof(m_iPkgDecodeCount));
#ifdef CCliProto_ID2NAME_DES
	memset(m_arrPkgID2Name, 0, sizeof(m_arrPkgID2Name));
#endif

	m_EncodeFuncArray[CGID_LOGIN - CLIPROTO_MSGID_OFFSET] = &EncodeCG_LOGIN;
	m_DecodeFuncArray[CGID_LOGIN - CLIPROTO_MSGID_OFFSET] = &DecodeCG_LOGIN;

	m_EncodeFuncArray[GCID_LOGIN - CLIPROTO_MSGID_OFFSET] = &EncodeGC_LOGIN;
	m_DecodeFuncArray[GCID_LOGIN - CLIPROTO_MSGID_OFFSET] = &DecodeGC_LOGIN;

	m_EncodeFuncArray[CGID_LOGOUT - CLIPROTO_MSGID_OFFSET] = &EncodeCG_LOGOUT;
	m_DecodeFuncArray[CGID_LOGOUT - CLIPROTO_MSGID_OFFSET] = &DecodeCG_LOGOUT;

	m_EncodeFuncArray[GCID_LOGOUT - CLIPROTO_MSGID_OFFSET] = &EncodeGC_LOGOUT;
	m_DecodeFuncArray[GCID_LOGOUT - CLIPROTO_MSGID_OFFSET] = &DecodeGC_LOGOUT;

	m_EncodeFuncArray[GCID_ROLELIST - CLIPROTO_MSGID_OFFSET] = &EncodeGC_ROLELIST;
	m_DecodeFuncArray[GCID_ROLELIST - CLIPROTO_MSGID_OFFSET] = &DecodeGC_ROLELIST;

	m_EncodeFuncArray[CGID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = &EncodeCG_CREATEROLE;
	m_DecodeFuncArray[CGID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = &DecodeCG_CREATEROLE;

	m_EncodeFuncArray[GCID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = &EncodeGC_CREATEROLE;
	m_DecodeFuncArray[GCID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = &DecodeGC_CREATEROLE;

	m_EncodeFuncArray[CGID_DELROLE - CLIPROTO_MSGID_OFFSET] = &EncodeCG_DELROLE;
	m_DecodeFuncArray[CGID_DELROLE - CLIPROTO_MSGID_OFFSET] = &DecodeCG_DELROLE;

	m_EncodeFuncArray[GCID_DELROLE - CLIPROTO_MSGID_OFFSET] = &EncodeGC_DELROLE;
	m_DecodeFuncArray[GCID_DELROLE - CLIPROTO_MSGID_OFFSET] = &DecodeGC_DELROLE;

	m_EncodeFuncArray[CGID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = &EncodeCG_SELECTROLE;
	m_DecodeFuncArray[CGID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = &DecodeCG_SELECTROLE;

	m_EncodeFuncArray[GCID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = &EncodeGC_SELECTROLE;
	m_DecodeFuncArray[GCID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = &DecodeGC_SELECTROLE;

	m_EncodeFuncArray[GCID_QUEUE_INFO - CLIPROTO_MSGID_OFFSET] = &EncodeGC_QUEUE_INFO;
	m_DecodeFuncArray[GCID_QUEUE_INFO - CLIPROTO_MSGID_OFFSET] = &DecodeGC_QUEUE_INFO;

	m_EncodeFuncArray[GCID_GPK_DYN_CODE - CLIPROTO_MSGID_OFFSET] = &EncodeGC_GPK_CLT_DYN_CODE;
	m_DecodeFuncArray[GCID_GPK_DYN_CODE - CLIPROTO_MSGID_OFFSET] = &DecodeGC_GPK_CLT_DYN_CODE;

	m_EncodeFuncArray[CGID_GPK_NEGLECT - CLIPROTO_MSGID_OFFSET] = &EncodeCG_GPK_CLT_NEGLECT;
	m_DecodeFuncArray[CGID_GPK_NEGLECT - CLIPROTO_MSGID_OFFSET] = &DecodeCG_GPK_CLT_NEGLECT;

	m_EncodeFuncArray[GCID_GPK_CAL_ORIGIN - CLIPROTO_MSGID_OFFSET] = &EncodeGC_GPK_CAL_ORIGIN;
	m_DecodeFuncArray[GCID_GPK_CAL_ORIGIN - CLIPROTO_MSGID_OFFSET] = &DecodeGC_GPK_CAL_ORIGIN;

	m_EncodeFuncArray[CGID_GPK_CAL_RESULT - CLIPROTO_MSGID_OFFSET] = &EncodeCG_GPK_CAL_RESULT;
	m_DecodeFuncArray[CGID_GPK_CAL_RESULT - CLIPROTO_MSGID_OFFSET] = &DecodeCG_GPK_CAL_RESULT;

	m_EncodeFuncArray[GCID_ERROR - CLIPROTO_MSGID_OFFSET] = &EncodeGC_ERROR;
	m_DecodeFuncArray[GCID_ERROR - CLIPROTO_MSGID_OFFSET] = &DecodeGC_ERROR;

	m_EncodeFuncArray[GCID_ERRORSTRING - CLIPROTO_MSGID_OFFSET] = &EncodeGC_ERRORSTRING;
	m_DecodeFuncArray[GCID_ERRORSTRING - CLIPROTO_MSGID_OFFSET] = &DecodeGC_ERRORSTRING;

	m_EncodeFuncArray[CGID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = &EncodeCG_HEART_BEAT;
	m_DecodeFuncArray[CGID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = &DecodeCG_HEART_BEAT;

	m_EncodeFuncArray[GCID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = &EncodeGC_HEART_BEAT;
	m_DecodeFuncArray[GCID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = &DecodeGC_HEART_BEAT;

	m_EncodeFuncArray[GCID_PUBLIC_STRING - CLIPROTO_MSGID_OFFSET] = &EncodeGC_PUBLIC_STRING;
	m_DecodeFuncArray[GCID_PUBLIC_STRING - CLIPROTO_MSGID_OFFSET] = &DecodeGC_PUBLIC_STRING;

	m_EncodeFuncArray[LGID_LOGIN_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeLGPKG_LOGIN_REQ;
	m_DecodeFuncArray[LGID_LOGIN_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeLGPKG_LOGIN_REQ;

	m_EncodeFuncArray[LGID_LOGIN_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeLGPKG_LOGIN_ACK;
	m_DecodeFuncArray[LGID_LOGIN_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeLGPKG_LOGIN_ACK;

	m_EncodeFuncArray[LGID_GAMESERVER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeLGPKG_GAMESERVER_LIST_REQ;
	m_DecodeFuncArray[LGID_GAMESERVER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeLGPKG_GAMESERVER_LIST_REQ;

	m_EncodeFuncArray[LGID_GAMESERVER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeLGPKG_GAMESERVER_LIST_ACK;
	m_DecodeFuncArray[LGID_GAMESERVER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeLGPKG_GAMESERVER_LIST_ACK;

	m_EncodeFuncArray[GSID_SERVERINFO_RPT - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_SERVERINFO_RPT;
	m_DecodeFuncArray[GSID_SERVERINFO_RPT - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_SERVERINFO_RPT;

	m_EncodeFuncArray[GSID_SERVER_GROUP_DESC_RPT - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_SERVER_GROUP_DESC_RPT;
	m_DecodeFuncArray[GSID_SERVER_GROUP_DESC_RPT - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_SERVER_GROUP_DESC_RPT;

	m_EncodeFuncArray[GSID_ENTERGAME_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_ENTERGAME_REQ;
	m_DecodeFuncArray[GSID_ENTERGAME_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_ENTERGAME_REQ;

	m_EncodeFuncArray[GSID_ENTERGAME_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_ENTERGAME_ACK;
	m_DecodeFuncArray[GSID_ENTERGAME_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_ENTERGAME_ACK;

	m_EncodeFuncArray[GSID_LEAVEGAME_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_LEAVEGAME_REQ;
	m_DecodeFuncArray[GSID_LEAVEGAME_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_LEAVEGAME_REQ;

	m_EncodeFuncArray[GSID_LEAVEGAME_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_LEAVEGAME_ACK;
	m_DecodeFuncArray[GSID_LEAVEGAME_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_LEAVEGAME_ACK;

	m_EncodeFuncArray[GSID_KICKOUT_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_KICKOUT_NTF;
	m_DecodeFuncArray[GSID_KICKOUT_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_KICKOUT_NTF;

	m_EncodeFuncArray[GSID_MSG_BROADCAST - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_MSG_BROADCAST;
	m_DecodeFuncArray[GSID_MSG_BROADCAST - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_MSG_BROADCAST;

	m_EncodeFuncArray[GSID_LOAD_GSDATA_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_LOAD_GSDATA_NTF;
	m_DecodeFuncArray[GSID_LOAD_GSDATA_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_LOAD_GSDATA_NTF;

	m_EncodeFuncArray[GSID_UPDATEGMLEVEL_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_UPDATEGMLEVEL_NTF;
	m_DecodeFuncArray[GSID_UPDATEGMLEVEL_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_UPDATEGMLEVEL_NTF;

	m_EncodeFuncArray[GSID_SWITCHSCENE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_SWITCHSCENE_REQ;
	m_DecodeFuncArray[GSID_SWITCHSCENE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_SWITCHSCENE_REQ;

	m_EncodeFuncArray[GSID_SWITCHSCENE_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeGSPKG_SWITCHSCENE_ACK;
	m_DecodeFuncArray[GSID_SWITCHSCENE_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeGSPKG_SWITCHSCENE_ACK;

	m_EncodeFuncArray[SCID_SELF_LOADSCENE - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_LOADSCENE;
	m_DecodeFuncArray[SCID_SELF_LOADSCENE - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_LOADSCENE;

	m_EncodeFuncArray[CSID_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ENTERSCENE;
	m_DecodeFuncArray[CSID_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ENTERSCENE;

	m_EncodeFuncArray[SCID_SELF_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_ENTERSCENE;
	m_DecodeFuncArray[SCID_SELF_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_ENTERSCENE;

	m_EncodeFuncArray[SCID_SELF_DATA_END - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_DATA_END;
	m_DecodeFuncArray[SCID_SELF_DATA_END - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_DATA_END;

	m_EncodeFuncArray[SCID_SELF_APPEAR - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_APPEAR;
	m_DecodeFuncArray[SCID_SELF_APPEAR - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_APPEAR;

	m_EncodeFuncArray[SCID_SELF_BASE_PRO - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_BASE_PRO;
	m_DecodeFuncArray[SCID_SELF_BASE_PRO - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_BASE_PRO;

	m_EncodeFuncArray[CSID_LEVEL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_LEVEL_REQ;
	m_DecodeFuncArray[CSID_LEVEL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_LEVEL_REQ;

	m_EncodeFuncArray[SCID_LEVEL_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_LEVEL_ACK;
	m_DecodeFuncArray[SCID_LEVEL_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_LEVEL_ACK;

	m_EncodeFuncArray[CSID_LEVEL_RESULT_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeCS_LEVEL_RESULT_NTF;
	m_DecodeFuncArray[CSID_LEVEL_RESULT_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeCS_LEVEL_RESULT_NTF;

	m_EncodeFuncArray[SCID_TREASURE_CHEST_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_TREASURE_CHEST_NTF;
	m_DecodeFuncArray[SCID_TREASURE_CHEST_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_TREASURE_CHEST_NTF;

	m_EncodeFuncArray[CSID_OPEN_TREASURE_CHEST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_OPEN_TREASURE_CHEST_REQ;
	m_DecodeFuncArray[CSID_OPEN_TREASURE_CHEST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_OPEN_TREASURE_CHEST_REQ;

	m_EncodeFuncArray[SCID_OPEN_TREASURE_CHEST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_OPEN_TREASURE_CHEST_ACK;
	m_DecodeFuncArray[SCID_OPEN_TREASURE_CHEST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_OPEN_TREASURE_CHEST_ACK;

	m_EncodeFuncArray[SCID_LEVEL_INFO - CLIPROTO_MSGID_OFFSET] = &EncodeSC_LEVEL_INFO;
	m_DecodeFuncArray[SCID_LEVEL_INFO - CLIPROTO_MSGID_OFFSET] = &DecodeSC_LEVEL_INFO;

	m_EncodeFuncArray[CSID_GET_BATTLE_BOX_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_BATTLE_BOX_REQ;
	m_DecodeFuncArray[CSID_GET_BATTLE_BOX_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_BATTLE_BOX_REQ;

	m_EncodeFuncArray[SCID_GET_BATTLE_BOX_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_BATTLE_BOX_ACK;
	m_DecodeFuncArray[SCID_GET_BATTLE_BOX_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_BATTLE_BOX_ACK;

	m_EncodeFuncArray[SCID_BATTLE_GOT_STAR_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_BATTLE_GOT_STAR_NTF;
	m_DecodeFuncArray[SCID_BATTLE_GOT_STAR_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_BATTLE_GOT_STAR_NTF;

	m_EncodeFuncArray[SCID_SELF_VOLATILE_PRO - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_VOLATILE_PRO;
	m_DecodeFuncArray[SCID_SELF_VOLATILE_PRO - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_VOLATILE_PRO;

	m_EncodeFuncArray[SCID_CLIENT_CONFIG_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_CLIENT_CONFIG_NTF;
	m_DecodeFuncArray[SCID_CLIENT_CONFIG_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_CLIENT_CONFIG_NTF;

	m_EncodeFuncArray[CSID_CLIENT_CONFIG_UPDATE - CLIPROTO_MSGID_OFFSET] = &EncodeCS_CLIENT_CONFIG_UPDATE;
	m_DecodeFuncArray[CSID_CLIENT_CONFIG_UPDATE - CLIPROTO_MSGID_OFFSET] = &DecodeCS_CLIENT_CONFIG_UPDATE;

	m_EncodeFuncArray[SCID_ERROR_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ERROR_NTF;
	m_DecodeFuncArray[SCID_ERROR_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ERROR_NTF;

	m_EncodeFuncArray[SCID_SELF_ITEM_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_ITEM_NTF;
	m_DecodeFuncArray[SCID_SELF_ITEM_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_ITEM_NTF;

	m_EncodeFuncArray[CSID_MOVE_ITEM_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_MOVE_ITEM_REQ;
	m_DecodeFuncArray[CSID_MOVE_ITEM_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_MOVE_ITEM_REQ;

	m_EncodeFuncArray[SCID_MOVE_ITEM_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_MOVE_ITEM_ACK;
	m_DecodeFuncArray[SCID_MOVE_ITEM_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_MOVE_ITEM_ACK;

	m_EncodeFuncArray[SCID_ROLE_BAG_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_BAG_NTF;
	m_DecodeFuncArray[SCID_ROLE_BAG_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_BAG_NTF;

	m_EncodeFuncArray[SCID_ROLE_EQUIP_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_EQUIP_NTF;
	m_DecodeFuncArray[SCID_ROLE_EQUIP_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_EQUIP_NTF;

	m_EncodeFuncArray[CSID_ROLE_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_EQUIP_REQ;
	m_DecodeFuncArray[CSID_ROLE_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_EQUIP_REQ;

	m_EncodeFuncArray[CSID_ROLE_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_EVENT_REQ;
	m_DecodeFuncArray[CSID_ROLE_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_EVENT_REQ;

	m_EncodeFuncArray[SCID_ROLE_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_BAG_SINGLE_LEAVE_NTF;
	m_DecodeFuncArray[SCID_ROLE_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_BAG_SINGLE_LEAVE_NTF;

	m_EncodeFuncArray[SCID_ROLE_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_BAG_SINGLE_ENTER_NTF;
	m_DecodeFuncArray[SCID_ROLE_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_BAG_SINGLE_ENTER_NTF;

	m_EncodeFuncArray[SCID_ROLE_EQUIP_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_EQUIP_SINGLE_LEAVE_NTF;
	m_DecodeFuncArray[SCID_ROLE_EQUIP_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_EQUIP_SINGLE_LEAVE_NTF;

	m_EncodeFuncArray[SCID_ROLE_EQUIP_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_EQUIP_SINGLE_ENTER_NTF;
	m_DecodeFuncArray[SCID_ROLE_EQUIP_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_EQUIP_SINGLE_ENTER_NTF;

	m_EncodeFuncArray[CSID_ROLE_ITEMUP_RPT - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_ITEMUP_RPT;
	m_DecodeFuncArray[CSID_ROLE_ITEMUP_RPT - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_ITEMUP_RPT;

	m_EncodeFuncArray[SCID_ROLE_ITEMUP_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_ITEMUP_NTF;
	m_DecodeFuncArray[SCID_ROLE_ITEMUP_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_ITEMUP_NTF;

	m_EncodeFuncArray[SCID_ROLE_ITEMUP_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_ITEMUP_ACK;
	m_DecodeFuncArray[SCID_ROLE_ITEMUP_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_ITEMUP_ACK;

	m_EncodeFuncArray[SCID_ROLE_SUIT_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_SUIT_NTF;
	m_DecodeFuncArray[SCID_ROLE_SUIT_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_SUIT_NTF;

	m_EncodeFuncArray[CSID_ROLE_HOLE_ON_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_HOLE_ON_REQ;
	m_DecodeFuncArray[CSID_ROLE_HOLE_ON_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_HOLE_ON_REQ;

	m_EncodeFuncArray[SCID_ROLE_HOLE_ON_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_HOLE_ON_ACK;
	m_DecodeFuncArray[SCID_ROLE_HOLE_ON_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_HOLE_ON_ACK;

	m_EncodeFuncArray[CSID_ROLE_HOLE_OFF_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_HOLE_OFF_REQ;
	m_DecodeFuncArray[CSID_ROLE_HOLE_OFF_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_HOLE_OFF_REQ;

	m_EncodeFuncArray[SCID_ROLE_HOLE_OFF_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_HOLE_OFF_ACK;
	m_DecodeFuncArray[SCID_ROLE_HOLE_OFF_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_HOLE_OFF_ACK;

	m_EncodeFuncArray[CSID_ROLE_HOLE_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_HOLE_REFRESH_REQ;
	m_DecodeFuncArray[CSID_ROLE_HOLE_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_HOLE_REFRESH_REQ;

	m_EncodeFuncArray[SCID_ROLE_HOLE_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_HOLE_REFRESH_ACK;
	m_DecodeFuncArray[SCID_ROLE_HOLE_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_HOLE_REFRESH_ACK;

	m_EncodeFuncArray[CSID_ROLE_HOLE_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_HOLE_MERGE_REQ;
	m_DecodeFuncArray[CSID_ROLE_HOLE_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_HOLE_MERGE_REQ;

	m_EncodeFuncArray[SCID_ROLE_HOLE_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_HOLE_MERGE_ACK;
	m_DecodeFuncArray[SCID_ROLE_HOLE_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_HOLE_MERGE_ACK;

	m_EncodeFuncArray[CSID_ROLE_HOLE_MERGE2_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_HOLE_MERGE2_REQ;
	m_DecodeFuncArray[CSID_ROLE_HOLE_MERGE2_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_HOLE_MERGE2_REQ;

	m_EncodeFuncArray[SCID_ROLE_HOLE_MERGE2_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_HOLE_MERGE2_ACK;
	m_DecodeFuncArray[SCID_ROLE_HOLE_MERGE2_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_HOLE_MERGE2_ACK;

	m_EncodeFuncArray[CSID_LOCK_RPT - CLIPROTO_MSGID_OFFSET] = &EncodeCS_LOCK_RPT;
	m_DecodeFuncArray[CSID_LOCK_RPT - CLIPROTO_MSGID_OFFSET] = &DecodeCS_LOCK_RPT;

	m_EncodeFuncArray[CSID_ROLE_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_USEITEM_REQ;
	m_DecodeFuncArray[CSID_ROLE_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_USEITEM_REQ;

	m_EncodeFuncArray[CSID_PET_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PET_USEITEM_REQ;
	m_DecodeFuncArray[CSID_PET_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PET_USEITEM_REQ;

	m_EncodeFuncArray[SCID_PET_USEITEM_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_USEITEM_ACK;
	m_DecodeFuncArray[SCID_PET_USEITEM_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_USEITEM_ACK;

	m_EncodeFuncArray[SCID_ROLE_LIMIT_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_LIMIT_NTF;
	m_DecodeFuncArray[SCID_ROLE_LIMIT_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_LIMIT_NTF;

	m_EncodeFuncArray[CSID_GATHER_ITEM_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GATHER_ITEM_MERGE_REQ;
	m_DecodeFuncArray[CSID_GATHER_ITEM_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GATHER_ITEM_MERGE_REQ;

	m_EncodeFuncArray[SCID_GATHER_ITEM_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GATHER_ITEM_MERGE_ACK;
	m_DecodeFuncArray[SCID_GATHER_ITEM_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GATHER_ITEM_MERGE_ACK;

	m_EncodeFuncArray[SCID_GATHER_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GATHER_INFO_NTF;
	m_DecodeFuncArray[SCID_GATHER_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GATHER_INFO_NTF;

	m_EncodeFuncArray[SCID_GATHER_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GATHER_SINGLE_ENTER_NTF;
	m_DecodeFuncArray[SCID_GATHER_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GATHER_SINGLE_ENTER_NTF;

	m_EncodeFuncArray[SCID_GATHER_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GATHER_SINGLE_LEAVE_NTF;
	m_DecodeFuncArray[SCID_GATHER_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GATHER_SINGLE_LEAVE_NTF;

	m_EncodeFuncArray[CSID_ROLE_PROD_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_PROD_REQ;
	m_DecodeFuncArray[CSID_ROLE_PROD_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_PROD_REQ;

	m_EncodeFuncArray[SCID_ROLE_PROD_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_PROD_ACK;
	m_DecodeFuncArray[SCID_ROLE_PROD_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_PROD_ACK;

	m_EncodeFuncArray[SCID_ROLE_USEITEM_START_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_USEITEM_START_ACK;
	m_DecodeFuncArray[SCID_ROLE_USEITEM_START_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_USEITEM_START_ACK;

	m_EncodeFuncArray[SCID_ROLE_USEITEM_END_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_USEITEM_END_ACK;
	m_DecodeFuncArray[SCID_ROLE_USEITEM_END_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_USEITEM_END_ACK;

	m_EncodeFuncArray[SCID_USER_SKILLS_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_USER_SKILLS_NTF;
	m_DecodeFuncArray[SCID_USER_SKILLS_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_USER_SKILLS_NTF;

	m_EncodeFuncArray[CSID_LEARN_SKILL - CLIPROTO_MSGID_OFFSET] = &EncodeCS_LEARN_SKILL;
	m_DecodeFuncArray[CSID_LEARN_SKILL - CLIPROTO_MSGID_OFFSET] = &DecodeCS_LEARN_SKILL;

	m_EncodeFuncArray[SCID_SKILL_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SKILL_INFO_NTF;
	m_DecodeFuncArray[SCID_SKILL_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SKILL_INFO_NTF;

	m_EncodeFuncArray[SCID_REMOVE_SKILL_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_REMOVE_SKILL_NTF;
	m_DecodeFuncArray[SCID_REMOVE_SKILL_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_REMOVE_SKILL_NTF;

	m_EncodeFuncArray[SCID_SKILL_POINT_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SKILL_POINT_NTF;
	m_DecodeFuncArray[SCID_SKILL_POINT_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SKILL_POINT_NTF;

	m_EncodeFuncArray[CSID_SKILL_RESET_ALL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SKILL_RESET_ALL_REQ;
	m_DecodeFuncArray[CSID_SKILL_RESET_ALL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SKILL_RESET_ALL_REQ;

	m_EncodeFuncArray[SCID_USER_PETS_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_USER_PETS_NTF;
	m_DecodeFuncArray[SCID_USER_PETS_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_USER_PETS_NTF;

	m_EncodeFuncArray[SCID_PET_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_INFO_NTF;
	m_DecodeFuncArray[SCID_PET_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_INFO_NTF;

	m_EncodeFuncArray[CSID_SET_BATTLE_PET_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SET_BATTLE_PET_REQ;
	m_DecodeFuncArray[CSID_SET_BATTLE_PET_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SET_BATTLE_PET_REQ;

	m_EncodeFuncArray[SCID_SET_BATTLE_PET_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SET_BATTLE_PET_NTF;
	m_DecodeFuncArray[SCID_SET_BATTLE_PET_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SET_BATTLE_PET_NTF;

	m_EncodeFuncArray[CSID_PET_GET_EXP_RPT - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PET_GET_EXP_RPT;
	m_DecodeFuncArray[CSID_PET_GET_EXP_RPT - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PET_GET_EXP_RPT;

	m_EncodeFuncArray[SCID_PET_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_LEVEL_NTF;
	m_DecodeFuncArray[SCID_PET_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_LEVEL_NTF;

	m_EncodeFuncArray[CSID_PET_UP_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PET_UP_REQ;
	m_DecodeFuncArray[CSID_PET_UP_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PET_UP_REQ;

	m_EncodeFuncArray[SCID_PET_UP_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_UP_ACK;
	m_DecodeFuncArray[SCID_PET_UP_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_UP_ACK;

	m_EncodeFuncArray[CSID_PET_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PET_MERGE_REQ;
	m_DecodeFuncArray[CSID_PET_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PET_MERGE_REQ;

	m_EncodeFuncArray[SCID_PET_ADD_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_ADD_NTF;
	m_DecodeFuncArray[SCID_PET_ADD_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_ADD_NTF;

	m_EncodeFuncArray[SCID_PETS_RECORD_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PETS_RECORD_NTF;
	m_DecodeFuncArray[SCID_PETS_RECORD_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PETS_RECORD_NTF;

	m_EncodeFuncArray[SCID_PET_BAG_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_BAG_NTF;
	m_DecodeFuncArray[SCID_PET_BAG_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_BAG_NTF;

	m_EncodeFuncArray[CSID_PET_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PET_EQUIP_REQ;
	m_DecodeFuncArray[CSID_PET_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PET_EQUIP_REQ;

	m_EncodeFuncArray[CSID_PET_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PET_EVENT_REQ;
	m_DecodeFuncArray[CSID_PET_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PET_EVENT_REQ;

	m_EncodeFuncArray[SCID_PET_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_BAG_SINGLE_LEAVE_NTF;
	m_DecodeFuncArray[SCID_PET_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_BAG_SINGLE_LEAVE_NTF;

	m_EncodeFuncArray[SCID_PET_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_BAG_SINGLE_ENTER_NTF;
	m_DecodeFuncArray[SCID_PET_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_BAG_SINGLE_ENTER_NTF;

	m_EncodeFuncArray[CSID_PET_TEAM_RPT - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PET_TEAM_RPT;
	m_DecodeFuncArray[CSID_PET_TEAM_RPT - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PET_TEAM_RPT;

	m_EncodeFuncArray[SCID_PET_TEAM_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_TEAM_NTF;
	m_DecodeFuncArray[SCID_PET_TEAM_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_TEAM_NTF;

	m_EncodeFuncArray[SCID_PET_GET_EXP_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_GET_EXP_ACK;
	m_DecodeFuncArray[SCID_PET_GET_EXP_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_GET_EXP_ACK;

	m_EncodeFuncArray[SCID_PET_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_SINGLE_ENTER_NTF;
	m_DecodeFuncArray[SCID_PET_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_SINGLE_ENTER_NTF;

	m_EncodeFuncArray[SCID_PET_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_SINGLE_LEAVE_NTF;
	m_DecodeFuncArray[SCID_PET_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_SINGLE_LEAVE_NTF;

	m_EncodeFuncArray[SCID_PET_EVENT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PET_EVENT_ACK;
	m_DecodeFuncArray[SCID_PET_EVENT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PET_EVENT_ACK;

	m_EncodeFuncArray[CSID_MOVE_SYNC_MODE - CLIPROTO_MSGID_OFFSET] = &EncodeCS_MOVE_SYNC_MODE;
	m_DecodeFuncArray[CSID_MOVE_SYNC_MODE - CLIPROTO_MSGID_OFFSET] = &DecodeCS_MOVE_SYNC_MODE;

	m_EncodeFuncArray[CSID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = &EncodeCS_MOVE_BEGIN;
	m_DecodeFuncArray[CSID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = &DecodeCS_MOVE_BEGIN;

	m_EncodeFuncArray[CSID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = &EncodeCS_MOVE_STOP;
	m_DecodeFuncArray[CSID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = &DecodeCS_MOVE_STOP;

	m_EncodeFuncArray[SCID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = &EncodeSC_MOVE_BEGIN;
	m_DecodeFuncArray[SCID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = &DecodeSC_MOVE_BEGIN;

	m_EncodeFuncArray[SCID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = &EncodeSC_MOVE_STOP;
	m_DecodeFuncArray[SCID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = &DecodeSC_MOVE_STOP;

	m_EncodeFuncArray[SCID_OTHER_APPEAR - CLIPROTO_MSGID_OFFSET] = &EncodeSC_OTHER_APPEAR;
	m_DecodeFuncArray[SCID_OTHER_APPEAR - CLIPROTO_MSGID_OFFSET] = &DecodeSC_OTHER_APPEAR;

	m_EncodeFuncArray[SCID_OTHER_UPDATE - CLIPROTO_MSGID_OFFSET] = &EncodeSC_OTHER_UPDATE;
	m_DecodeFuncArray[SCID_OTHER_UPDATE - CLIPROTO_MSGID_OFFSET] = &DecodeSC_OTHER_UPDATE;

	m_EncodeFuncArray[SCID_OTHER_DISAPPEAR - CLIPROTO_MSGID_OFFSET] = &EncodeSC_OTHER_DISAPPEAR;
	m_DecodeFuncArray[SCID_OTHER_DISAPPEAR - CLIPROTO_MSGID_OFFSET] = &DecodeSC_OTHER_DISAPPEAR;

	m_EncodeFuncArray[CSID_CHAT - CLIPROTO_MSGID_OFFSET] = &EncodeCS_CHAT;
	m_DecodeFuncArray[CSID_CHAT - CLIPROTO_MSGID_OFFSET] = &DecodeCS_CHAT;

	m_EncodeFuncArray[SCID_CHAT - CLIPROTO_MSGID_OFFSET] = &EncodeSC_CHAT;
	m_DecodeFuncArray[SCID_CHAT - CLIPROTO_MSGID_OFFSET] = &DecodeSC_CHAT;

	m_EncodeFuncArray[SCID_CHAT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_CHAT_ACK;
	m_DecodeFuncArray[SCID_CHAT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_CHAT_ACK;

	m_EncodeFuncArray[SCID_FRIENDS_LIST_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_FRIENDS_LIST_NTF;
	m_DecodeFuncArray[SCID_FRIENDS_LIST_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_FRIENDS_LIST_NTF;

	m_EncodeFuncArray[CSID_QUERY_ROLE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_QUERY_ROLE_REQ;
	m_DecodeFuncArray[CSID_QUERY_ROLE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_QUERY_ROLE_REQ;

	m_EncodeFuncArray[SCID_QUERY_ROLE_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_QUERY_ROLE_ACK;
	m_DecodeFuncArray[SCID_QUERY_ROLE_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_QUERY_ROLE_ACK;

	m_EncodeFuncArray[CSID_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ADD_FRIEND_REQ;
	m_DecodeFuncArray[CSID_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ADD_FRIEND_REQ;

	m_EncodeFuncArray[SCID_ADD_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ADD_FRIEND_ACK;
	m_DecodeFuncArray[SCID_ADD_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ADD_FRIEND_ACK;

	m_EncodeFuncArray[CSID_REMOVE_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_REMOVE_FRIEND_REQ;
	m_DecodeFuncArray[CSID_REMOVE_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_REMOVE_FRIEND_REQ;

	m_EncodeFuncArray[SCID_REMOVE_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_REMOVE_FRIEND_ACK;
	m_DecodeFuncArray[SCID_REMOVE_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_REMOVE_FRIEND_ACK;

	m_EncodeFuncArray[CSID_DONATE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_DONATE_ACTION_POINT_REQ;
	m_DecodeFuncArray[CSID_DONATE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_DONATE_ACTION_POINT_REQ;

	m_EncodeFuncArray[SCID_DONATE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_DONATE_ACTION_POINT_ACK;
	m_DecodeFuncArray[SCID_DONATE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_DONATE_ACTION_POINT_ACK;

	m_EncodeFuncArray[SCID_DONATE_ACTION_POINT_OTHER_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_DONATE_ACTION_POINT_OTHER_NTF;
	m_DecodeFuncArray[SCID_DONATE_ACTION_POINT_OTHER_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_DONATE_ACTION_POINT_OTHER_NTF;

	m_EncodeFuncArray[CSID_RECEIVE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_RECEIVE_ACTION_POINT_REQ;
	m_DecodeFuncArray[CSID_RECEIVE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_RECEIVE_ACTION_POINT_REQ;

	m_EncodeFuncArray[SCID_RECEIVE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_RECEIVE_ACTION_POINT_ACK;
	m_DecodeFuncArray[SCID_RECEIVE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_RECEIVE_ACTION_POINT_ACK;

	m_EncodeFuncArray[CSID_RESPONSE_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_RESPONSE_ADD_FRIEND_REQ;
	m_DecodeFuncArray[CSID_RESPONSE_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_RESPONSE_ADD_FRIEND_REQ;

	m_EncodeFuncArray[SCID_REQUEST_ADD_FRIEND_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_REQUEST_ADD_FRIEND_NTF;
	m_DecodeFuncArray[SCID_REQUEST_ADD_FRIEND_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_REQUEST_ADD_FRIEND_NTF;

	m_EncodeFuncArray[SCID_FRIEND_INFO_CHANGE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_FRIEND_INFO_CHANGE_NTF;
	m_DecodeFuncArray[SCID_FRIEND_INFO_CHANGE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_FRIEND_INFO_CHANGE_NTF;

	m_EncodeFuncArray[SCID_FRIEND_REMOVE_INVITE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_FRIEND_REMOVE_INVITE_NTF;
	m_DecodeFuncArray[SCID_FRIEND_REMOVE_INVITE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_FRIEND_REMOVE_INVITE_NTF;

	m_EncodeFuncArray[CSID_FRIEND_ASSIST_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_FRIEND_ASSIST_LIST_REQ;
	m_DecodeFuncArray[CSID_FRIEND_ASSIST_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_FRIEND_ASSIST_LIST_REQ;

	m_EncodeFuncArray[SCID_FRIEND_ASSIST_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_FRIEND_ASSIST_LIST_ACK;
	m_DecodeFuncArray[SCID_FRIEND_ASSIST_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_FRIEND_ASSIST_LIST_ACK;

	m_EncodeFuncArray[CSID_SELECT_FRIEND_ASSIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SELECT_FRIEND_ASSIST_REQ;
	m_DecodeFuncArray[CSID_SELECT_FRIEND_ASSIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SELECT_FRIEND_ASSIST_REQ;

	m_EncodeFuncArray[SCID_SELECT_FRIEND_ASSIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELECT_FRIEND_ASSIST_ACK;
	m_DecodeFuncArray[SCID_SELECT_FRIEND_ASSIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELECT_FRIEND_ASSIST_ACK;

	m_EncodeFuncArray[SCID_FRIEND_EPINFO_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_FRIEND_EPINFO_NTF;
	m_DecodeFuncArray[SCID_FRIEND_EPINFO_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_FRIEND_EPINFO_NTF;

	m_EncodeFuncArray[CSID_FRIENDS_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_FRIENDS_LIST_REQ;
	m_DecodeFuncArray[CSID_FRIENDS_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_FRIENDS_LIST_REQ;

	m_EncodeFuncArray[SCID_ABYSS_TRIGGER_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ABYSS_TRIGGER_ACK;
	m_DecodeFuncArray[SCID_ABYSS_TRIGGER_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ABYSS_TRIGGER_ACK;

	m_EncodeFuncArray[CSID_ABYSS_OPEN_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ABYSS_OPEN_REQ;
	m_DecodeFuncArray[CSID_ABYSS_OPEN_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ABYSS_OPEN_REQ;

	m_EncodeFuncArray[SCID_ABYSS_OPEN_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ABYSS_OPEN_ACK;
	m_DecodeFuncArray[SCID_ABYSS_OPEN_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ABYSS_OPEN_ACK;

	m_EncodeFuncArray[SCID_ABYSS_OPEN_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ABYSS_OPEN_NTF;
	m_DecodeFuncArray[SCID_ABYSS_OPEN_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ABYSS_OPEN_NTF;

	m_EncodeFuncArray[CSID_GET_ABYSS_TRIGGER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_ABYSS_TRIGGER_LIST_REQ;
	m_DecodeFuncArray[CSID_GET_ABYSS_TRIGGER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_ABYSS_TRIGGER_LIST_REQ;

	m_EncodeFuncArray[SCID_GET_ABYSS_TRIGGER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_ABYSS_TRIGGER_LIST_ACK;
	m_DecodeFuncArray[SCID_GET_ABYSS_TRIGGER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_ABYSS_TRIGGER_LIST_ACK;

	m_EncodeFuncArray[CSID_GET_ABYSS_OPEN_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_ABYSS_OPEN_LIST_REQ;
	m_DecodeFuncArray[CSID_GET_ABYSS_OPEN_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_ABYSS_OPEN_LIST_REQ;

	m_EncodeFuncArray[SCID_GET_ABYSS_OPEN_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_ABYSS_OPEN_LIST_ACK;
	m_DecodeFuncArray[SCID_GET_ABYSS_OPEN_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_ABYSS_OPEN_LIST_ACK;

	m_EncodeFuncArray[CSID_GET_ABYSS_OPEN_REC_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_ABYSS_OPEN_REC_REQ;
	m_DecodeFuncArray[CSID_GET_ABYSS_OPEN_REC_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_ABYSS_OPEN_REC_REQ;

	m_EncodeFuncArray[SCID_GET_ABYSS_OPEN_REC_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_ABYSS_OPEN_REC_ACK;
	m_DecodeFuncArray[SCID_GET_ABYSS_OPEN_REC_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_ABYSS_OPEN_REC_ACK;

	m_EncodeFuncArray[SCID_ENTER_ABYSS_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ENTER_ABYSS_ACK;
	m_DecodeFuncArray[SCID_ENTER_ABYSS_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ENTER_ABYSS_ACK;

	m_EncodeFuncArray[SCID_ABYSS_RUN_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ABYSS_RUN_NTF;
	m_DecodeFuncArray[SCID_ABYSS_RUN_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ABYSS_RUN_NTF;

	m_EncodeFuncArray[SCID_MAIL_LIST_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_MAIL_LIST_NTF;
	m_DecodeFuncArray[SCID_MAIL_LIST_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_MAIL_LIST_NTF;

	m_EncodeFuncArray[CSID_SEND_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SEND_MAIL_REQ;
	m_DecodeFuncArray[CSID_SEND_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SEND_MAIL_REQ;

	m_EncodeFuncArray[SCID_SEND_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SEND_MAIL_ACK;
	m_DecodeFuncArray[SCID_SEND_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SEND_MAIL_ACK;

	m_EncodeFuncArray[CSID_GET_ITEM_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_ITEM_FROM_MAIL_REQ;
	m_DecodeFuncArray[CSID_GET_ITEM_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_ITEM_FROM_MAIL_REQ;

	m_EncodeFuncArray[CSID_GET_MONEY_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_MONEY_FROM_MAIL_REQ;
	m_DecodeFuncArray[CSID_GET_MONEY_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_MONEY_FROM_MAIL_REQ;

	m_EncodeFuncArray[CSID_READ_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_READ_MAIL_REQ;
	m_DecodeFuncArray[CSID_READ_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_READ_MAIL_REQ;

	m_EncodeFuncArray[SCID_READ_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_READ_MAIL_ACK;
	m_DecodeFuncArray[SCID_READ_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_READ_MAIL_ACK;

	m_EncodeFuncArray[CSID_DELETE_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_DELETE_MAIL_REQ;
	m_DecodeFuncArray[CSID_DELETE_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_DELETE_MAIL_REQ;

	m_EncodeFuncArray[SCID_DELETE_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_DELETE_MAIL_ACK;
	m_DecodeFuncArray[SCID_DELETE_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_DELETE_MAIL_ACK;

	m_EncodeFuncArray[SCID_UPDATE_MAIL_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_UPDATE_MAIL_NTF;
	m_DecodeFuncArray[SCID_UPDATE_MAIL_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_UPDATE_MAIL_NTF;

	m_EncodeFuncArray[SCID_SHOP_ACTION_POINT_BOUGHT_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_ACTION_POINT_BOUGHT_NTF;
	m_DecodeFuncArray[SCID_SHOP_ACTION_POINT_BOUGHT_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_ACTION_POINT_BOUGHT_NTF;

	m_EncodeFuncArray[CSID_SHOP_BUY_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SHOP_BUY_ACTION_POINT_REQ;
	m_DecodeFuncArray[CSID_SHOP_BUY_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SHOP_BUY_ACTION_POINT_REQ;

	m_EncodeFuncArray[SCID_SHOP_BUY_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_BUY_ACTION_POINT_ACK;
	m_DecodeFuncArray[SCID_SHOP_BUY_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_BUY_ACTION_POINT_ACK;

	m_EncodeFuncArray[SCID_SHOP_BUY_PET_INFO_CHEAP_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_BUY_PET_INFO_CHEAP_NTF;
	m_DecodeFuncArray[SCID_SHOP_BUY_PET_INFO_CHEAP_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_BUY_PET_INFO_CHEAP_NTF;

	m_EncodeFuncArray[SCID_SHOP_BUY_PET_INFO_EXPENSIVE_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF;
	m_DecodeFuncArray[SCID_SHOP_BUY_PET_INFO_EXPENSIVE_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF;

	m_EncodeFuncArray[CSID_SHOP_BUY_PET_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SHOP_BUY_PET_REQ;
	m_DecodeFuncArray[CSID_SHOP_BUY_PET_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SHOP_BUY_PET_REQ;

	m_EncodeFuncArray[SCID_SHOP_BUY_PET_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_BUY_PET_ACK;
	m_DecodeFuncArray[SCID_SHOP_BUY_PET_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_BUY_PET_ACK;

	m_EncodeFuncArray[CSID_SHOP_GET_GOODSLIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SHOP_GET_GOODSLIST_REQ;
	m_DecodeFuncArray[CSID_SHOP_GET_GOODSLIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SHOP_GET_GOODSLIST_REQ;

	m_EncodeFuncArray[SCID_SHOP_GET_GOODSLIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_GET_GOODSLIST_ACK;
	m_DecodeFuncArray[SCID_SHOP_GET_GOODSLIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_GET_GOODSLIST_ACK;

	m_EncodeFuncArray[CSID_SHOP_BUY_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SHOP_BUY_GOODS_REQ;
	m_DecodeFuncArray[CSID_SHOP_BUY_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SHOP_BUY_GOODS_REQ;

	m_EncodeFuncArray[SCID_SHOP_BUY_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_BUY_GOODS_ACK;
	m_DecodeFuncArray[SCID_SHOP_BUY_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_BUY_GOODS_ACK;

	m_EncodeFuncArray[CSID_SHOP_SECRET_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SHOP_SECRET_GOODS_REQ;
	m_DecodeFuncArray[CSID_SHOP_SECRET_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SHOP_SECRET_GOODS_REQ;

	m_EncodeFuncArray[SCID_SHOP_SECRET_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_SECRET_GOODS_ACK;
	m_DecodeFuncArray[SCID_SHOP_SECRET_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_SECRET_GOODS_ACK;

	m_EncodeFuncArray[CSID_SHOP_SECRET_BUY_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SHOP_SECRET_BUY_REQ;
	m_DecodeFuncArray[CSID_SHOP_SECRET_BUY_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SHOP_SECRET_BUY_REQ;

	m_EncodeFuncArray[SCID_SHOP_SECRET_BUY_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SHOP_SECRET_BUY_ACK;
	m_DecodeFuncArray[SCID_SHOP_SECRET_BUY_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SHOP_SECRET_BUY_ACK;

	m_EncodeFuncArray[CSID_SHOP_SECRET_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SHOP_SECRET_REFRESH_REQ;
	m_DecodeFuncArray[CSID_SHOP_SECRET_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SHOP_SECRET_REFRESH_REQ;

	m_EncodeFuncArray[CSID_SELF_PVP_PRO_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_SELF_PVP_PRO_REQ;
	m_DecodeFuncArray[CSID_SELF_PVP_PRO_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_SELF_PVP_PRO_REQ;

	m_EncodeFuncArray[SCID_SELF_PVP_PRO_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_SELF_PVP_PRO_ACK;
	m_DecodeFuncArray[SCID_SELF_PVP_PRO_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_SELF_PVP_PRO_ACK;

	m_EncodeFuncArray[CSID_GET_PVP_MATCH_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_PVP_MATCH_REQ;
	m_DecodeFuncArray[CSID_GET_PVP_MATCH_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_PVP_MATCH_REQ;

	m_EncodeFuncArray[SCID_GET_PVP_MATCH_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_PVP_MATCH_ACK;
	m_DecodeFuncArray[SCID_GET_PVP_MATCH_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_PVP_MATCH_ACK;

	m_EncodeFuncArray[CSID_ENTER_PVP_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ENTER_PVP_REQ;
	m_DecodeFuncArray[CSID_ENTER_PVP_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ENTER_PVP_REQ;

	m_EncodeFuncArray[SCID_ENTER_PVP_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ENTER_PVP_ACK;
	m_DecodeFuncArray[SCID_ENTER_PVP_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ENTER_PVP_ACK;

	m_EncodeFuncArray[CSID_PVP_RETULT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PVP_RETULT_REQ;
	m_DecodeFuncArray[CSID_PVP_RETULT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PVP_RETULT_REQ;

	m_EncodeFuncArray[SCID_PVP_RETULT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PVP_RETULT_ACK;
	m_DecodeFuncArray[SCID_PVP_RETULT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PVP_RETULT_ACK;

	m_EncodeFuncArray[CSID_GET_RANK_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_RANK_LIST_REQ;
	m_DecodeFuncArray[CSID_GET_RANK_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_RANK_LIST_REQ;

	m_EncodeFuncArray[SCID_GET_RANK_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_RANK_LIST_ACK;
	m_DecodeFuncArray[SCID_GET_RANK_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_RANK_LIST_ACK;

	m_EncodeFuncArray[CSID_GET_PVP_MILITARY_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_PVP_MILITARY_REWARD_REQ;
	m_DecodeFuncArray[CSID_GET_PVP_MILITARY_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_PVP_MILITARY_REWARD_REQ;

	m_EncodeFuncArray[SCID_GET_PVP_MILITARY_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_PVP_MILITARY_REWARD_ACK;
	m_DecodeFuncArray[SCID_GET_PVP_MILITARY_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_PVP_MILITARY_REWARD_ACK;

	m_EncodeFuncArray[CSID_GET_PVP_REPUTE_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_PVP_REPUTE_REWARD_REQ;
	m_DecodeFuncArray[CSID_GET_PVP_REPUTE_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_PVP_REPUTE_REWARD_REQ;

	m_EncodeFuncArray[SCID_GET_PVP_REPUTE_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_PVP_REPUTE_REWARD_ACK;
	m_DecodeFuncArray[SCID_GET_PVP_REPUTE_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_PVP_REPUTE_REWARD_ACK;

	m_EncodeFuncArray[CSID_PVP_BUY_CHALLENGE_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_PVP_BUY_CHALLENGE_TIMES_REQ;
	m_DecodeFuncArray[CSID_PVP_BUY_CHALLENGE_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_PVP_BUY_CHALLENGE_TIMES_REQ;

	m_EncodeFuncArray[SCID_PVP_BUY_CHALLENGE_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PVP_BUY_CHALLENGE_TIMES_ACK;
	m_DecodeFuncArray[SCID_PVP_BUY_CHALLENGE_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PVP_BUY_CHALLENGE_TIMES_ACK;

	m_EncodeFuncArray[SCID_PVP_TIME_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_PVP_TIME_NTF;
	m_DecodeFuncArray[SCID_PVP_TIME_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_PVP_TIME_NTF;

	m_EncodeFuncArray[CSID_GET_PVP_ROLE_INFO_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_PVP_ROLE_INFO_REQ;
	m_DecodeFuncArray[CSID_GET_PVP_ROLE_INFO_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_PVP_ROLE_INFO_REQ;

	m_EncodeFuncArray[SCID_GET_PVP_ROLE_INFO_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_PVP_ROLE_INFO_ACK;
	m_DecodeFuncArray[SCID_GET_PVP_ROLE_INFO_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_PVP_ROLE_INFO_ACK;

	m_EncodeFuncArray[SCID_VIP_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_VIP_INFO_NTF;
	m_DecodeFuncArray[SCID_VIP_INFO_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_VIP_INFO_NTF;

	m_EncodeFuncArray[SCID_VIP_RMBINFO_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_VIP_RMBINFO_NTF;
	m_DecodeFuncArray[SCID_VIP_RMBINFO_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_VIP_RMBINFO_NTF;

	m_EncodeFuncArray[SCID_VIP_MONTHCARD_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_VIP_MONTHCARD_NTF;
	m_DecodeFuncArray[SCID_VIP_MONTHCARD_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_VIP_MONTHCARD_NTF;

	m_EncodeFuncArray[CSID_VIP_MONTHCARD_GETITEM_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_VIP_MONTHCARD_GETITEM_REQ;
	m_DecodeFuncArray[CSID_VIP_MONTHCARD_GETITEM_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_VIP_MONTHCARD_GETITEM_REQ;

	m_EncodeFuncArray[SCID_VIP_MONTHCARD_GETITEM_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_VIP_MONTHCARD_GETITEM_ACK;
	m_DecodeFuncArray[SCID_VIP_MONTHCARD_GETITEM_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_VIP_MONTHCARD_GETITEM_ACK;

	m_EncodeFuncArray[SCID_GIFT_SIGN_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_SIGN_NTF;
	m_DecodeFuncArray[SCID_GIFT_SIGN_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_SIGN_NTF;

	m_EncodeFuncArray[SCID_GIFT_SIGN_VIP_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_SIGN_VIP_NTF;
	m_DecodeFuncArray[SCID_GIFT_SIGN_VIP_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_SIGN_VIP_NTF;

	m_EncodeFuncArray[CSID_GIFT_SIGN - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_SIGN;
	m_DecodeFuncArray[CSID_GIFT_SIGN - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_SIGN;

	m_EncodeFuncArray[CSID_GIFT_SIGN_VIP - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_SIGN_VIP;
	m_DecodeFuncArray[CSID_GIFT_SIGN_VIP - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_SIGN_VIP;

	m_EncodeFuncArray[SCID_GIFT_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_LEVEL_NTF;
	m_DecodeFuncArray[SCID_GIFT_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_LEVEL_NTF;

	m_EncodeFuncArray[CSID_GIFT_LEVEL - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_LEVEL;
	m_DecodeFuncArray[CSID_GIFT_LEVEL - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_LEVEL;

	m_EncodeFuncArray[SCID_GIFT_DAY_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_DAY_NTF;
	m_DecodeFuncArray[SCID_GIFT_DAY_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_DAY_NTF;

	m_EncodeFuncArray[SCID_GIFT_DAY_UPD - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_DAY_UPD;
	m_DecodeFuncArray[SCID_GIFT_DAY_UPD - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_DAY_UPD;

	m_EncodeFuncArray[CSID_GIFT_DAY_SCORE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_DAY_SCORE_REQ;
	m_DecodeFuncArray[CSID_GIFT_DAY_SCORE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_DAY_SCORE_REQ;

	m_EncodeFuncArray[CSID_GIFT_DAY_BOX_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_DAY_BOX_REQ;
	m_DecodeFuncArray[CSID_GIFT_DAY_BOX_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_DAY_BOX_REQ;

	m_EncodeFuncArray[SCID_GIFT_DAY_BOX_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_DAY_BOX_NTF;
	m_DecodeFuncArray[SCID_GIFT_DAY_BOX_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_DAY_BOX_NTF;

	m_EncodeFuncArray[CSID_GIFT_JIHUOMA_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_JIHUOMA_REQ;
	m_DecodeFuncArray[CSID_GIFT_JIHUOMA_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_JIHUOMA_REQ;

	m_EncodeFuncArray[SCID_GIFT_JIHUOMA_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_JIHUOMA_ACK;
	m_DecodeFuncArray[SCID_GIFT_JIHUOMA_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_JIHUOMA_ACK;

	m_EncodeFuncArray[CSID_GIFT_EP_INFO_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_EP_INFO_REQ;
	m_DecodeFuncArray[CSID_GIFT_EP_INFO_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_EP_INFO_REQ;

	m_EncodeFuncArray[SCID_GIFT_EP_INFO_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_EP_INFO_ACK;
	m_DecodeFuncArray[SCID_GIFT_EP_INFO_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_EP_INFO_ACK;

	m_EncodeFuncArray[CSID_GIFT_RECEIVE_EP_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GIFT_RECEIVE_EP_REQ;
	m_DecodeFuncArray[CSID_GIFT_RECEIVE_EP_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GIFT_RECEIVE_EP_REQ;

	m_EncodeFuncArray[SCID_GIFT_RECEIVE_EP_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GIFT_RECEIVE_EP_ACK;
	m_DecodeFuncArray[SCID_GIFT_RECEIVE_EP_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GIFT_RECEIVE_EP_ACK;

	m_EncodeFuncArray[CSID_WB_INFO_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_WB_INFO_REFRESH_REQ;
	m_DecodeFuncArray[CSID_WB_INFO_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_WB_INFO_REFRESH_REQ;

	m_EncodeFuncArray[SCID_WB_INFO_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_WB_INFO_REFRESH_ACK;
	m_DecodeFuncArray[SCID_WB_INFO_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_WB_INFO_REFRESH_ACK;

	m_EncodeFuncArray[CSID_WB_ADD_BUF_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_WB_ADD_BUF_REQ;
	m_DecodeFuncArray[CSID_WB_ADD_BUF_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_WB_ADD_BUF_REQ;

	m_EncodeFuncArray[SCID_WB_ADD_BUF_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_WB_ADD_BUF_ACK;
	m_DecodeFuncArray[SCID_WB_ADD_BUF_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_WB_ADD_BUF_ACK;

	m_EncodeFuncArray[CSID_WB_RELIVE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_WB_RELIVE_REQ;
	m_DecodeFuncArray[CSID_WB_RELIVE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_WB_RELIVE_REQ;

	m_EncodeFuncArray[SCID_WB_RELIVE_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_WB_RELIVE_ACK;
	m_DecodeFuncArray[SCID_WB_RELIVE_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_WB_RELIVE_ACK;

	m_EncodeFuncArray[SCID_WB_KILLED_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_WB_KILLED_NTF;
	m_DecodeFuncArray[SCID_WB_KILLED_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_WB_KILLED_NTF;

	m_EncodeFuncArray[SCID_WB_RUN_NTF - CLIPROTO_MSGID_OFFSET] = &EncodeSC_WB_RUN_NTF;
	m_DecodeFuncArray[SCID_WB_RUN_NTF - CLIPROTO_MSGID_OFFSET] = &DecodeSC_WB_RUN_NTF;

	m_EncodeFuncArray[CSID_WB_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_WB_ENTER_REQ;
	m_DecodeFuncArray[CSID_WB_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_WB_ENTER_REQ;

	m_EncodeFuncArray[SCID_WB_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_WB_ENTER_ACK;
	m_DecodeFuncArray[SCID_WB_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_WB_ENTER_ACK;

	m_EncodeFuncArray[CSID_WB_RESULT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_WB_RESULT_REQ;
	m_DecodeFuncArray[CSID_WB_RESULT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_WB_RESULT_REQ;

	m_EncodeFuncArray[SCID_WB_RESULT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_WB_RESULT_ACK;
	m_DecodeFuncArray[SCID_WB_RESULT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_WB_RESULT_ACK;

	m_EncodeFuncArray[CSID_ROLE_RANK_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_ROLE_RANK_REQ;
	m_DecodeFuncArray[CSID_ROLE_RANK_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_ROLE_RANK_REQ;

	m_EncodeFuncArray[SCID_ROLE_RANK_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_ROLE_RANK_ACK;
	m_DecodeFuncArray[SCID_ROLE_RANK_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_ROLE_RANK_ACK;

	m_EncodeFuncArray[CSID_GET_PT_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_PT_BASEINFO_REQ;
	m_DecodeFuncArray[CSID_GET_PT_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_PT_BASEINFO_REQ;

	m_EncodeFuncArray[SCID_GET_PT_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_PT_BASEINFO_ACK;
	m_DecodeFuncArray[SCID_GET_PT_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_PT_BASEINFO_ACK;

	m_EncodeFuncArray[CSID_BUY_PT_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_BUY_PT_TIMES_REQ;
	m_DecodeFuncArray[CSID_BUY_PT_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_BUY_PT_TIMES_REQ;

	m_EncodeFuncArray[SCID_BUY_PT_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_BUY_PT_TIMES_ACK;
	m_DecodeFuncArray[SCID_BUY_PT_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_BUY_PT_TIMES_ACK;

	m_EncodeFuncArray[CSID_GET_MD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_MD_BASEINFO_REQ;
	m_DecodeFuncArray[CSID_GET_MD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_MD_BASEINFO_REQ;

	m_EncodeFuncArray[SCID_GET_MD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_MD_BASEINFO_ACK;
	m_DecodeFuncArray[SCID_GET_MD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_MD_BASEINFO_ACK;

	m_EncodeFuncArray[CSID_BUY_MD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_BUY_MD_TIMES_REQ;
	m_DecodeFuncArray[CSID_BUY_MD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_BUY_MD_TIMES_REQ;

	m_EncodeFuncArray[SCID_BUY_MD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_BUY_MD_TIMES_ACK;
	m_DecodeFuncArray[SCID_BUY_MD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_BUY_MD_TIMES_ACK;

	m_EncodeFuncArray[CSID_GET_FD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GET_FD_BASEINFO_REQ;
	m_DecodeFuncArray[CSID_GET_FD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GET_FD_BASEINFO_REQ;

	m_EncodeFuncArray[SCID_GET_FD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GET_FD_BASEINFO_ACK;
	m_DecodeFuncArray[SCID_GET_FD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GET_FD_BASEINFO_ACK;

	m_EncodeFuncArray[CSID_BUY_FD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_BUY_FD_TIMES_REQ;
	m_DecodeFuncArray[CSID_BUY_FD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_BUY_FD_TIMES_REQ;

	m_EncodeFuncArray[SCID_BUY_FD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_BUY_FD_TIMES_ACK;
	m_DecodeFuncArray[SCID_BUY_FD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_BUY_FD_TIMES_ACK;

	m_EncodeFuncArray[CSID_GUILD_INFO_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_INFO_REQ;
	m_DecodeFuncArray[CSID_GUILD_INFO_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_INFO_REQ;

	m_EncodeFuncArray[CSID_GUILD_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_LIST_REQ;
	m_DecodeFuncArray[CSID_GUILD_LIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_LIST_REQ;

	m_EncodeFuncArray[SCID_GUILD_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_LIST_ACK;
	m_DecodeFuncArray[SCID_GUILD_LIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_LIST_ACK;

	m_EncodeFuncArray[CSID_GUILD_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_ENTER_REQ;
	m_DecodeFuncArray[CSID_GUILD_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_ENTER_REQ;

	m_EncodeFuncArray[SCID_GUILD_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_ENTER_ACK;
	m_DecodeFuncArray[SCID_GUILD_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_ENTER_ACK;

	m_EncodeFuncArray[CSID_GUILD_CREATE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_CREATE_REQ;
	m_DecodeFuncArray[CSID_GUILD_CREATE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_CREATE_REQ;

	m_EncodeFuncArray[SCID_GUILD_CREATE_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_CREATE_ACK;
	m_DecodeFuncArray[SCID_GUILD_CREATE_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_CREATE_ACK;

	m_EncodeFuncArray[CSID_GUILD_LEAVE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_LEAVE_REQ;
	m_DecodeFuncArray[CSID_GUILD_LEAVE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_LEAVE_REQ;

	m_EncodeFuncArray[SCID_GUILD_LEAVE_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_LEAVE_ACK;
	m_DecodeFuncArray[SCID_GUILD_LEAVE_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_LEAVE_ACK;

	m_EncodeFuncArray[SCID_GUILD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_BASEINFO_ACK;
	m_DecodeFuncArray[SCID_GUILD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_BASEINFO_ACK;

	m_EncodeFuncArray[CSID_GUILD_LOG_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_LOG_REQ;
	m_DecodeFuncArray[CSID_GUILD_LOG_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_LOG_REQ;

	m_EncodeFuncArray[SCID_GUILD_LOG_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_LOG_ACK;
	m_DecodeFuncArray[SCID_GUILD_LOG_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_LOG_ACK;

	m_EncodeFuncArray[CSID_GUILD_CHANGE_NOTICE_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_CHANGE_NOTICE_REQ;
	m_DecodeFuncArray[CSID_GUILD_CHANGE_NOTICE_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_CHANGE_NOTICE_REQ;

	m_EncodeFuncArray[CSID_GUILD_DETAIL_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_DETAIL_REQ;
	m_DecodeFuncArray[CSID_GUILD_DETAIL_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_DETAIL_REQ;

	m_EncodeFuncArray[SCID_GUILD_DETAIL_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_DETAIL_ACK;
	m_DecodeFuncArray[SCID_GUILD_DETAIL_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_DETAIL_ACK;

	m_EncodeFuncArray[CSID_GUILD_ENTERLIST_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_ENTERLIST_REQ;
	m_DecodeFuncArray[CSID_GUILD_ENTERLIST_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_ENTERLIST_REQ;

	m_EncodeFuncArray[SCID_GUILD_ENTERLIST_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_ENTERLIST_ACK;
	m_DecodeFuncArray[SCID_GUILD_ENTERLIST_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_ENTERLIST_ACK;

	m_EncodeFuncArray[CSID_GUILD_ENTER_ACCEPT_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_ENTER_ACCEPT_REQ;
	m_DecodeFuncArray[CSID_GUILD_ENTER_ACCEPT_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_ENTER_ACCEPT_REQ;

	m_EncodeFuncArray[SCID_GUILD_ENTER_ACCEPT_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_ENTER_ACCEPT_ACK;
	m_DecodeFuncArray[SCID_GUILD_ENTER_ACCEPT_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_ENTER_ACCEPT_ACK;

	m_EncodeFuncArray[CSID_GUILD_ENTER_CLEAR_REQ - CLIPROTO_MSGID_OFFSET] = &EncodeCS_GUILD_ENTER_CLEAR_REQ;
	m_DecodeFuncArray[CSID_GUILD_ENTER_CLEAR_REQ - CLIPROTO_MSGID_OFFSET] = &DecodeCS_GUILD_ENTER_CLEAR_REQ;

	m_EncodeFuncArray[SCID_GUILD_ENTER_CLEAR_ACK - CLIPROTO_MSGID_OFFSET] = &EncodeSC_GUILD_ENTER_CLEAR_ACK;
	m_DecodeFuncArray[SCID_GUILD_ENTER_CLEAR_ACK - CLIPROTO_MSGID_OFFSET] = &DecodeSC_GUILD_ENTER_CLEAR_ACK;

	m_iPkgSizeArray[CGID_LOGIN - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_LOGIN);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_LOGIN - CLIPROTO_MSGID_OFFSET] = "CG_LOGIN";
#endif
	m_iPkgSizeArray[GCID_LOGIN - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_LOGIN);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_LOGIN - CLIPROTO_MSGID_OFFSET] = "GC_LOGIN";
#endif
	m_iPkgSizeArray[CGID_LOGOUT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_LOGOUT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_LOGOUT - CLIPROTO_MSGID_OFFSET] = "CG_LOGOUT";
#endif
	m_iPkgSizeArray[GCID_LOGOUT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_LOGOUT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_LOGOUT - CLIPROTO_MSGID_OFFSET] = "GC_LOGOUT";
#endif
	m_iPkgSizeArray[GCID_ROLELIST - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_ROLELIST);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_ROLELIST - CLIPROTO_MSGID_OFFSET] = "GC_ROLELIST";
#endif
	m_iPkgSizeArray[CGID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_CREATEROLE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = "CG_CREATEROLE";
#endif
	m_iPkgSizeArray[GCID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_CREATEROLE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_CREATEROLE - CLIPROTO_MSGID_OFFSET] = "GC_CREATEROLE";
#endif
	m_iPkgSizeArray[CGID_DELROLE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_DELROLE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_DELROLE - CLIPROTO_MSGID_OFFSET] = "CG_DELROLE";
#endif
	m_iPkgSizeArray[GCID_DELROLE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_DELROLE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_DELROLE - CLIPROTO_MSGID_OFFSET] = "GC_DELROLE";
#endif
	m_iPkgSizeArray[CGID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_SELECTROLE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = "CG_SELECTROLE";
#endif
	m_iPkgSizeArray[GCID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_SELECTROLE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_SELECTROLE - CLIPROTO_MSGID_OFFSET] = "GC_SELECTROLE";
#endif
	m_iPkgSizeArray[GCID_QUEUE_INFO - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_QUEUE_INFO);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_QUEUE_INFO - CLIPROTO_MSGID_OFFSET] = "GC_QUEUE_INFO";
#endif
	m_iPkgSizeArray[GCID_GPK_DYN_CODE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_GPK_CLT_DYN_CODE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_GPK_DYN_CODE - CLIPROTO_MSGID_OFFSET] = "GC_GPK_CLT_DYN_CODE";
#endif
	m_iPkgSizeArray[CGID_GPK_NEGLECT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_GPK_CLT_NEGLECT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_GPK_NEGLECT - CLIPROTO_MSGID_OFFSET] = "CG_GPK_CLT_NEGLECT";
#endif
	m_iPkgSizeArray[GCID_GPK_CAL_ORIGIN - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_GPK_CAL_ORIGIN);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_GPK_CAL_ORIGIN - CLIPROTO_MSGID_OFFSET] = "GC_GPK_CAL_ORIGIN";
#endif
	m_iPkgSizeArray[CGID_GPK_CAL_RESULT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_GPK_CAL_RESULT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_GPK_CAL_RESULT - CLIPROTO_MSGID_OFFSET] = "CG_GPK_CAL_RESULT";
#endif
	m_iPkgSizeArray[GCID_ERROR - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_ERROR);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_ERROR - CLIPROTO_MSGID_OFFSET] = "GC_ERROR";
#endif
	m_iPkgSizeArray[GCID_ERRORSTRING - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_ERRORSTRING);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_ERRORSTRING - CLIPROTO_MSGID_OFFSET] = "GC_ERRORSTRING";
#endif
	m_iPkgSizeArray[CGID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CG_HEART_BEAT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CGID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = "CG_HEART_BEAT";
#endif
	m_iPkgSizeArray[GCID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_HEART_BEAT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_HEART_BEAT - CLIPROTO_MSGID_OFFSET] = "GC_HEART_BEAT";
#endif
	m_iPkgSizeArray[GCID_PUBLIC_STRING - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GC_PUBLIC_STRING);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GCID_PUBLIC_STRING - CLIPROTO_MSGID_OFFSET] = "GC_PUBLIC_STRING";
#endif
	m_iPkgSizeArray[LGID_LOGIN_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(LGPKG_LOGIN_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[LGID_LOGIN_REQ - CLIPROTO_MSGID_OFFSET] = "LGPKG_LOGIN_REQ";
#endif
	m_iPkgSizeArray[LGID_LOGIN_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(LGPKG_LOGIN_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[LGID_LOGIN_ACK - CLIPROTO_MSGID_OFFSET] = "LGPKG_LOGIN_ACK";
#endif
	m_iPkgSizeArray[LGID_GAMESERVER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(LGPKG_GAMESERVER_LIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[LGID_GAMESERVER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = "LGPKG_GAMESERVER_LIST_REQ";
#endif
	m_iPkgSizeArray[LGID_GAMESERVER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(LGPKG_GAMESERVER_LIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[LGID_GAMESERVER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = "LGPKG_GAMESERVER_LIST_ACK";
#endif
	m_iPkgSizeArray[GSID_SERVERINFO_RPT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_SERVERINFO_RPT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_SERVERINFO_RPT - CLIPROTO_MSGID_OFFSET] = "GSPKG_SERVERINFO_RPT";
#endif
	m_iPkgSizeArray[GSID_SERVER_GROUP_DESC_RPT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_SERVER_GROUP_DESC_RPT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_SERVER_GROUP_DESC_RPT - CLIPROTO_MSGID_OFFSET] = "GSPKG_SERVER_GROUP_DESC_RPT";
#endif
	m_iPkgSizeArray[GSID_ENTERGAME_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_ENTERGAME_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_ENTERGAME_REQ - CLIPROTO_MSGID_OFFSET] = "GSPKG_ENTERGAME_REQ";
#endif
	m_iPkgSizeArray[GSID_ENTERGAME_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_ENTERGAME_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_ENTERGAME_ACK - CLIPROTO_MSGID_OFFSET] = "GSPKG_ENTERGAME_ACK";
#endif
	m_iPkgSizeArray[GSID_LEAVEGAME_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_LEAVEGAME_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_LEAVEGAME_REQ - CLIPROTO_MSGID_OFFSET] = "GSPKG_LEAVEGAME_REQ";
#endif
	m_iPkgSizeArray[GSID_LEAVEGAME_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_LEAVEGAME_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_LEAVEGAME_ACK - CLIPROTO_MSGID_OFFSET] = "GSPKG_LEAVEGAME_ACK";
#endif
	m_iPkgSizeArray[GSID_KICKOUT_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_KICKOUT_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_KICKOUT_NTF - CLIPROTO_MSGID_OFFSET] = "GSPKG_KICKOUT_NTF";
#endif
	m_iPkgSizeArray[GSID_MSG_BROADCAST - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_MSG_BROADCAST);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_MSG_BROADCAST - CLIPROTO_MSGID_OFFSET] = "GSPKG_MSG_BROADCAST";
#endif
	m_iPkgSizeArray[GSID_LOAD_GSDATA_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_LOAD_GSDATA_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_LOAD_GSDATA_NTF - CLIPROTO_MSGID_OFFSET] = "GSPKG_LOAD_GSDATA_NTF";
#endif
	m_iPkgSizeArray[GSID_UPDATEGMLEVEL_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_UPDATEGMLEVEL_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_UPDATEGMLEVEL_NTF - CLIPROTO_MSGID_OFFSET] = "GSPKG_UPDATEGMLEVEL_NTF";
#endif
	m_iPkgSizeArray[GSID_SWITCHSCENE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_SWITCHSCENE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_SWITCHSCENE_REQ - CLIPROTO_MSGID_OFFSET] = "GSPKG_SWITCHSCENE_REQ";
#endif
	m_iPkgSizeArray[GSID_SWITCHSCENE_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(GSPKG_SWITCHSCENE_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[GSID_SWITCHSCENE_ACK - CLIPROTO_MSGID_OFFSET] = "GSPKG_SWITCHSCENE_ACK";
#endif
	m_iPkgSizeArray[SCID_SELF_LOADSCENE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_LOADSCENE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_LOADSCENE - CLIPROTO_MSGID_OFFSET] = "SC_SELF_LOADSCENE";
#endif
	m_iPkgSizeArray[CSID_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ENTERSCENE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = "CS_ENTERSCENE";
#endif
	m_iPkgSizeArray[SCID_SELF_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_ENTERSCENE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_ENTERSCENE - CLIPROTO_MSGID_OFFSET] = "SC_SELF_ENTERSCENE";
#endif
	m_iPkgSizeArray[SCID_SELF_DATA_END - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_DATA_END);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_DATA_END - CLIPROTO_MSGID_OFFSET] = "SC_SELF_DATA_END";
#endif
	m_iPkgSizeArray[SCID_SELF_APPEAR - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_APPEAR);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_APPEAR - CLIPROTO_MSGID_OFFSET] = "SC_SELF_APPEAR";
#endif
	m_iPkgSizeArray[SCID_SELF_BASE_PRO - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_BASE_PRO);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_BASE_PRO - CLIPROTO_MSGID_OFFSET] = "SC_SELF_BASE_PRO";
#endif
	m_iPkgSizeArray[CSID_LEVEL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_LEVEL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_LEVEL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_LEVEL_REQ";
#endif
	m_iPkgSizeArray[SCID_LEVEL_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_LEVEL_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_LEVEL_ACK - CLIPROTO_MSGID_OFFSET] = "SC_LEVEL_ACK";
#endif
	m_iPkgSizeArray[CSID_LEVEL_RESULT_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_LEVEL_RESULT_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_LEVEL_RESULT_NTF - CLIPROTO_MSGID_OFFSET] = "CS_LEVEL_RESULT_NTF";
#endif
	m_iPkgSizeArray[SCID_TREASURE_CHEST_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_TREASURE_CHEST_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_TREASURE_CHEST_NTF - CLIPROTO_MSGID_OFFSET] = "SC_TREASURE_CHEST_NTF";
#endif
	m_iPkgSizeArray[CSID_OPEN_TREASURE_CHEST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_OPEN_TREASURE_CHEST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_OPEN_TREASURE_CHEST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_OPEN_TREASURE_CHEST_REQ";
#endif
	m_iPkgSizeArray[SCID_OPEN_TREASURE_CHEST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_OPEN_TREASURE_CHEST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_OPEN_TREASURE_CHEST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_OPEN_TREASURE_CHEST_ACK";
#endif
	m_iPkgSizeArray[SCID_LEVEL_INFO - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_LEVEL_INFO);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_LEVEL_INFO - CLIPROTO_MSGID_OFFSET] = "SC_LEVEL_INFO";
#endif
	m_iPkgSizeArray[CSID_GET_BATTLE_BOX_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_BATTLE_BOX_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_BATTLE_BOX_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_BATTLE_BOX_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_BATTLE_BOX_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_BATTLE_BOX_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_BATTLE_BOX_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_BATTLE_BOX_ACK";
#endif
	m_iPkgSizeArray[SCID_BATTLE_GOT_STAR_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_BATTLE_GOT_STAR_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_BATTLE_GOT_STAR_NTF - CLIPROTO_MSGID_OFFSET] = "SC_BATTLE_GOT_STAR_NTF";
#endif
	m_iPkgSizeArray[SCID_SELF_VOLATILE_PRO - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_VOLATILE_PRO);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_VOLATILE_PRO - CLIPROTO_MSGID_OFFSET] = "SC_SELF_VOLATILE_PRO";
#endif
	m_iPkgSizeArray[SCID_CLIENT_CONFIG_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_CLIENT_CONFIG_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_CLIENT_CONFIG_NTF - CLIPROTO_MSGID_OFFSET] = "SC_CLIENT_CONFIG_NTF";
#endif
	m_iPkgSizeArray[CSID_CLIENT_CONFIG_UPDATE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_CLIENT_CONFIG_UPDATE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_CLIENT_CONFIG_UPDATE - CLIPROTO_MSGID_OFFSET] = "CS_CLIENT_CONFIG_UPDATE";
#endif
	m_iPkgSizeArray[SCID_ERROR_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ERROR_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ERROR_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ERROR_NTF";
#endif
	m_iPkgSizeArray[SCID_SELF_ITEM_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_ITEM_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_ITEM_NTF - CLIPROTO_MSGID_OFFSET] = "SC_SELF_ITEM_NTF";
#endif
	m_iPkgSizeArray[CSID_MOVE_ITEM_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_MOVE_ITEM_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_MOVE_ITEM_REQ - CLIPROTO_MSGID_OFFSET] = "CS_MOVE_ITEM_REQ";
#endif
	m_iPkgSizeArray[SCID_MOVE_ITEM_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_MOVE_ITEM_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_MOVE_ITEM_ACK - CLIPROTO_MSGID_OFFSET] = "SC_MOVE_ITEM_ACK";
#endif
	m_iPkgSizeArray[SCID_ROLE_BAG_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_BAG_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_BAG_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_BAG_NTF";
#endif
	m_iPkgSizeArray[SCID_ROLE_EQUIP_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_EQUIP_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_EQUIP_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_EQUIP_NTF";
#endif
	m_iPkgSizeArray[CSID_ROLE_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_EQUIP_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_EQUIP_REQ";
#endif
	m_iPkgSizeArray[CSID_ROLE_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_EVENT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_EVENT_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_BAG_SINGLE_LEAVE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_BAG_SINGLE_LEAVE_NTF";
#endif
	m_iPkgSizeArray[SCID_ROLE_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_BAG_SINGLE_ENTER_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_BAG_SINGLE_ENTER_NTF";
#endif
	m_iPkgSizeArray[SCID_ROLE_EQUIP_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_EQUIP_SINGLE_LEAVE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_EQUIP_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_EQUIP_SINGLE_LEAVE_NTF";
#endif
	m_iPkgSizeArray[SCID_ROLE_EQUIP_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_EQUIP_SINGLE_ENTER_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_EQUIP_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_EQUIP_SINGLE_ENTER_NTF";
#endif
	m_iPkgSizeArray[CSID_ROLE_ITEMUP_RPT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_ITEMUP_RPT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_ITEMUP_RPT - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_ITEMUP_RPT";
#endif
	m_iPkgSizeArray[SCID_ROLE_ITEMUP_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_ITEMUP_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_ITEMUP_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_ITEMUP_NTF";
#endif
	m_iPkgSizeArray[SCID_ROLE_ITEMUP_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_ITEMUP_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_ITEMUP_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_ITEMUP_ACK";
#endif
	m_iPkgSizeArray[SCID_ROLE_SUIT_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_SUIT_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_SUIT_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_SUIT_NTF";
#endif
	m_iPkgSizeArray[CSID_ROLE_HOLE_ON_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_HOLE_ON_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_HOLE_ON_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_HOLE_ON_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_HOLE_ON_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_HOLE_ON_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_HOLE_ON_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_HOLE_ON_ACK";
#endif
	m_iPkgSizeArray[CSID_ROLE_HOLE_OFF_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_HOLE_OFF_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_HOLE_OFF_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_HOLE_OFF_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_HOLE_OFF_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_HOLE_OFF_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_HOLE_OFF_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_HOLE_OFF_ACK";
#endif
	m_iPkgSizeArray[CSID_ROLE_HOLE_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_HOLE_REFRESH_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_HOLE_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_HOLE_REFRESH_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_HOLE_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_HOLE_REFRESH_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_HOLE_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_HOLE_REFRESH_ACK";
#endif
	m_iPkgSizeArray[CSID_ROLE_HOLE_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_HOLE_MERGE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_HOLE_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_HOLE_MERGE_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_HOLE_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_HOLE_MERGE_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_HOLE_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_HOLE_MERGE_ACK";
#endif
	m_iPkgSizeArray[CSID_ROLE_HOLE_MERGE2_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_HOLE_MERGE2_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_HOLE_MERGE2_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_HOLE_MERGE2_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_HOLE_MERGE2_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_HOLE_MERGE2_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_HOLE_MERGE2_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_HOLE_MERGE2_ACK";
#endif
	m_iPkgSizeArray[CSID_LOCK_RPT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_LOCK_RPT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_LOCK_RPT - CLIPROTO_MSGID_OFFSET] = "CS_LOCK_RPT";
#endif
	m_iPkgSizeArray[CSID_ROLE_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_USEITEM_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_USEITEM_REQ";
#endif
	m_iPkgSizeArray[CSID_PET_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PET_USEITEM_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PET_USEITEM_REQ - CLIPROTO_MSGID_OFFSET] = "CS_PET_USEITEM_REQ";
#endif
	m_iPkgSizeArray[SCID_PET_USEITEM_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_USEITEM_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_USEITEM_ACK - CLIPROTO_MSGID_OFFSET] = "SC_PET_USEITEM_ACK";
#endif
	m_iPkgSizeArray[SCID_ROLE_LIMIT_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_LIMIT_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_LIMIT_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_LIMIT_NTF";
#endif
	m_iPkgSizeArray[CSID_GATHER_ITEM_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GATHER_ITEM_MERGE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GATHER_ITEM_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GATHER_ITEM_MERGE_REQ";
#endif
	m_iPkgSizeArray[SCID_GATHER_ITEM_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GATHER_ITEM_MERGE_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GATHER_ITEM_MERGE_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GATHER_ITEM_MERGE_ACK";
#endif
	m_iPkgSizeArray[SCID_GATHER_INFO_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GATHER_INFO_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GATHER_INFO_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GATHER_INFO_NTF";
#endif
	m_iPkgSizeArray[SCID_GATHER_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GATHER_SINGLE_ENTER_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GATHER_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GATHER_SINGLE_ENTER_NTF";
#endif
	m_iPkgSizeArray[SCID_GATHER_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GATHER_SINGLE_LEAVE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GATHER_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GATHER_SINGLE_LEAVE_NTF";
#endif
	m_iPkgSizeArray[CSID_ROLE_PROD_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_PROD_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_PROD_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_PROD_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_PROD_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_PROD_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_PROD_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_PROD_ACK";
#endif
	m_iPkgSizeArray[SCID_ROLE_USEITEM_START_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_USEITEM_START_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_USEITEM_START_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_USEITEM_START_ACK";
#endif
	m_iPkgSizeArray[SCID_ROLE_USEITEM_END_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_USEITEM_END_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_USEITEM_END_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_USEITEM_END_ACK";
#endif
	m_iPkgSizeArray[SCID_USER_SKILLS_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_USER_SKILLS_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_USER_SKILLS_NTF - CLIPROTO_MSGID_OFFSET] = "SC_USER_SKILLS_NTF";
#endif
	m_iPkgSizeArray[CSID_LEARN_SKILL - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_LEARN_SKILL);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_LEARN_SKILL - CLIPROTO_MSGID_OFFSET] = "CS_LEARN_SKILL";
#endif
	m_iPkgSizeArray[SCID_SKILL_INFO_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SKILL_INFO_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SKILL_INFO_NTF - CLIPROTO_MSGID_OFFSET] = "SC_SKILL_INFO_NTF";
#endif
	m_iPkgSizeArray[SCID_REMOVE_SKILL_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_REMOVE_SKILL_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_REMOVE_SKILL_NTF - CLIPROTO_MSGID_OFFSET] = "SC_REMOVE_SKILL_NTF";
#endif
	m_iPkgSizeArray[SCID_SKILL_POINT_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SKILL_POINT_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SKILL_POINT_NTF - CLIPROTO_MSGID_OFFSET] = "SC_SKILL_POINT_NTF";
#endif
	m_iPkgSizeArray[CSID_SKILL_RESET_ALL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SKILL_RESET_ALL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SKILL_RESET_ALL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SKILL_RESET_ALL_REQ";
#endif
	m_iPkgSizeArray[SCID_USER_PETS_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_USER_PETS_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_USER_PETS_NTF - CLIPROTO_MSGID_OFFSET] = "SC_USER_PETS_NTF";
#endif
	m_iPkgSizeArray[SCID_PET_INFO_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_INFO_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_INFO_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_INFO_NTF";
#endif
	m_iPkgSizeArray[CSID_SET_BATTLE_PET_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SET_BATTLE_PET_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SET_BATTLE_PET_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SET_BATTLE_PET_REQ";
#endif
	m_iPkgSizeArray[SCID_SET_BATTLE_PET_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SET_BATTLE_PET_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SET_BATTLE_PET_NTF - CLIPROTO_MSGID_OFFSET] = "SC_SET_BATTLE_PET_NTF";
#endif
	m_iPkgSizeArray[CSID_PET_GET_EXP_RPT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PET_GET_EXP_RPT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PET_GET_EXP_RPT - CLIPROTO_MSGID_OFFSET] = "CS_PET_GET_EXP_RPT";
#endif
	m_iPkgSizeArray[SCID_PET_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_LEVEL_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_LEVEL_NTF";
#endif
	m_iPkgSizeArray[CSID_PET_UP_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PET_UP_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PET_UP_REQ - CLIPROTO_MSGID_OFFSET] = "CS_PET_UP_REQ";
#endif
	m_iPkgSizeArray[SCID_PET_UP_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_UP_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_UP_ACK - CLIPROTO_MSGID_OFFSET] = "SC_PET_UP_ACK";
#endif
	m_iPkgSizeArray[CSID_PET_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PET_MERGE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PET_MERGE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_PET_MERGE_REQ";
#endif
	m_iPkgSizeArray[SCID_PET_ADD_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_ADD_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_ADD_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_ADD_NTF";
#endif
	m_iPkgSizeArray[SCID_PETS_RECORD_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PETS_RECORD_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PETS_RECORD_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PETS_RECORD_NTF";
#endif
	m_iPkgSizeArray[SCID_PET_BAG_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_BAG_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_BAG_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_BAG_NTF";
#endif
	m_iPkgSizeArray[CSID_PET_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PET_EQUIP_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PET_EQUIP_REQ - CLIPROTO_MSGID_OFFSET] = "CS_PET_EQUIP_REQ";
#endif
	m_iPkgSizeArray[CSID_PET_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PET_EVENT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PET_EVENT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_PET_EVENT_REQ";
#endif
	m_iPkgSizeArray[SCID_PET_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_BAG_SINGLE_LEAVE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_BAG_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_BAG_SINGLE_LEAVE_NTF";
#endif
	m_iPkgSizeArray[SCID_PET_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_BAG_SINGLE_ENTER_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_BAG_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_BAG_SINGLE_ENTER_NTF";
#endif
	m_iPkgSizeArray[CSID_PET_TEAM_RPT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PET_TEAM_RPT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PET_TEAM_RPT - CLIPROTO_MSGID_OFFSET] = "CS_PET_TEAM_RPT";
#endif
	m_iPkgSizeArray[SCID_PET_TEAM_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_TEAM_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_TEAM_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_TEAM_NTF";
#endif
	m_iPkgSizeArray[SCID_PET_GET_EXP_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_GET_EXP_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_GET_EXP_ACK - CLIPROTO_MSGID_OFFSET] = "SC_PET_GET_EXP_ACK";
#endif
	m_iPkgSizeArray[SCID_PET_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_SINGLE_ENTER_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_SINGLE_ENTER_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_SINGLE_ENTER_NTF";
#endif
	m_iPkgSizeArray[SCID_PET_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_SINGLE_LEAVE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_SINGLE_LEAVE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PET_SINGLE_LEAVE_NTF";
#endif
	m_iPkgSizeArray[SCID_PET_EVENT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PET_EVENT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PET_EVENT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_PET_EVENT_ACK";
#endif
	m_iPkgSizeArray[CSID_MOVE_SYNC_MODE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_MOVE_SYNC_MODE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_MOVE_SYNC_MODE - CLIPROTO_MSGID_OFFSET] = "CS_MOVE_SYNC_MODE";
#endif
	m_iPkgSizeArray[CSID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_MOVE_BEGIN);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = "CS_MOVE_BEGIN";
#endif
	m_iPkgSizeArray[CSID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_MOVE_STOP);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = "CS_MOVE_STOP";
#endif
	m_iPkgSizeArray[SCID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_MOVE_BEGIN);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_MOVE_BEGIN - CLIPROTO_MSGID_OFFSET] = "SC_MOVE_BEGIN";
#endif
	m_iPkgSizeArray[SCID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_MOVE_STOP);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_MOVE_STOP - CLIPROTO_MSGID_OFFSET] = "SC_MOVE_STOP";
#endif
	m_iPkgSizeArray[SCID_OTHER_APPEAR - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_OTHER_APPEAR);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_OTHER_APPEAR - CLIPROTO_MSGID_OFFSET] = "SC_OTHER_APPEAR";
#endif
	m_iPkgSizeArray[SCID_OTHER_UPDATE - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_OTHER_UPDATE);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_OTHER_UPDATE - CLIPROTO_MSGID_OFFSET] = "SC_OTHER_UPDATE";
#endif
	m_iPkgSizeArray[SCID_OTHER_DISAPPEAR - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_OTHER_DISAPPEAR);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_OTHER_DISAPPEAR - CLIPROTO_MSGID_OFFSET] = "SC_OTHER_DISAPPEAR";
#endif
	m_iPkgSizeArray[CSID_CHAT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_CHAT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_CHAT - CLIPROTO_MSGID_OFFSET] = "CS_CHAT";
#endif
	m_iPkgSizeArray[SCID_CHAT - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_CHAT);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_CHAT - CLIPROTO_MSGID_OFFSET] = "SC_CHAT";
#endif
	m_iPkgSizeArray[SCID_CHAT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_CHAT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_CHAT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_CHAT_ACK";
#endif
	m_iPkgSizeArray[SCID_FRIENDS_LIST_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_FRIENDS_LIST_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_FRIENDS_LIST_NTF - CLIPROTO_MSGID_OFFSET] = "SC_FRIENDS_LIST_NTF";
#endif
	m_iPkgSizeArray[CSID_QUERY_ROLE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_QUERY_ROLE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_QUERY_ROLE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_QUERY_ROLE_REQ";
#endif
	m_iPkgSizeArray[SCID_QUERY_ROLE_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_QUERY_ROLE_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_QUERY_ROLE_ACK - CLIPROTO_MSGID_OFFSET] = "SC_QUERY_ROLE_ACK";
#endif
	m_iPkgSizeArray[CSID_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ADD_FRIEND_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ADD_FRIEND_REQ";
#endif
	m_iPkgSizeArray[SCID_ADD_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ADD_FRIEND_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ADD_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ADD_FRIEND_ACK";
#endif
	m_iPkgSizeArray[CSID_REMOVE_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_REMOVE_FRIEND_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_REMOVE_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = "CS_REMOVE_FRIEND_REQ";
#endif
	m_iPkgSizeArray[SCID_REMOVE_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_REMOVE_FRIEND_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_REMOVE_FRIEND_ACK - CLIPROTO_MSGID_OFFSET] = "SC_REMOVE_FRIEND_ACK";
#endif
	m_iPkgSizeArray[CSID_DONATE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_DONATE_ACTION_POINT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_DONATE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_DONATE_ACTION_POINT_REQ";
#endif
	m_iPkgSizeArray[SCID_DONATE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_DONATE_ACTION_POINT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_DONATE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_DONATE_ACTION_POINT_ACK";
#endif
	m_iPkgSizeArray[SCID_DONATE_ACTION_POINT_OTHER_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_DONATE_ACTION_POINT_OTHER_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_DONATE_ACTION_POINT_OTHER_NTF - CLIPROTO_MSGID_OFFSET] = "SC_DONATE_ACTION_POINT_OTHER_NTF";
#endif
	m_iPkgSizeArray[CSID_RECEIVE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_RECEIVE_ACTION_POINT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_RECEIVE_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_RECEIVE_ACTION_POINT_REQ";
#endif
	m_iPkgSizeArray[SCID_RECEIVE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_RECEIVE_ACTION_POINT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_RECEIVE_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_RECEIVE_ACTION_POINT_ACK";
#endif
	m_iPkgSizeArray[CSID_RESPONSE_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_RESPONSE_ADD_FRIEND_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_RESPONSE_ADD_FRIEND_REQ - CLIPROTO_MSGID_OFFSET] = "CS_RESPONSE_ADD_FRIEND_REQ";
#endif
	m_iPkgSizeArray[SCID_REQUEST_ADD_FRIEND_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_REQUEST_ADD_FRIEND_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_REQUEST_ADD_FRIEND_NTF - CLIPROTO_MSGID_OFFSET] = "SC_REQUEST_ADD_FRIEND_NTF";
#endif
	m_iPkgSizeArray[SCID_FRIEND_INFO_CHANGE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_FRIEND_INFO_CHANGE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_FRIEND_INFO_CHANGE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_FRIEND_INFO_CHANGE_NTF";
#endif
	m_iPkgSizeArray[SCID_FRIEND_REMOVE_INVITE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_FRIEND_REMOVE_INVITE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_FRIEND_REMOVE_INVITE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_FRIEND_REMOVE_INVITE_NTF";
#endif
	m_iPkgSizeArray[CSID_FRIEND_ASSIST_LIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_FRIEND_ASSIST_LIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_FRIEND_ASSIST_LIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_FRIEND_ASSIST_LIST_REQ";
#endif
	m_iPkgSizeArray[SCID_FRIEND_ASSIST_LIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_FRIEND_ASSIST_LIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_FRIEND_ASSIST_LIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_FRIEND_ASSIST_LIST_ACK";
#endif
	m_iPkgSizeArray[CSID_SELECT_FRIEND_ASSIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SELECT_FRIEND_ASSIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SELECT_FRIEND_ASSIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SELECT_FRIEND_ASSIST_REQ";
#endif
	m_iPkgSizeArray[SCID_SELECT_FRIEND_ASSIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELECT_FRIEND_ASSIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELECT_FRIEND_ASSIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SELECT_FRIEND_ASSIST_ACK";
#endif
	m_iPkgSizeArray[SCID_FRIEND_EPINFO_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_FRIEND_EPINFO_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_FRIEND_EPINFO_NTF - CLIPROTO_MSGID_OFFSET] = "SC_FRIEND_EPINFO_NTF";
#endif
	m_iPkgSizeArray[CSID_FRIENDS_LIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_FRIENDS_LIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_FRIENDS_LIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_FRIENDS_LIST_REQ";
#endif
	m_iPkgSizeArray[SCID_ABYSS_TRIGGER_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ABYSS_TRIGGER_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ABYSS_TRIGGER_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ABYSS_TRIGGER_ACK";
#endif
	m_iPkgSizeArray[CSID_ABYSS_OPEN_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ABYSS_OPEN_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ABYSS_OPEN_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ABYSS_OPEN_REQ";
#endif
	m_iPkgSizeArray[SCID_ABYSS_OPEN_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ABYSS_OPEN_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ABYSS_OPEN_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ABYSS_OPEN_ACK";
#endif
	m_iPkgSizeArray[SCID_ABYSS_OPEN_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ABYSS_OPEN_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ABYSS_OPEN_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ABYSS_OPEN_NTF";
#endif
	m_iPkgSizeArray[CSID_GET_ABYSS_TRIGGER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_ABYSS_TRIGGER_LIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_ABYSS_TRIGGER_LIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_ABYSS_TRIGGER_LIST_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_ABYSS_TRIGGER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_ABYSS_TRIGGER_LIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_ABYSS_TRIGGER_LIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_ABYSS_TRIGGER_LIST_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_ABYSS_OPEN_LIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_ABYSS_OPEN_LIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_ABYSS_OPEN_LIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_ABYSS_OPEN_LIST_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_ABYSS_OPEN_LIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_ABYSS_OPEN_LIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_ABYSS_OPEN_LIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_ABYSS_OPEN_LIST_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_ABYSS_OPEN_REC_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_ABYSS_OPEN_REC_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_ABYSS_OPEN_REC_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_ABYSS_OPEN_REC_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_ABYSS_OPEN_REC_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_ABYSS_OPEN_REC_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_ABYSS_OPEN_REC_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_ABYSS_OPEN_REC_ACK";
#endif
	m_iPkgSizeArray[SCID_ENTER_ABYSS_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ENTER_ABYSS_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ENTER_ABYSS_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ENTER_ABYSS_ACK";
#endif
	m_iPkgSizeArray[SCID_ABYSS_RUN_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ABYSS_RUN_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ABYSS_RUN_NTF - CLIPROTO_MSGID_OFFSET] = "SC_ABYSS_RUN_NTF";
#endif
	m_iPkgSizeArray[SCID_MAIL_LIST_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_MAIL_LIST_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_MAIL_LIST_NTF - CLIPROTO_MSGID_OFFSET] = "SC_MAIL_LIST_NTF";
#endif
	m_iPkgSizeArray[CSID_SEND_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SEND_MAIL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SEND_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SEND_MAIL_REQ";
#endif
	m_iPkgSizeArray[SCID_SEND_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SEND_MAIL_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SEND_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SEND_MAIL_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_ITEM_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_ITEM_FROM_MAIL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_ITEM_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_ITEM_FROM_MAIL_REQ";
#endif
	m_iPkgSizeArray[CSID_GET_MONEY_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_MONEY_FROM_MAIL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_MONEY_FROM_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_MONEY_FROM_MAIL_REQ";
#endif
	m_iPkgSizeArray[CSID_READ_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_READ_MAIL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_READ_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_READ_MAIL_REQ";
#endif
	m_iPkgSizeArray[SCID_READ_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_READ_MAIL_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_READ_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = "SC_READ_MAIL_ACK";
#endif
	m_iPkgSizeArray[CSID_DELETE_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_DELETE_MAIL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_DELETE_MAIL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_DELETE_MAIL_REQ";
#endif
	m_iPkgSizeArray[SCID_DELETE_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_DELETE_MAIL_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_DELETE_MAIL_ACK - CLIPROTO_MSGID_OFFSET] = "SC_DELETE_MAIL_ACK";
#endif
	m_iPkgSizeArray[SCID_UPDATE_MAIL_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_UPDATE_MAIL_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_UPDATE_MAIL_NTF - CLIPROTO_MSGID_OFFSET] = "SC_UPDATE_MAIL_NTF";
#endif
	m_iPkgSizeArray[SCID_SHOP_ACTION_POINT_BOUGHT_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_ACTION_POINT_BOUGHT_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_ACTION_POINT_BOUGHT_NTF - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_ACTION_POINT_BOUGHT_NTF";
#endif
	m_iPkgSizeArray[CSID_SHOP_BUY_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SHOP_BUY_ACTION_POINT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SHOP_BUY_ACTION_POINT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SHOP_BUY_ACTION_POINT_REQ";
#endif
	m_iPkgSizeArray[SCID_SHOP_BUY_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_BUY_ACTION_POINT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_BUY_ACTION_POINT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_BUY_ACTION_POINT_ACK";
#endif
	m_iPkgSizeArray[SCID_SHOP_BUY_PET_INFO_CHEAP_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_BUY_PET_INFO_CHEAP_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_BUY_PET_INFO_CHEAP_NTF - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_BUY_PET_INFO_CHEAP_NTF";
#endif
	m_iPkgSizeArray[SCID_SHOP_BUY_PET_INFO_EXPENSIVE_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_BUY_PET_INFO_EXPENSIVE_NTF - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF";
#endif
	m_iPkgSizeArray[CSID_SHOP_BUY_PET_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SHOP_BUY_PET_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SHOP_BUY_PET_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SHOP_BUY_PET_REQ";
#endif
	m_iPkgSizeArray[SCID_SHOP_BUY_PET_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_BUY_PET_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_BUY_PET_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_BUY_PET_ACK";
#endif
	m_iPkgSizeArray[CSID_SHOP_GET_GOODSLIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SHOP_GET_GOODSLIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SHOP_GET_GOODSLIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SHOP_GET_GOODSLIST_REQ";
#endif
	m_iPkgSizeArray[SCID_SHOP_GET_GOODSLIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_GET_GOODSLIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_GET_GOODSLIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_GET_GOODSLIST_ACK";
#endif
	m_iPkgSizeArray[CSID_SHOP_BUY_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SHOP_BUY_GOODS_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SHOP_BUY_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SHOP_BUY_GOODS_REQ";
#endif
	m_iPkgSizeArray[SCID_SHOP_BUY_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_BUY_GOODS_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_BUY_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_BUY_GOODS_ACK";
#endif
	m_iPkgSizeArray[CSID_SHOP_SECRET_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SHOP_SECRET_GOODS_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SHOP_SECRET_GOODS_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SHOP_SECRET_GOODS_REQ";
#endif
	m_iPkgSizeArray[SCID_SHOP_SECRET_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_SECRET_GOODS_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_SECRET_GOODS_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_SECRET_GOODS_ACK";
#endif
	m_iPkgSizeArray[CSID_SHOP_SECRET_BUY_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SHOP_SECRET_BUY_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SHOP_SECRET_BUY_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SHOP_SECRET_BUY_REQ";
#endif
	m_iPkgSizeArray[SCID_SHOP_SECRET_BUY_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SHOP_SECRET_BUY_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SHOP_SECRET_BUY_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SHOP_SECRET_BUY_ACK";
#endif
	m_iPkgSizeArray[CSID_SHOP_SECRET_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SHOP_SECRET_REFRESH_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SHOP_SECRET_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SHOP_SECRET_REFRESH_REQ";
#endif
	m_iPkgSizeArray[CSID_SELF_PVP_PRO_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_SELF_PVP_PRO_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_SELF_PVP_PRO_REQ - CLIPROTO_MSGID_OFFSET] = "CS_SELF_PVP_PRO_REQ";
#endif
	m_iPkgSizeArray[SCID_SELF_PVP_PRO_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_SELF_PVP_PRO_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_SELF_PVP_PRO_ACK - CLIPROTO_MSGID_OFFSET] = "SC_SELF_PVP_PRO_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_PVP_MATCH_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_PVP_MATCH_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_PVP_MATCH_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_PVP_MATCH_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_PVP_MATCH_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_PVP_MATCH_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_PVP_MATCH_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_PVP_MATCH_ACK";
#endif
	m_iPkgSizeArray[CSID_ENTER_PVP_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ENTER_PVP_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ENTER_PVP_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ENTER_PVP_REQ";
#endif
	m_iPkgSizeArray[SCID_ENTER_PVP_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ENTER_PVP_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ENTER_PVP_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ENTER_PVP_ACK";
#endif
	m_iPkgSizeArray[CSID_PVP_RETULT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PVP_RETULT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PVP_RETULT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_PVP_RETULT_REQ";
#endif
	m_iPkgSizeArray[SCID_PVP_RETULT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PVP_RETULT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PVP_RETULT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_PVP_RETULT_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_RANK_LIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_RANK_LIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_RANK_LIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_RANK_LIST_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_RANK_LIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_RANK_LIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_RANK_LIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_RANK_LIST_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_PVP_MILITARY_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_PVP_MILITARY_REWARD_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_PVP_MILITARY_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_PVP_MILITARY_REWARD_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_PVP_MILITARY_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_PVP_MILITARY_REWARD_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_PVP_MILITARY_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_PVP_MILITARY_REWARD_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_PVP_REPUTE_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_PVP_REPUTE_REWARD_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_PVP_REPUTE_REWARD_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_PVP_REPUTE_REWARD_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_PVP_REPUTE_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_PVP_REPUTE_REWARD_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_PVP_REPUTE_REWARD_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_PVP_REPUTE_REWARD_ACK";
#endif
	m_iPkgSizeArray[CSID_PVP_BUY_CHALLENGE_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_PVP_BUY_CHALLENGE_TIMES_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_PVP_BUY_CHALLENGE_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = "CS_PVP_BUY_CHALLENGE_TIMES_REQ";
#endif
	m_iPkgSizeArray[SCID_PVP_BUY_CHALLENGE_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PVP_BUY_CHALLENGE_TIMES_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PVP_BUY_CHALLENGE_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = "SC_PVP_BUY_CHALLENGE_TIMES_ACK";
#endif
	m_iPkgSizeArray[SCID_PVP_TIME_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_PVP_TIME_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_PVP_TIME_NTF - CLIPROTO_MSGID_OFFSET] = "SC_PVP_TIME_NTF";
#endif
	m_iPkgSizeArray[CSID_GET_PVP_ROLE_INFO_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_PVP_ROLE_INFO_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_PVP_ROLE_INFO_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_PVP_ROLE_INFO_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_PVP_ROLE_INFO_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_PVP_ROLE_INFO_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_PVP_ROLE_INFO_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_PVP_ROLE_INFO_ACK";
#endif
	m_iPkgSizeArray[SCID_VIP_INFO_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_VIP_INFO_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_VIP_INFO_NTF - CLIPROTO_MSGID_OFFSET] = "SC_VIP_INFO_NTF";
#endif
	m_iPkgSizeArray[SCID_VIP_RMBINFO_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_VIP_RMBINFO_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_VIP_RMBINFO_NTF - CLIPROTO_MSGID_OFFSET] = "SC_VIP_RMBINFO_NTF";
#endif
	m_iPkgSizeArray[SCID_VIP_MONTHCARD_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_VIP_MONTHCARD_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_VIP_MONTHCARD_NTF - CLIPROTO_MSGID_OFFSET] = "SC_VIP_MONTHCARD_NTF";
#endif
	m_iPkgSizeArray[CSID_VIP_MONTHCARD_GETITEM_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_VIP_MONTHCARD_GETITEM_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_VIP_MONTHCARD_GETITEM_REQ - CLIPROTO_MSGID_OFFSET] = "CS_VIP_MONTHCARD_GETITEM_REQ";
#endif
	m_iPkgSizeArray[SCID_VIP_MONTHCARD_GETITEM_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_VIP_MONTHCARD_GETITEM_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_VIP_MONTHCARD_GETITEM_ACK - CLIPROTO_MSGID_OFFSET] = "SC_VIP_MONTHCARD_GETITEM_ACK";
#endif
	m_iPkgSizeArray[SCID_GIFT_SIGN_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_SIGN_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_SIGN_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_SIGN_NTF";
#endif
	m_iPkgSizeArray[SCID_GIFT_SIGN_VIP_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_SIGN_VIP_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_SIGN_VIP_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_SIGN_VIP_NTF";
#endif
	m_iPkgSizeArray[CSID_GIFT_SIGN - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_SIGN);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_SIGN - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_SIGN";
#endif
	m_iPkgSizeArray[CSID_GIFT_SIGN_VIP - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_SIGN_VIP);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_SIGN_VIP - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_SIGN_VIP";
#endif
	m_iPkgSizeArray[SCID_GIFT_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_LEVEL_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_LEVEL_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_LEVEL_NTF";
#endif
	m_iPkgSizeArray[CSID_GIFT_LEVEL - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_LEVEL);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_LEVEL - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_LEVEL";
#endif
	m_iPkgSizeArray[SCID_GIFT_DAY_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_DAY_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_DAY_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_DAY_NTF";
#endif
	m_iPkgSizeArray[SCID_GIFT_DAY_UPD - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_DAY_UPD);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_DAY_UPD - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_DAY_UPD";
#endif
	m_iPkgSizeArray[CSID_GIFT_DAY_SCORE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_DAY_SCORE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_DAY_SCORE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_DAY_SCORE_REQ";
#endif
	m_iPkgSizeArray[CSID_GIFT_DAY_BOX_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_DAY_BOX_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_DAY_BOX_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_DAY_BOX_REQ";
#endif
	m_iPkgSizeArray[SCID_GIFT_DAY_BOX_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_DAY_BOX_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_DAY_BOX_NTF - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_DAY_BOX_NTF";
#endif
	m_iPkgSizeArray[CSID_GIFT_JIHUOMA_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_JIHUOMA_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_JIHUOMA_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_JIHUOMA_REQ";
#endif
	m_iPkgSizeArray[SCID_GIFT_JIHUOMA_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_JIHUOMA_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_JIHUOMA_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_JIHUOMA_ACK";
#endif
	m_iPkgSizeArray[CSID_GIFT_EP_INFO_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_EP_INFO_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_EP_INFO_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_EP_INFO_REQ";
#endif
	m_iPkgSizeArray[SCID_GIFT_EP_INFO_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_EP_INFO_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_EP_INFO_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_EP_INFO_ACK";
#endif
	m_iPkgSizeArray[CSID_GIFT_RECEIVE_EP_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GIFT_RECEIVE_EP_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GIFT_RECEIVE_EP_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GIFT_RECEIVE_EP_REQ";
#endif
	m_iPkgSizeArray[SCID_GIFT_RECEIVE_EP_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GIFT_RECEIVE_EP_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GIFT_RECEIVE_EP_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GIFT_RECEIVE_EP_ACK";
#endif
	m_iPkgSizeArray[CSID_WB_INFO_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_WB_INFO_REFRESH_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_WB_INFO_REFRESH_REQ - CLIPROTO_MSGID_OFFSET] = "CS_WB_INFO_REFRESH_REQ";
#endif
	m_iPkgSizeArray[SCID_WB_INFO_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_WB_INFO_REFRESH_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_WB_INFO_REFRESH_ACK - CLIPROTO_MSGID_OFFSET] = "SC_WB_INFO_REFRESH_ACK";
#endif
	m_iPkgSizeArray[CSID_WB_ADD_BUF_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_WB_ADD_BUF_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_WB_ADD_BUF_REQ - CLIPROTO_MSGID_OFFSET] = "CS_WB_ADD_BUF_REQ";
#endif
	m_iPkgSizeArray[SCID_WB_ADD_BUF_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_WB_ADD_BUF_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_WB_ADD_BUF_ACK - CLIPROTO_MSGID_OFFSET] = "SC_WB_ADD_BUF_ACK";
#endif
	m_iPkgSizeArray[CSID_WB_RELIVE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_WB_RELIVE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_WB_RELIVE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_WB_RELIVE_REQ";
#endif
	m_iPkgSizeArray[SCID_WB_RELIVE_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_WB_RELIVE_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_WB_RELIVE_ACK - CLIPROTO_MSGID_OFFSET] = "SC_WB_RELIVE_ACK";
#endif
	m_iPkgSizeArray[SCID_WB_KILLED_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_WB_KILLED_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_WB_KILLED_NTF - CLIPROTO_MSGID_OFFSET] = "SC_WB_KILLED_NTF";
#endif
	m_iPkgSizeArray[SCID_WB_RUN_NTF - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_WB_RUN_NTF);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_WB_RUN_NTF - CLIPROTO_MSGID_OFFSET] = "SC_WB_RUN_NTF";
#endif
	m_iPkgSizeArray[CSID_WB_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_WB_ENTER_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_WB_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = "CS_WB_ENTER_REQ";
#endif
	m_iPkgSizeArray[SCID_WB_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_WB_ENTER_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_WB_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = "SC_WB_ENTER_ACK";
#endif
	m_iPkgSizeArray[CSID_WB_RESULT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_WB_RESULT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_WB_RESULT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_WB_RESULT_REQ";
#endif
	m_iPkgSizeArray[SCID_WB_RESULT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_WB_RESULT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_WB_RESULT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_WB_RESULT_ACK";
#endif
	m_iPkgSizeArray[CSID_ROLE_RANK_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_ROLE_RANK_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_ROLE_RANK_REQ - CLIPROTO_MSGID_OFFSET] = "CS_ROLE_RANK_REQ";
#endif
	m_iPkgSizeArray[SCID_ROLE_RANK_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_ROLE_RANK_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_ROLE_RANK_ACK - CLIPROTO_MSGID_OFFSET] = "SC_ROLE_RANK_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_PT_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_PT_BASEINFO_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_PT_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_PT_BASEINFO_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_PT_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_PT_BASEINFO_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_PT_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_PT_BASEINFO_ACK";
#endif
	m_iPkgSizeArray[CSID_BUY_PT_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_BUY_PT_TIMES_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_BUY_PT_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = "CS_BUY_PT_TIMES_REQ";
#endif
	m_iPkgSizeArray[SCID_BUY_PT_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_BUY_PT_TIMES_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_BUY_PT_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = "SC_BUY_PT_TIMES_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_MD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_MD_BASEINFO_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_MD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_MD_BASEINFO_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_MD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_MD_BASEINFO_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_MD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_MD_BASEINFO_ACK";
#endif
	m_iPkgSizeArray[CSID_BUY_MD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_BUY_MD_TIMES_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_BUY_MD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = "CS_BUY_MD_TIMES_REQ";
#endif
	m_iPkgSizeArray[SCID_BUY_MD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_BUY_MD_TIMES_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_BUY_MD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = "SC_BUY_MD_TIMES_ACK";
#endif
	m_iPkgSizeArray[CSID_GET_FD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GET_FD_BASEINFO_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GET_FD_BASEINFO_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GET_FD_BASEINFO_REQ";
#endif
	m_iPkgSizeArray[SCID_GET_FD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GET_FD_BASEINFO_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GET_FD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GET_FD_BASEINFO_ACK";
#endif
	m_iPkgSizeArray[CSID_BUY_FD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_BUY_FD_TIMES_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_BUY_FD_TIMES_REQ - CLIPROTO_MSGID_OFFSET] = "CS_BUY_FD_TIMES_REQ";
#endif
	m_iPkgSizeArray[SCID_BUY_FD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_BUY_FD_TIMES_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_BUY_FD_TIMES_ACK - CLIPROTO_MSGID_OFFSET] = "SC_BUY_FD_TIMES_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_INFO_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_INFO_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_INFO_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_INFO_REQ";
#endif
	m_iPkgSizeArray[CSID_GUILD_LIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_LIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_LIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_LIST_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_LIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_LIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_LIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_LIST_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_ENTER_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_ENTER_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_ENTER_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_ENTER_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_ENTER_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_ENTER_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_CREATE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_CREATE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_CREATE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_CREATE_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_CREATE_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_CREATE_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_CREATE_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_CREATE_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_LEAVE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_LEAVE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_LEAVE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_LEAVE_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_LEAVE_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_LEAVE_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_LEAVE_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_LEAVE_ACK";
#endif
	m_iPkgSizeArray[SCID_GUILD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_BASEINFO_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_BASEINFO_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_BASEINFO_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_LOG_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_LOG_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_LOG_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_LOG_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_LOG_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_LOG_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_LOG_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_LOG_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_CHANGE_NOTICE_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_CHANGE_NOTICE_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_CHANGE_NOTICE_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_CHANGE_NOTICE_REQ";
#endif
	m_iPkgSizeArray[CSID_GUILD_DETAIL_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_DETAIL_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_DETAIL_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_DETAIL_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_DETAIL_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_DETAIL_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_DETAIL_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_DETAIL_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_ENTERLIST_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_ENTERLIST_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_ENTERLIST_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_ENTERLIST_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_ENTERLIST_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_ENTERLIST_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_ENTERLIST_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_ENTERLIST_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_ENTER_ACCEPT_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_ENTER_ACCEPT_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_ENTER_ACCEPT_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_ENTER_ACCEPT_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_ENTER_ACCEPT_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_ENTER_ACCEPT_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_ENTER_ACCEPT_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_ENTER_ACCEPT_ACK";
#endif
	m_iPkgSizeArray[CSID_GUILD_ENTER_CLEAR_REQ - CLIPROTO_MSGID_OFFSET] = (int) sizeof(CS_GUILD_ENTER_CLEAR_REQ);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[CSID_GUILD_ENTER_CLEAR_REQ - CLIPROTO_MSGID_OFFSET] = "CS_GUILD_ENTER_CLEAR_REQ";
#endif
	m_iPkgSizeArray[SCID_GUILD_ENTER_CLEAR_ACK - CLIPROTO_MSGID_OFFSET] = (int) sizeof(SC_GUILD_ENTER_CLEAR_ACK);
#ifdef CLIPROTO_ID2NAME_DES
	m_arrPkgID2Name[SCID_GUILD_ENTER_CLEAR_ACK - CLIPROTO_MSGID_OFFSET] = "SC_GUILD_ENTER_CLEAR_ACK";
#endif
	return true;
}

int CCliProto::GetPkgEncodeCount(int iMsgID)
{
	if(iMsgID - CLIPROTO_MSGID_OFFSET >= CLIPROTO_MSGID_RANGE)
		return NULL;
	return m_iPkgEncodeCount[iMsgID - CLIPROTO_MSGID_OFFSET];
}

int CCliProto::GetPkgDecodeCount(int iMsgID)
{
	if(iMsgID - CLIPROTO_MSGID_OFFSET >= CLIPROTO_MSGID_RANGE)
		return NULL;
	return m_iPkgDecodeCount[iMsgID - CLIPROTO_MSGID_OFFSET];
}

#ifdef CLIPROTO_ID2NAME_DES
const char* CCliProto::GetPkgName(int iMsgID)
{
   if(iMsgID - CLIPROTO_MSGID_OFFSET >= CLIPROTO_MSGID_RANGE)
		return NULL;
   return m_arrPkgID2Name[iMsgID - CLIPROTO_MSGID_OFFSET];
}
#endif

int EncodeLGPKG_LOGIN_REQ(const void *pHost, INetData* poNetData)
{
	const LGPKG_LOGIN_REQ *pstIn = (const LGPKG_LOGIN_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szType, sizeof(pstIn->szType), "Type"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTokenLen, "TokenLen"))
		return -1;

   if (pstIn->dwTokenLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyToken, pstIn->dwTokenLen, "Token"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwServerGroup, "ServerGroup"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResourceLevel, "ResourceLevel"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGPKG_LOGIN_REQ(void *pHost, INetData* poNetData)
{
	LGPKG_LOGIN_REQ *pstOut = (LGPKG_LOGIN_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szType, sizeof(pstOut->szType), "Type"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTokenLen, "TokenLen"))
		return -1;

   if (pstOut->dwTokenLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyToken, pstOut->dwTokenLen, "Token"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwServerGroup, "ServerGroup"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResourceLevel, "ResourceLevel"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeLGPKG_ACT_REQ(const void *pHost, INetData* poNetData)
{
	const LGPKG_ACT_REQ *pstIn = (const LGPKG_ACT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nSubReq, "SubReq"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nInfoLen, "InfoLen"))
		return -1;

   if (pstIn->nInfoLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyInfo, pstIn->nInfoLen, "Info"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGPKG_ACT_REQ(void *pHost, INetData* poNetData)
{
	LGPKG_ACT_REQ *pstOut = (LGPKG_ACT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nSubReq, "SubReq"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nInfoLen, "InfoLen"))
		return -1;

   if (pstOut->nInfoLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyInfo, pstOut->nInfoLen, "Info"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSCDNInfo(const void *pHost, INetData* poNetData)
{
	const SCDNInfo *pstIn = (const SCDNInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szPath, sizeof(pstIn->szPath), "Path"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSCDNInfo(void *pHost, INetData* poNetData)
{
	SCDNInfo *pstOut = (SCDNInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szPath, sizeof(pstOut->szPath), "Path"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSBundleInfoList(const void *pHost, INetData* poNetData)
{
	const SBundleInfoList *pstIn = (const SBundleInfoList*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szPath, sizeof(pstIn->szPath), "Path"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCDNCount, "CDNCount"))
		return -1;

	int i;
	if ((int)pstIn->dwCDNCount > 8 || pstIn->dwCDNCount < 0)
       return -1;
	for(i = 0; i < 8; ++i)
	{
		if(i >= (int)pstIn->dwCDNCount)
			break;
		if(-1 == EncodeSCDNInfo(&pstIn->astCDN[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSBundleInfoList(void *pHost, INetData* poNetData)
{
	SBundleInfoList *pstOut = (SBundleInfoList*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szPath, sizeof(pstOut->szPath), "Path"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCDNCount, "CDNCount"))
		return -1;

	int i;
	if ((int)pstOut->dwCDNCount > 8 || pstOut->dwCDNCount < 0)
       return -1;
	for(i = 0; i < 8; ++i)
	{
		if(i >= (int)pstOut->dwCDNCount)
			break;
		if(-1 == DecodeSCDNInfo(&pstOut->astCDN[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeLGDT_LOGIN_SUCCESS(const void *pHost, INetData* poNetData)
{
	const LGDT_LOGIN_SUCCESS *pstIn = (const LGDT_LOGIN_SUCCESS*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szUsername, sizeof(pstIn->szUsername), "Username"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szDigitID, sizeof(pstIn->szDigitID), "DigitID"))
		return -1;

	if(-1 == poNetData->AddBuf(pstIn->abySessionID, LG_SESSIONID_LEN, "SessionID"))
		return -1;

	if(-1 == poNetData->AddBuf(pstIn->abySig, LG_SIG_LEN, "Sig"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nInfoLen, "InfoLen"))
		return -1;

   if (pstIn->nInfoLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyInfo, pstIn->nInfoLen, "Info"))
		return -1;

	if(-1 == EncodeSServerInfo(&pstIn->stGateInfo, poNetData))
		return -1;

	if(-1 == EncodeSBundleInfoList(&pstIn->stBundleInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGDT_LOGIN_SUCCESS(void *pHost, INetData* poNetData)
{
	LGDT_LOGIN_SUCCESS *pstOut = (LGDT_LOGIN_SUCCESS*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szUsername, sizeof(pstOut->szUsername), "Username"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szDigitID, sizeof(pstOut->szDigitID), "DigitID"))
		return -1;

	if(-1 == poNetData->DelBuf(pstOut->abySessionID, LG_SESSIONID_LEN, "SessionID"))
		return -1;

	if(-1 == poNetData->DelBuf(pstOut->abySig, LG_SIG_LEN, "Sig"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nInfoLen, "InfoLen"))
		return -1;

   if (pstOut->nInfoLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyInfo, pstOut->nInfoLen, "Info"))
		return -1;

	if(-1 == DecodeSServerInfo(&pstOut->stGateInfo, poNetData))
		return -1;

	if(-1 == DecodeSBundleInfoList(&pstOut->stBundleInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeLGDT_LOGIN_FAIL(const void *pHost, INetData* poNetData)
{
	const LGDT_LOGIN_FAIL *pstIn = (const LGDT_LOGIN_FAIL*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSubErrCode, "SubErrCode"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szMaintainInfo, sizeof(pstIn->szMaintainInfo), "MaintainInfo"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGDT_LOGIN_FAIL(void *pHost, INetData* poNetData)
{
	LGDT_LOGIN_FAIL *pstOut = (LGDT_LOGIN_FAIL*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSubErrCode, "SubErrCode"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szMaintainInfo, sizeof(pstOut->szMaintainInfo), "MaintainInfo"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeLGDT_LOGIN_INTERMEDIATE(const void *pHost, INetData* poNetData)
{
	const LGDT_LOGIN_INTERMEDIATE *pstIn = (const LGDT_LOGIN_INTERMEDIATE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nSubAck, "SubAck"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nInfoLen, "InfoLen"))
		return -1;

   if (pstIn->nInfoLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyInfo, pstIn->nInfoLen, "Info"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGDT_LOGIN_INTERMEDIATE(void *pHost, INetData* poNetData)
{
	LGDT_LOGIN_INTERMEDIATE *pstOut = (LGDT_LOGIN_INTERMEDIATE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nSubAck, "SubAck"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nInfoLen, "InfoLen"))
		return -1;

   if (pstOut->nInfoLen > LG_INFO_LEN)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyInfo, pstOut->nInfoLen, "Info"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeUnLGDT_ACT_REPLY(const void *pHost, int iSelect, INetData* poNetData)
{
	switch(iSelect){
	case LG_SUCCESS:
		return EncodeLGDT_LOGIN_SUCCESS(pHost, poNetData);
	case LG_FAIL:
		return EncodeLGDT_LOGIN_FAIL(pHost, poNetData);
	case LG_INTER:
		return EncodeLGDT_LOGIN_INTERMEDIATE(pHost, poNetData);
	default: return -1;
	}
}

int DecodeUnLGDT_ACT_REPLY(void *pHost, int iSelect, INetData* poNetData)
{
	switch(iSelect){
	case LG_SUCCESS:
		return DecodeLGDT_LOGIN_SUCCESS(pHost, poNetData);
	case LG_FAIL:
		return DecodeLGDT_LOGIN_FAIL(pHost, poNetData);
	case LG_INTER:
		return DecodeLGDT_LOGIN_INTERMEDIATE(pHost, poNetData);
	default: return -1;
	}
}

int EncodeLGPKG_LOGIN_ACK(const void *pHost, INetData* poNetData)
{
	const LGPKG_LOGIN_ACK *pstIn = (const LGPKG_LOGIN_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byAckType, "AckType"))
		return -1;

	if(-1 == EncodeUnLGDT_ACT_REPLY(&pstIn->stReply, pstIn->byAckType, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGPKG_LOGIN_ACK(void *pHost, INetData* poNetData)
{
	LGPKG_LOGIN_ACK *pstOut = (LGPKG_LOGIN_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byAckType, "AckType"))
		return -1;

	if(-1 == DecodeUnLGDT_ACT_REPLY(&pstOut->stReply, pstOut->byAckType, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeLGPKG_GAMESERVER_LIST_REQ(const void *pHost, INetData* poNetData)
{
	const LGPKG_GAMESERVER_LIST_REQ *pstIn = (const LGPKG_GAMESERVER_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byFlags, "Flags"))
		return -1;

	if(-1 == poNetData->AddBuf(pstIn->abySig, LG_SIG_LEN, "Sig"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGPKG_GAMESERVER_LIST_REQ(void *pHost, INetData* poNetData)
{
	LGPKG_GAMESERVER_LIST_REQ *pstOut = (LGPKG_GAMESERVER_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byFlags, "Flags"))
		return -1;

	if(-1 == poNetData->DelBuf(pstOut->abySig, LG_SIG_LEN, "Sig"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeLGPKG_GAMESERVER_LIST_ACK(const void *pHost, INetData* poNetData)
{
	const LGPKG_GAMESERVER_LIST_ACK *pstIn = (const LGPKG_GAMESERVER_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > LG_MAX_GAMESERVER || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < LG_MAX_GAMESERVER; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSGameServerInfo(&pstIn->astList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeLGPKG_GAMESERVER_LIST_ACK(void *pHost, INetData* poNetData)
{
	LGPKG_GAMESERVER_LIST_ACK *pstOut = (LGPKG_GAMESERVER_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > LG_MAX_GAMESERVER || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < LG_MAX_GAMESERVER; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSGameServerInfo(&pstOut->astList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_ERROR(const void *pHost, INetData* poNetData)
{
	const GC_ERROR *pstIn = (const GC_ERROR*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_ERROR(void *pHost, INetData* poNetData)
{
	GC_ERROR *pstOut = (GC_ERROR*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_ERRORSTRING(const void *pHost, INetData* poNetData)
{
	const GC_ERRORSTRING *pstIn = (const GC_ERRORSTRING*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szErrCode, sizeof(pstIn->szErrCode), "ErrCode"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_ERRORSTRING(void *pHost, INetData* poNetData)
{
	GC_ERRORSTRING *pstOut = (GC_ERRORSTRING*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szErrCode, sizeof(pstOut->szErrCode), "ErrCode"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_HEART_BEAT(const void *pHost, INetData* poNetData)
{
	const CG_HEART_BEAT *pstIn = (const CG_HEART_BEAT*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_HEART_BEAT(void *pHost, INetData* poNetData)
{
	CG_HEART_BEAT *pstOut = (CG_HEART_BEAT*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_HEART_BEAT(const void *pHost, INetData* poNetData)
{
	const GC_HEART_BEAT *pstIn = (const GC_HEART_BEAT*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_HEART_BEAT(void *pHost, INetData* poNetData)
{
	GC_HEART_BEAT *pstOut = (GC_HEART_BEAT*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_PUBLIC_STRING(const void *pHost, INetData* poNetData)
{
	const GC_PUBLIC_STRING *pstIn = (const GC_PUBLIC_STRING*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szInfo, sizeof(pstIn->szInfo), "Info"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_PUBLIC_STRING(void *pHost, INetData* poNetData)
{
	GC_PUBLIC_STRING *pstOut = (GC_PUBLIC_STRING*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szInfo, sizeof(pstOut->szInfo), "Info"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_LOGIN(const void *pHost, INetData* poNetData)
{
	const CG_LOGIN *pstIn = (const CG_LOGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szPTID, sizeof(pstIn->szPTID), "PTID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nLoginDataLen, "LoginDataLen"))
		return -1;

   if (pstIn->nLoginDataLen > 64)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyLoginData, pstIn->nLoginDataLen, "LoginData"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szProtoVersion, sizeof(pstIn->szProtoVersion), "ProtoVersion"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMainVersion, "MainVersion"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSubVersion, "SubVersion"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuildVersion, "BuildVersion"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nResourceVersion, "ResourceVersion"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_LOGIN(void *pHost, INetData* poNetData)
{
	CG_LOGIN *pstOut = (CG_LOGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szPTID, sizeof(pstOut->szPTID), "PTID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nLoginDataLen, "LoginDataLen"))
		return -1;

   if (pstOut->nLoginDataLen > 64)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyLoginData, pstOut->nLoginDataLen, "LoginData"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szProtoVersion, sizeof(pstOut->szProtoVersion), "ProtoVersion"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMainVersion, "MainVersion"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSubVersion, "SubVersion"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuildVersion, "BuildVersion"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nResourceVersion, "ResourceVersion"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_LOGIN(const void *pHost, INetData* poNetData)
{
	const GC_LOGIN *pstIn = (const GC_LOGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szErrMsg, sizeof(pstIn->szErrMsg), "ErrMsg"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEncryptType, "EncryptType"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nLen, "Len"))
		return -1;

   if (pstIn->nLen > MAX_DYNCODE_LEN)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyDynCode, pstIn->nLen, "DynCode"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwQueueToken, "QueueToken"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLastEnterQueueToken, "LastEnterQueueToken"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_LOGIN(void *pHost, INetData* poNetData)
{
	GC_LOGIN *pstOut = (GC_LOGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szErrMsg, sizeof(pstOut->szErrMsg), "ErrMsg"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEncryptType, "EncryptType"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nLen, "Len"))
		return -1;

   if (pstOut->nLen > MAX_DYNCODE_LEN)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyDynCode, pstOut->nLen, "DynCode"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwQueueToken, "QueueToken"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLastEnterQueueToken, "LastEnterQueueToken"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_LOGOUT(const void *pHost, INetData* poNetData)
{
	const CG_LOGOUT *pstIn = (const CG_LOGOUT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_LOGOUT(void *pHost, INetData* poNetData)
{
	CG_LOGOUT *pstOut = (CG_LOGOUT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_LOGOUT(const void *pHost, INetData* poNetData)
{
	const GC_LOGOUT *pstIn = (const GC_LOGOUT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_LOGOUT(void *pHost, INetData* poNetData)
{
	GC_LOGOUT *pstOut = (GC_LOGOUT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_QUEUE_INFO(const void *pHost, INetData* poNetData)
{
	const GC_QUEUE_INFO *pstIn = (const GC_QUEUE_INFO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwLastPassToken, "LastPassToken"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPriority, "Priority"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_QUEUE_INFO(void *pHost, INetData* poNetData)
{
	GC_QUEUE_INFO *pstOut = (GC_QUEUE_INFO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwLastPassToken, "LastPassToken"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPriority, "Priority"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_ROLELIST(const void *pHost, INetData* poNetData)
{
	const GC_ROLELIST *pstIn = (const GC_ROLELIST*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLastSelect, "LastSelect"))
		return -1;

	int i;
	if ((int)pstIn->byCount > ACTIVE_ROLE_NUM || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < ACTIVE_ROLE_NUM; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == EncodeSRoleInfoWithEquip(&pstIn->astRoleInfoList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_ROLELIST(void *pHost, INetData* poNetData)
{
	GC_ROLELIST *pstOut = (GC_ROLELIST*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLastSelect, "LastSelect"))
		return -1;

	int i;
	if ((int)pstOut->byCount > ACTIVE_ROLE_NUM || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < ACTIVE_ROLE_NUM; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == DecodeSRoleInfoWithEquip(&pstOut->astRoleInfoList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_CREATEROLE(const void *pHost, INetData* poNetData)
{
	const CG_CREATEROLE *pstIn = (const CG_CREATEROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSRoleInfo(&pstIn->stRoleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwServerUniqueID, "ServerUniqueID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_CREATEROLE(void *pHost, INetData* poNetData)
{
	CG_CREATEROLE *pstOut = (CG_CREATEROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSRoleInfo(&pstOut->stRoleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwServerUniqueID, "ServerUniqueID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_CREATEROLE(const void *pHost, INetData* poNetData)
{
	const GC_CREATEROLE *pstIn = (const GC_CREATEROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == EncodeSRoleInfo(&pstIn->stRoleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szErrString, sizeof(pstIn->szErrString), "ErrString"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_CREATEROLE(void *pHost, INetData* poNetData)
{
	GC_CREATEROLE *pstOut = (GC_CREATEROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == DecodeSRoleInfo(&pstOut->stRoleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szErrString, sizeof(pstOut->szErrString), "ErrString"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_DELROLE(const void *pHost, INetData* poNetData)
{
	const CG_DELROLE *pstIn = (const CG_DELROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwRoleDBID, "RoleDBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_DELROLE(void *pHost, INetData* poNetData)
{
	CG_DELROLE *pstOut = (CG_DELROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwRoleDBID, "RoleDBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_DELROLE(const void *pHost, INetData* poNetData)
{
	const GC_DELROLE *pstIn = (const GC_DELROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_DELROLE(void *pHost, INetData* poNetData)
{
	GC_DELROLE *pstOut = (GC_DELROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_SELECTROLE(const void *pHost, INetData* poNetData)
{
	const CG_SELECTROLE *pstIn = (const CG_SELECTROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwRoleDBID, "RoleDBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_SELECTROLE(void *pHost, INetData* poNetData)
{
	CG_SELECTROLE *pstOut = (CG_SELECTROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwRoleDBID, "RoleDBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_SELECTROLE(const void *pHost, INetData* poNetData)
{
	const GC_SELECTROLE *pstIn = (const GC_SELECTROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szErrString, sizeof(pstIn->szErrString), "ErrString"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_SELECTROLE(void *pHost, INetData* poNetData)
{
	GC_SELECTROLE *pstOut = (GC_SELECTROLE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szErrString, sizeof(pstOut->szErrString), "ErrString"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_GPK_CLT_DYN_CODE(const void *pHost, INetData* poNetData)
{
	const GC_GPK_CLT_DYN_CODE *pstIn = (const GC_GPK_CLT_DYN_CODE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwCount, "Count"))
		return -1;

   if (pstIn->dwCount > 12288)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyCode, pstIn->dwCount, "Code"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_GPK_CLT_DYN_CODE(void *pHost, INetData* poNetData)
{
	GC_GPK_CLT_DYN_CODE *pstOut = (GC_GPK_CLT_DYN_CODE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwCount, "Count"))
		return -1;

   if (pstOut->dwCount > 12288)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyCode, pstOut->dwCount, "Code"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_GPK_CLT_NEGLECT(const void *pHost, INetData* poNetData)
{
	const CG_GPK_CLT_NEGLECT *pstIn = (const CG_GPK_CLT_NEGLECT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddBuf(pstIn->abyNothing, 196, "Nothing"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_GPK_CLT_NEGLECT(void *pHost, INetData* poNetData)
{
	CG_GPK_CLT_NEGLECT *pstOut = (CG_GPK_CLT_NEGLECT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelBuf(pstOut->abyNothing, 196, "Nothing"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGC_GPK_CAL_ORIGIN(const void *pHost, INetData* poNetData)
{
	const GC_GPK_CAL_ORIGIN *pstIn = (const GC_GPK_CAL_ORIGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddBuf(pstIn->abyOriginal, 24, "Original"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGC_GPK_CAL_ORIGIN(void *pHost, INetData* poNetData)
{
	GC_GPK_CAL_ORIGIN *pstOut = (GC_GPK_CAL_ORIGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelBuf(pstOut->abyOriginal, 24, "Original"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCG_GPK_CAL_RESULT(const void *pHost, INetData* poNetData)
{
	const CG_GPK_CAL_RESULT *pstIn = (const CG_GPK_CAL_RESULT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddBuf(pstIn->abyResult, 24, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCG_GPK_CAL_RESULT(void *pHost, INetData* poNetData)
{
	CG_GPK_CAL_RESULT *pstOut = (CG_GPK_CAL_RESULT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelBuf(pstOut->abyResult, 24, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_SERVERINFO_RPT(const void *pHost, INetData* poNetData)
{
	const GSPKG_SERVERINFO_RPT *pstIn = (const GSPKG_SERVERINFO_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwServerID, "ServerID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_SERVERINFO_RPT(void *pHost, INetData* poNetData)
{
	GSPKG_SERVERINFO_RPT *pstOut = (GSPKG_SERVERINFO_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwServerID, "ServerID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_SERVER_GROUP_DESC_RPT(const void *pHost, INetData* poNetData)
{
	const GSPKG_SERVER_GROUP_DESC_RPT *pstIn = (const GSPKG_SERVER_GROUP_DESC_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szGroupName, sizeof(pstIn->szGroupName), "GroupName"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_SERVER_GROUP_DESC_RPT(void *pHost, INetData* poNetData)
{
	GSPKG_SERVER_GROUP_DESC_RPT *pstOut = (GSPKG_SERVER_GROUP_DESC_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szGroupName, sizeof(pstOut->szGroupName), "GroupName"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_PLAYER_GPK_RPT(const void *pHost, INetData* poNetData)
{
	const GSPKG_PLAYER_GPK_RPT *pstIn = (const GSPKG_PLAYER_GPK_RPT*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_PLAYER_GPK_RPT(void *pHost, INetData* poNetData)
{
	GSPKG_PLAYER_GPK_RPT *pstOut = (GSPKG_PLAYER_GPK_RPT*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_ENTERGAME_REQ(const void *pHost, INetData* poNetData)
{
	const GSPKG_ENTERGAME_REQ *pstIn = (const GSPKG_ENTERGAME_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szPTID, sizeof(pstIn->szPTID), "PTID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwDigitID, "DigitID"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szAccountName, sizeof(pstIn->szAccountName), "AccountName"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwRoleId, "RoleId"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFlags, "Flags"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGmLevel, "GmLevel"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSessionID, "SessionID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSceneId, "SceneId"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnterType, "EnterType"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGateSvrID, "GateSvrID"))
		return -1;

	if(-1 == EncodeSLMAccountInfo(&pstIn->stAccountInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_ENTERGAME_REQ(void *pHost, INetData* poNetData)
{
	GSPKG_ENTERGAME_REQ *pstOut = (GSPKG_ENTERGAME_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szPTID, sizeof(pstOut->szPTID), "PTID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwDigitID, "DigitID"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szAccountName, sizeof(pstOut->szAccountName), "AccountName"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwRoleId, "RoleId"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFlags, "Flags"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGmLevel, "GmLevel"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSessionID, "SessionID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSceneId, "SceneId"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnterType, "EnterType"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGateSvrID, "GateSvrID"))
		return -1;

	if(-1 == DecodeSLMAccountInfo(&pstOut->stAccountInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_ENTERGAME_ACK(const void *pHost, INetData* poNetData)
{
	const GSPKG_ENTERGAME_ACK *pstIn = (const GSPKG_ENTERGAME_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFlags, "Flags"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_ENTERGAME_ACK(void *pHost, INetData* poNetData)
{
	GSPKG_ENTERGAME_ACK *pstOut = (GSPKG_ENTERGAME_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFlags, "Flags"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_LEAVEGAME_REQ(const void *pHost, INetData* poNetData)
{
	const GSPKG_LEAVEGAME_REQ *pstIn = (const GSPKG_LEAVEGAME_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_LEAVEGAME_REQ(void *pHost, INetData* poNetData)
{
	GSPKG_LEAVEGAME_REQ *pstOut = (GSPKG_LEAVEGAME_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_LEAVEGAME_ACK(const void *pHost, INetData* poNetData)
{
	const GSPKG_LEAVEGAME_ACK *pstIn = (const GSPKG_LEAVEGAME_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_LEAVEGAME_ACK(void *pHost, INetData* poNetData)
{
	GSPKG_LEAVEGAME_ACK *pstOut = (GSPKG_LEAVEGAME_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_SWITCHSCENE_REQ(const void *pHost, INetData* poNetData)
{
	const GSPKG_SWITCHSCENE_REQ *pstIn = (const GSPKG_SWITCHSCENE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSceneTemplateID, "SceneTemplateID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSceneID, "SceneID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_SWITCHSCENE_REQ(void *pHost, INetData* poNetData)
{
	GSPKG_SWITCHSCENE_REQ *pstOut = (GSPKG_SWITCHSCENE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSceneTemplateID, "SceneTemplateID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSceneID, "SceneID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_SWITCHSCENE_ACK(const void *pHost, INetData* poNetData)
{
	const GSPKG_SWITCHSCENE_ACK *pstIn = (const GSPKG_SWITCHSCENE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSceneTemplateID, "SceneTemplateID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSceneID, "SceneID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_SWITCHSCENE_ACK(void *pHost, INetData* poNetData)
{
	GSPKG_SWITCHSCENE_ACK *pstOut = (GSPKG_SWITCHSCENE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSceneTemplateID, "SceneTemplateID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSceneID, "SceneID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_KICKOUT_NTF(const void *pHost, INetData* poNetData)
{
	const GSPKG_KICKOUT_NTF *pstIn = (const GSPKG_KICKOUT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szErrString, sizeof(pstIn->szErrString), "ErrString"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_KICKOUT_NTF(void *pHost, INetData* poNetData)
{
	GSPKG_KICKOUT_NTF *pstOut = (GSPKG_KICKOUT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nErrCode, "ErrCode"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szErrString, sizeof(pstOut->szErrString), "ErrString"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_MSG_BROADCAST(const void *pHost, INetData* poNetData)
{
	const GSPKG_MSG_BROADCAST *pstIn = (const GSPKG_MSG_BROADCAST*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wIDCount, "IDCount"))
		return -1;

	int i;
	if((int)pstIn->wIDCount > TS_BROADCAST_ID_COUNT || pstIn->wIDCount < 0)
       return -1;
	for(i = 0; i < TS_BROADCAST_ID_COUNT; ++i)
	{
		if(i >= (int)pstIn->wIDCount)
			break;
		if(-1 == poNetData->AddWord(pstIn->awID[i], "ID"))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wMsgBufLen, "MsgBufLen"))
		return -1;

   if (pstIn->wMsgBufLen > TS_BROADCAST_MSG_SIZE)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyMsgBuf, pstIn->wMsgBufLen, "MsgBuf"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_MSG_BROADCAST(void *pHost, INetData* poNetData)
{
	GSPKG_MSG_BROADCAST *pstOut = (GSPKG_MSG_BROADCAST*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wIDCount, "IDCount"))
		return -1;

	int i;
	if ((int)pstOut->wIDCount > TS_BROADCAST_ID_COUNT || pstOut->wIDCount < 0)
       return -1;
	for(i = 0; i < TS_BROADCAST_ID_COUNT; ++i)
	{
		if(i >= (int)pstOut->wIDCount)
			break;
		if(-1 == poNetData->DelWord(pstOut->awID[i], "ID"))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wMsgBufLen, "MsgBufLen"))
		return -1;

   if (pstOut->wMsgBufLen > TS_BROADCAST_MSG_SIZE)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyMsgBuf, pstOut->wMsgBufLen, "MsgBuf"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_LOAD_GSDATA_NTF(const void *pHost, INetData* poNetData)
{
	const GSPKG_LOAD_GSDATA_NTF *pstIn = (const GSPKG_LOAD_GSDATA_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nCount, "Count"))
		return -1;

   if (pstIn->nCount > MAX_XMLDATA_COUNT)
		return -1;
	if(-1 == poNetData->AddBuf(pstIn->abyXmlData, pstIn->nCount, "XmlData"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_LOAD_GSDATA_NTF(void *pHost, INetData* poNetData)
{
	GSPKG_LOAD_GSDATA_NTF *pstOut = (GSPKG_LOAD_GSDATA_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nCount, "Count"))
		return -1;

   if (pstOut->nCount > MAX_XMLDATA_COUNT)
		return -1;
	if(-1 == poNetData->DelBuf(pstOut->abyXmlData, pstOut->nCount, "XmlData"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeGSPKG_UPDATEGMLEVEL_NTF(const void *pHost, INetData* poNetData)
{
	const GSPKG_UPDATEGMLEVEL_NTF *pstIn = (const GSPKG_UPDATEGMLEVEL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwDigitID, "DigitID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGMLevel, "GMLevel"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeGSPKG_UPDATEGMLEVEL_NTF(void *pHost, INetData* poNetData)
{
	GSPKG_UPDATEGMLEVEL_NTF *pstOut = (GSPKG_UPDATEGMLEVEL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwDigitID, "DigitID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGMLevel, "GMLevel"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ERROR_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ERROR_NTF *pstIn = (const SC_ERROR_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSError(&pstIn->stData, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ERROR_NTF(void *pHost, INetData* poNetData)
{
	SC_ERROR_NTF *pstOut = (SC_ERROR_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSError(&pstOut->stData, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_LEVEL_INFO(const void *pHost, INetData* poNetData)
{
	const SC_LEVEL_INFO *pstIn = (const SC_LEVEL_INFO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->dwCount > MAX_LEVEL_COUNT || pstIn->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_COUNT; ++i)
	{
		if(i >= (int)pstIn->dwCount)
			break;
		if(-1 == EncodeSLevelInfo(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwBattleCount, "BattleCount"))
		return -1;

	if ((int)pstIn->dwBattleCount > MAX_BATTLE_COUNT || pstIn->dwBattleCount < 0)
       return -1;
	for(i = 0; i < MAX_BATTLE_COUNT; ++i)
	{
		if(i >= (int)pstIn->dwBattleCount)
			break;
		if(-1 == EncodeSBattleInfo(&pstIn->astBtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwBoxCount, "BoxCount"))
		return -1;

	if((int)pstIn->dwBoxCount > MAX_BATTLE_BOX_COUNT || pstIn->dwBoxCount < 0)
       return -1;
	for(i = 0; i < MAX_BATTLE_BOX_COUNT; ++i)
	{
		if(i >= (int)pstIn->dwBoxCount)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwGotBattleBox[i], "GotBattleBox"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_LEVEL_INFO(void *pHost, INetData* poNetData)
{
	SC_LEVEL_INFO *pstOut = (SC_LEVEL_INFO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->dwCount > MAX_LEVEL_COUNT || pstOut->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_COUNT; ++i)
	{
		if(i >= (int)pstOut->dwCount)
			break;
		if(-1 == DecodeSLevelInfo(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwBattleCount, "BattleCount"))
		return -1;

	if ((int)pstOut->dwBattleCount > MAX_BATTLE_COUNT || pstOut->dwBattleCount < 0)
       return -1;
	for(i = 0; i < MAX_BATTLE_COUNT; ++i)
	{
		if(i >= (int)pstOut->dwBattleCount)
			break;
		if(-1 == DecodeSBattleInfo(&pstOut->astBtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwBoxCount, "BoxCount"))
		return -1;

	if ((int)pstOut->dwBoxCount > MAX_BATTLE_BOX_COUNT || pstOut->dwBoxCount < 0)
       return -1;
	for(i = 0; i < MAX_BATTLE_BOX_COUNT; ++i)
	{
		if(i >= (int)pstOut->dwBoxCount)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwGotBattleBox[i], "GotBattleBox"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_LEVEL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_LEVEL_REQ *pstIn = (const CS_LEVEL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byLevelBattleType, "LevelBattleType"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevelID, "LevelID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuffID, "BuffID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwAbyssDBID, "AbyssDBID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFriendPetID, "FriendPetID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuickEnd, "QuickEnd"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_LEVEL_REQ(void *pHost, INetData* poNetData)
{
	CS_LEVEL_REQ *pstOut = (CS_LEVEL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byLevelBattleType, "LevelBattleType"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevelID, "LevelID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuffID, "BuffID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwAbyssDBID, "AbyssDBID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFriendPetID, "FriendPetID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuickEnd, "QuickEnd"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_BATTLE_BOX_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_BATTLE_BOX_REQ *pstIn = (const CS_GET_BATTLE_BOX_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwBattleboxID, "BattleboxID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_BATTLE_BOX_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_BATTLE_BOX_REQ *pstOut = (CS_GET_BATTLE_BOX_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwBattleboxID, "BattleboxID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_BATTLE_BOX_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_BATTLE_BOX_ACK *pstIn = (const SC_GET_BATTLE_BOX_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwBattleboxID, "BattleboxID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_BATTLE_BOX_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_BATTLE_BOX_ACK *pstOut = (SC_GET_BATTLE_BOX_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwBattleboxID, "BattleboxID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_BATTLE_GOT_STAR_NTF(const void *pHost, INetData* poNetData)
{
	const SC_BATTLE_GOT_STAR_NTF *pstIn = (const SC_BATTLE_GOT_STAR_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwBattleID, "BattleID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGotStar, "GotStar"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_BATTLE_GOT_STAR_NTF(void *pHost, INetData* poNetData)
{
	SC_BATTLE_GOT_STAR_NTF *pstOut = (SC_BATTLE_GOT_STAR_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwBattleID, "BattleID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGotStar, "GotStar"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSDropInfo(const void *pHost, INetData* poNetData)
{
	const SDropInfo *pstIn = (const SDropInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwTemplateID, "TemplateID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSDropInfo(void *pHost, INetData* poNetData)
{
	SDropInfo *pstOut = (SDropInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwTemplateID, "TemplateID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSDropInfoList(const void *pHost, INetData* poNetData)
{
	const SDropInfoList *pstIn = (const SDropInfoList*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > MAX_ITEM_COUNT || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < MAX_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSDropInfo(&pstIn->astList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSDropInfoList(void *pHost, INetData* poNetData)
{
	SDropInfoList *pstOut = (SDropInfoList*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > MAX_ITEM_COUNT || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < MAX_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSDropInfo(&pstOut->astList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSDropInfos(const void *pHost, INetData* poNetData)
{
	const SDropInfos *pstIn = (const SDropInfos*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > MAX_MONSTER_DROP || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < MAX_MONSTER_DROP; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSDropInfo(&pstIn->astList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwMoney, "Money"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSDropInfos(void *pHost, INetData* poNetData)
{
	SDropInfos *pstOut = (SDropInfos*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > MAX_MONSTER_DROP || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < MAX_MONSTER_DROP; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSDropInfo(&pstOut->astList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwMoney, "Money"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSMonsterInfo(const void *pHost, INetData* poNetData)
{
	const SMonsterInfo *pstIn = (const SMonsterInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwIndex, "Index"))
		return -1;

	if(-1 == EncodeSDropInfos(&pstIn->stDrop, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSMonsterInfo(void *pHost, INetData* poNetData)
{
	SMonsterInfo *pstOut = (SMonsterInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwIndex, "Index"))
		return -1;

	if(-1 == DecodeSDropInfos(&pstOut->stDrop, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSMonsterInfos(const void *pHost, INetData* poNetData)
{
	const SMonsterInfos *pstIn = (const SMonsterInfos*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > MAX_MONSTER_IN_LEVEL || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < MAX_MONSTER_IN_LEVEL; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSMonsterInfo(&pstIn->astList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSMonsterInfos(void *pHost, INetData* poNetData)
{
	SMonsterInfos *pstOut = (SMonsterInfos*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > MAX_MONSTER_IN_LEVEL || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < MAX_MONSTER_IN_LEVEL; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSMonsterInfo(&pstOut->astList[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_LEVEL_ACK(const void *pHost, INetData* poNetData)
{
	const SC_LEVEL_ACK *pstIn = (const SC_LEVEL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byLevelBattleType, "LevelBattleType"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAbyssLevelID, "AbyssLevelID"))
		return -1;

	if(-1 == EncodeSMonsterInfos(&pstIn->stMonster, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeReliveCount, "FreeReliveCount"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRelivePrice, "RelivePrice"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wInitialBuffCount, "InitialBuffCount"))
		return -1;

	int i;
	for(i = 0; i < MAX_INITIAL_BUFF_COUNT; ++i)
	{
		if(-1 == poNetData->AddDword(pstIn->adwInitialBuffID[i], "InitialBuffID"))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byQuickEnd, "QuickEnd"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_LEVEL_ACK(void *pHost, INetData* poNetData)
{
	SC_LEVEL_ACK *pstOut = (SC_LEVEL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byLevelBattleType, "LevelBattleType"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAbyssLevelID, "AbyssLevelID"))
		return -1;

	if(-1 == DecodeSMonsterInfos(&pstOut->stMonster, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeReliveCount, "FreeReliveCount"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRelivePrice, "RelivePrice"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wInitialBuffCount, "InitialBuffCount"))
		return -1;

	int i;
	for(i = 0; i < MAX_INITIAL_BUFF_COUNT; ++i)
	{
		if(-1 == poNetData->DelDword(pstOut->adwInitialBuffID[i], "InitialBuffID"))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byQuickEnd, "QuickEnd"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSSkillCount(const void *pHost, INetData* poNetData)
{
	const SSkillCount *pstIn = (const SSkillCount*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSkillID, "SkillID"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSSkillCount(void *pHost, INetData* poNetData)
{
	SSkillCount *pstOut = (SSkillCount*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSkillID, "SkillID"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_LEVEL_RESULT_NTF(const void *pHost, INetData* poNetData)
{
	const CS_LEVEL_RESULT_NTF *pstIn = (const CS_LEVEL_RESULT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byLevelBattleType, "LevelBattleType"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMoney, "Money"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemCount, "ItemCount"))
		return -1;

	int i;
	if ((int)pstIn->wItemCount > MAX_LEVEL_DROP || pstIn->wItemCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_DROP; ++i)
	{
		if(i >= (int)pstIn->wItemCount)
			break;
		if(-1 == EncodeSDropInfo(&pstIn->astItem[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wReliveCount, "ReliveCount"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKillCount, "KillCount"))
		return -1;

	if((int)pstIn->wKillCount > MAX_MONSTER_IN_LEVEL || pstIn->wKillCount < 0)
       return -1;
	for(i = 0; i < MAX_MONSTER_IN_LEVEL; ++i)
	{
		if(i >= (int)pstIn->wKillCount)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwKills[i], "Kills"))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwMaxCombo, "MaxCombo"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCritical, "Critical"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSkillCount, "SkillCount"))
		return -1;

	if ((int)pstIn->wSkillCount > 100 || pstIn->wSkillCount < 0)
       return -1;
	for(i = 0; i < 100; ++i)
	{
		if(i >= (int)pstIn->wSkillCount)
			break;
		if(-1 == EncodeSSkillCount(&pstIn->astSkills[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byCompleteResult, "CompleteResult"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nActivityAbyssTotalDamage, "ActivityAbyssTotalDamage"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCompleteSec, "CompleteSec"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPetChangeTimes, "PetChangeTimes"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_LEVEL_RESULT_NTF(void *pHost, INetData* poNetData)
{
	CS_LEVEL_RESULT_NTF *pstOut = (CS_LEVEL_RESULT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byLevelBattleType, "LevelBattleType"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMoney, "Money"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemCount, "ItemCount"))
		return -1;

	int i;
	if ((int)pstOut->wItemCount > MAX_LEVEL_DROP || pstOut->wItemCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_DROP; ++i)
	{
		if(i >= (int)pstOut->wItemCount)
			break;
		if(-1 == DecodeSDropInfo(&pstOut->astItem[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wReliveCount, "ReliveCount"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKillCount, "KillCount"))
		return -1;

	if ((int)pstOut->wKillCount > MAX_MONSTER_IN_LEVEL || pstOut->wKillCount < 0)
       return -1;
	for(i = 0; i < MAX_MONSTER_IN_LEVEL; ++i)
	{
		if(i >= (int)pstOut->wKillCount)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwKills[i], "Kills"))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwMaxCombo, "MaxCombo"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCritical, "Critical"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSkillCount, "SkillCount"))
		return -1;

	if ((int)pstOut->wSkillCount > 100 || pstOut->wSkillCount < 0)
       return -1;
	for(i = 0; i < 100; ++i)
	{
		if(i >= (int)pstOut->wSkillCount)
			break;
		if(-1 == DecodeSSkillCount(&pstOut->astSkills[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byCompleteResult, "CompleteResult"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nActivityAbyssTotalDamage, "ActivityAbyssTotalDamage"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCompleteSec, "CompleteSec"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPetChangeTimes, "PetChangeTimes"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSLevelSelectCardInfo(const void *pHost, INetData* poNetData)
{
	const SLevelSelectCardInfo *pstIn = (const SLevelSelectCardInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byIndexID, "IndexID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwItemID, "ItemID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSLevelSelectCardInfo(void *pHost, INetData* poNetData)
{
	SLevelSelectCardInfo *pstOut = (SLevelSelectCardInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byIndexID, "IndexID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwItemID, "ItemID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_TREASURE_CHEST_NTF(const void *pHost, INetData* poNetData)
{
	const SC_TREASURE_CHEST_NTF *pstIn = (const SC_TREASURE_CHEST_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwLevelID, "LevelID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurGetStar, "CurGetStar"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuickEnd, "QuickEnd"))
		return -1;

	if(-1 == EncodeSXITEMS(&pstIn->stItems, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMoney, "Money"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience, "Experience"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPetAboutCount, "PetAboutCount"))
		return -1;

	int i;
	if((int)pstIn->wPetAboutCount > MAX_PET_COUNT || pstIn->wPetAboutCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_COUNT; ++i)
	{
		if(i >= (int)pstIn->wPetAboutCount)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwPetAbout[i], "PetAbout"))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byGetCount, "GetCount"))
		return -1;

	if ((int)pstIn->byGetCount > MAX_LEVEL_SELECT_CARD_COUNT || pstIn->byGetCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_SELECT_CARD_COUNT; ++i)
	{
		if(i >= (int)pstIn->byGetCount)
			break;
		if(-1 == EncodeSLevelSelectCardInfo(&pstIn->astCardInfos[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byTempCount, "TempCount"))
		return -1;

	if ((int)pstIn->byTempCount > MAX_LEVEL_SELECT_CARD_COUNT || pstIn->byTempCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_SELECT_CARD_COUNT; ++i)
	{
		if(i >= (int)pstIn->byTempCount)
			break;
		if(-1 == EncodeSLevelSelectCardInfo(&pstIn->astTempCardInfos[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_TREASURE_CHEST_NTF(void *pHost, INetData* poNetData)
{
	SC_TREASURE_CHEST_NTF *pstOut = (SC_TREASURE_CHEST_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwLevelID, "LevelID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurGetStar, "CurGetStar"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuickEnd, "QuickEnd"))
		return -1;

	if(-1 == DecodeSXITEMS(&pstOut->stItems, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMoney, "Money"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience, "Experience"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPetAboutCount, "PetAboutCount"))
		return -1;

	int i;
	if ((int)pstOut->wPetAboutCount > MAX_PET_COUNT || pstOut->wPetAboutCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_COUNT; ++i)
	{
		if(i >= (int)pstOut->wPetAboutCount)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwPetAbout[i], "PetAbout"))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byGetCount, "GetCount"))
		return -1;

	if ((int)pstOut->byGetCount > MAX_LEVEL_SELECT_CARD_COUNT || pstOut->byGetCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_SELECT_CARD_COUNT; ++i)
	{
		if(i >= (int)pstOut->byGetCount)
			break;
		if(-1 == DecodeSLevelSelectCardInfo(&pstOut->astCardInfos[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byTempCount, "TempCount"))
		return -1;

	if ((int)pstOut->byTempCount > MAX_LEVEL_SELECT_CARD_COUNT || pstOut->byTempCount < 0)
       return -1;
	for(i = 0; i < MAX_LEVEL_SELECT_CARD_COUNT; ++i)
	{
		if(i >= (int)pstOut->byTempCount)
			break;
		if(-1 == DecodeSLevelSelectCardInfo(&pstOut->astTempCardInfos[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_OPEN_TREASURE_CHEST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_OPEN_TREASURE_CHEST_REQ *pstIn = (const CS_OPEN_TREASURE_CHEST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byItemIndexID, "ItemIndexID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_OPEN_TREASURE_CHEST_REQ(void *pHost, INetData* poNetData)
{
	CS_OPEN_TREASURE_CHEST_REQ *pstOut = (CS_OPEN_TREASURE_CHEST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byItemIndexID, "ItemIndexID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_OPEN_TREASURE_CHEST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_OPEN_TREASURE_CHEST_ACK *pstIn = (const SC_OPEN_TREASURE_CHEST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byItemIndexID, "ItemIndexID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_OPEN_TREASURE_CHEST_ACK(void *pHost, INetData* poNetData)
{
	SC_OPEN_TREASURE_CHEST_ACK *pstOut = (SC_OPEN_TREASURE_CHEST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byItemIndexID, "ItemIndexID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_LOADSCENE(const void *pHost, INetData* poNetData)
{
	const SC_SELF_LOADSCENE *pstIn = (const SC_SELF_LOADSCENE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSceneId, "SceneId"))
		return -1;

	if(-1 == EncodeSPosInfo(&pstIn->stEnterPos, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTime, "Time"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSceneType, "SceneType"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_LOADSCENE(void *pHost, INetData* poNetData)
{
	SC_SELF_LOADSCENE *pstOut = (SC_SELF_LOADSCENE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSceneId, "SceneId"))
		return -1;

	if(-1 == DecodeSPosInfo(&pstOut->stEnterPos, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTime, "Time"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSceneType, "SceneType"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ENTERSCENE(const void *pHost, INetData* poNetData)
{
	const CS_ENTERSCENE *pstIn = (const CS_ENTERSCENE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwError, "Error"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSceneId, "SceneId"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ENTERSCENE(void *pHost, INetData* poNetData)
{
	CS_ENTERSCENE *pstOut = (CS_ENTERSCENE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwError, "Error"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSceneId, "SceneId"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_ENTERSCENE(const void *pHost, INetData* poNetData)
{
	const SC_SELF_ENTERSCENE *pstIn = (const SC_SELF_ENTERSCENE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byFlag, "Flag"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byError, "Error"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwServerTime, "ServerTime"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_ENTERSCENE(void *pHost, INetData* poNetData)
{
	SC_SELF_ENTERSCENE *pstOut = (SC_SELF_ENTERSCENE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byFlag, "Flag"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byError, "Error"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwServerTime, "ServerTime"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_DATA_END(const void *pHost, INetData* poNetData)
{
	const SC_SELF_DATA_END *pstIn = (const SC_SELF_DATA_END*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_DATA_END(void *pHost, INetData* poNetData)
{
	SC_SELF_DATA_END *pstOut = (SC_SELF_DATA_END*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_APPEAR(const void *pHost, INetData* poNetData)
{
	const SC_SELF_APPEAR *pstIn = (const SC_SELF_APPEAR*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSPosInfo(&pstIn->stEnterPos, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_APPEAR(void *pHost, INetData* poNetData)
{
	SC_SELF_APPEAR *pstOut = (SC_SELF_APPEAR*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSPosInfo(&pstOut->stEnterPos, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_VOLATILE_PRO(const void *pHost, INetData* poNetData)
{
	const SC_SELF_VOLATILE_PRO *pstIn = (const SC_SELF_VOLATILE_PRO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nLevel, "Level"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNonMoney, "NonMoney"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNonCash, "NonCash"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCash, "Cash"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nEP, "EP"))
		return -1;

	if(-1 == poNetData->AddInt64(pstIn->llExperience, "Experience"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAP, "AP"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_VOLATILE_PRO(void *pHost, INetData* poNetData)
{
	SC_SELF_VOLATILE_PRO *pstOut = (SC_SELF_VOLATILE_PRO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nLevel, "Level"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNonMoney, "NonMoney"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNonCash, "NonCash"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCash, "Cash"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nEP, "EP"))
		return -1;

	if(-1 == poNetData->DelInt64(pstOut->llExperience, "Experience"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAP, "AP"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_CLIENT_CONFIG_NTF(const void *pHost, INetData* poNetData)
{
	const SC_CLIENT_CONFIG_NTF *pstIn = (const SC_CLIENT_CONFIG_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szConfigInfo, sizeof(pstIn->szConfigInfo), "ConfigInfo"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_CLIENT_CONFIG_NTF(void *pHost, INetData* poNetData)
{
	SC_CLIENT_CONFIG_NTF *pstOut = (SC_CLIENT_CONFIG_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szConfigInfo, sizeof(pstOut->szConfigInfo), "ConfigInfo"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_CLIENT_CONFIG_UPDATE(const void *pHost, INetData* poNetData)
{
	const CS_CLIENT_CONFIG_UPDATE *pstIn = (const CS_CLIENT_CONFIG_UPDATE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szConfigInfo, sizeof(pstIn->szConfigInfo), "ConfigInfo"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_CLIENT_CONFIG_UPDATE(void *pHost, INetData* poNetData)
{
	CS_CLIENT_CONFIG_UPDATE *pstOut = (CS_CLIENT_CONFIG_UPDATE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szConfigInfo, sizeof(pstOut->szConfigInfo), "ConfigInfo"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_BASE_PRO(const void *pHost, INetData* poNetData)
{
	const SC_SELF_BASE_PRO *pstIn = (const SC_SELF_BASE_PRO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwObjID, "ObjID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nRoleIndex, "RoleIndex"))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szName, sizeof(pstIn->szName), "Name"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nLevel, "Level"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBaseJob, "BaseJob"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJob, "Job"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySex, "Sex"))
		return -1;

	if(-1 == poNetData->AddInt64(pstIn->llExperience, "Experience"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNonMoney, "NonMoney"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNonCash, "NonCash"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCash, "Cash"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHP, "HP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSP, "SP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nEP, "EP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMoveSpeed, "MoveSpeed"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAttSpeed, "AttSpeed"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nStr, "Str"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nInt, "Int"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDex, "Dex"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSta, "Sta"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFai, "Fai"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxHP, "MaxHP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxSP, "MaxSP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHPTick, "HPTick"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSPTick, "SPTick"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAtkDmgMin, "AtkDmgMin"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAtkDmgMax, "AtkDmgMax"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDef, "Def"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nIceAtt, "IceAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFireAtt, "FireAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPoisonAtt, "PoisonAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nThunderAtt, "ThunderAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nIceDef, "IceDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFireDef, "FireDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPoisonDef, "PoisonDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nThunderDef, "ThunderDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPierce, "Pierce"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHit, "Hit"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDodge, "Dodge"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCri, "Cri"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFlex, "Flex"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCriDmg, "CriDmg"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCriDmgDef, "CriDmgDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBodySize, "BodySize"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAttSize, "AttSize"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAttSpeedModPer, "AttSpeedModPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMoveSpeedModPer, "MoveSpeedModPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPiercePer, "PiercePer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHitPer, "HitPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDodgePer, "DodgePer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCriPer, "CriPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFlexPer, "FlexPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxEP, "MaxEP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAP, "AP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxAP, "MaxAP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nExpPer, "ExpPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMoneyPer, "MoneyPer"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_BASE_PRO(void *pHost, INetData* poNetData)
{
	SC_SELF_BASE_PRO *pstOut = (SC_SELF_BASE_PRO*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwObjID, "ObjID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nRoleIndex, "RoleIndex"))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szName, sizeof(pstOut->szName), "Name"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nLevel, "Level"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBaseJob, "BaseJob"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJob, "Job"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySex, "Sex"))
		return -1;

	if(-1 == poNetData->DelInt64(pstOut->llExperience, "Experience"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNonMoney, "NonMoney"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNonCash, "NonCash"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCash, "Cash"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHP, "HP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSP, "SP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nEP, "EP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMoveSpeed, "MoveSpeed"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAttSpeed, "AttSpeed"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nStr, "Str"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nInt, "Int"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDex, "Dex"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSta, "Sta"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFai, "Fai"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxHP, "MaxHP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxSP, "MaxSP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHPTick, "HPTick"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSPTick, "SPTick"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAtkDmgMin, "AtkDmgMin"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAtkDmgMax, "AtkDmgMax"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDef, "Def"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nIceAtt, "IceAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFireAtt, "FireAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPoisonAtt, "PoisonAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nThunderAtt, "ThunderAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nIceDef, "IceDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFireDef, "FireDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPoisonDef, "PoisonDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nThunderDef, "ThunderDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPierce, "Pierce"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHit, "Hit"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDodge, "Dodge"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCri, "Cri"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFlex, "Flex"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCriDmg, "CriDmg"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCriDmgDef, "CriDmgDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBodySize, "BodySize"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAttSize, "AttSize"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAttSpeedModPer, "AttSpeedModPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMoveSpeedModPer, "MoveSpeedModPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPiercePer, "PiercePer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHitPer, "HitPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDodgePer, "DodgePer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCriPer, "CriPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFlexPer, "FlexPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxEP, "MaxEP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAP, "AP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxAP, "MaxAP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nExpPer, "ExpPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMoneyPer, "MoneyPer"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSPetInfo(const void *pHost, INetData* poNetData)
{
	const SPetInfo *pstIn = (const SPetInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBattlePos, "BattlePos"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTemplateID, "TemplateID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nLevel, "Level"))
		return -1;

	if(-1 == poNetData->AddInt64(pstIn->llExperience, "Experience"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nUp, "Up"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nLock, "Lock"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHP, "HP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSP, "SP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nStr, "Str"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nInt, "Int"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDex, "Dex"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSta, "Sta"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFai, "Fai"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxHP, "MaxHP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxSP, "MaxSP"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHPTick, "HPTick"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nSPTick, "SPTick"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAtkDmgMin, "AtkDmgMin"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAtkDmgMax, "AtkDmgMax"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDef, "Def"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nIceAtt, "IceAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFireAtt, "FireAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPoisonAtt, "PoisonAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nThunderAtt, "ThunderAtt"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nIceDef, "IceDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFireDef, "FireDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPoisonDef, "PoisonDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nThunderDef, "ThunderDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPierce, "Pierce"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHit, "Hit"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDodge, "Dodge"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCri, "Cri"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFlex, "Flex"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCriDmg, "CriDmg"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCriDmgDef, "CriDmgDef"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBodySize, "BodySize"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAttSize, "AttSize"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAttSpeedModPer, "AttSpeedModPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMoveSpeedModPer, "MoveSpeedModPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPiercePer, "PiercePer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nHitPer, "HitPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDodgePer, "DodgePer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCriPer, "CriPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFlexPer, "FlexPer"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAttSpeed, "AttSpeed"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMoveSpeed, "MoveSpeed"))
		return -1;

	if(-1 == EncodeSXITEMS(&pstIn->stEquip, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSPetInfo(void *pHost, INetData* poNetData)
{
	SPetInfo *pstOut = (SPetInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBattlePos, "BattlePos"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTemplateID, "TemplateID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nLevel, "Level"))
		return -1;

	if(-1 == poNetData->DelInt64(pstOut->llExperience, "Experience"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nUp, "Up"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nLock, "Lock"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHP, "HP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSP, "SP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nStr, "Str"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nInt, "Int"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDex, "Dex"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSta, "Sta"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFai, "Fai"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxHP, "MaxHP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxSP, "MaxSP"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHPTick, "HPTick"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nSPTick, "SPTick"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAtkDmgMin, "AtkDmgMin"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAtkDmgMax, "AtkDmgMax"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDef, "Def"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nIceAtt, "IceAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFireAtt, "FireAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPoisonAtt, "PoisonAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nThunderAtt, "ThunderAtt"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nIceDef, "IceDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFireDef, "FireDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPoisonDef, "PoisonDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nThunderDef, "ThunderDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPierce, "Pierce"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHit, "Hit"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDodge, "Dodge"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCri, "Cri"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFlex, "Flex"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCriDmg, "CriDmg"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCriDmgDef, "CriDmgDef"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBodySize, "BodySize"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAttSize, "AttSize"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAttSpeedModPer, "AttSpeedModPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMoveSpeedModPer, "MoveSpeedModPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPiercePer, "PiercePer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nHitPer, "HitPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDodgePer, "DodgePer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCriPer, "CriPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFlexPer, "FlexPer"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAttSpeed, "AttSpeed"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMoveSpeed, "MoveSpeed"))
		return -1;

	if(-1 == DecodeSXITEMS(&pstOut->stEquip, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodePET_RECORD(const void *pHost, INetData* poNetData)
{
	const PET_RECORD *pstIn = (const PET_RECORD*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTID, "TID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodePET_RECORD(void *pHost, INetData* poNetData)
{
	PET_RECORD *pstOut = (PET_RECORD*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTID, "TID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PETS_RECORD_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PETS_RECORD_NTF *pstIn = (const SC_PETS_RECORD_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wPetRecordCount, "PetRecordCount"))
		return -1;

	int i;
	if ((int)pstIn->wPetRecordCount > MAX_PET_RECORD_COUNT || pstIn->wPetRecordCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_RECORD_COUNT; ++i)
	{
		if(i >= (int)pstIn->wPetRecordCount)
			break;
		if(-1 == EncodePET_RECORD(&pstIn->astRecord[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PETS_RECORD_NTF(void *pHost, INetData* poNetData)
{
	SC_PETS_RECORD_NTF *pstOut = (SC_PETS_RECORD_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wPetRecordCount, "PetRecordCount"))
		return -1;

	int i;
	if ((int)pstOut->wPetRecordCount > MAX_PET_RECORD_COUNT || pstOut->wPetRecordCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_RECORD_COUNT; ++i)
	{
		if(i >= (int)pstOut->wPetRecordCount)
			break;
		if(-1 == DecodePET_RECORD(&pstOut->astRecord[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_USER_PETS_NTF(const void *pHost, INetData* poNetData)
{
	const SC_USER_PETS_NTF *pstIn = (const SC_USER_PETS_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nMaxPetCount, "MaxPetCount"))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPetCount, "PetCount"))
		return -1;

	int i;
	if ((int)pstIn->wPetCount > MAX_PET_COUNT || pstIn->wPetCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_COUNT; ++i)
	{
		if(i >= (int)pstIn->wPetCount)
			break;
		if(-1 == EncodeSPetInfo(&pstIn->astPetsInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_USER_PETS_NTF(void *pHost, INetData* poNetData)
{
	SC_USER_PETS_NTF *pstOut = (SC_USER_PETS_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nMaxPetCount, "MaxPetCount"))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPetCount, "PetCount"))
		return -1;

	int i;
	if ((int)pstOut->wPetCount > MAX_PET_COUNT || pstOut->wPetCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_COUNT; ++i)
	{
		if(i >= (int)pstOut->wPetCount)
			break;
		if(-1 == DecodeSPetInfo(&pstOut->astPetsInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_USER_JOIN_PETS(const void *pHost, INetData* poNetData)
{
	const SC_USER_JOIN_PETS *pstIn = (const SC_USER_JOIN_PETS*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wPetCount, "PetCount"))
		return -1;

	int i;
	if ((int)pstIn->wPetCount > PET_BTPOS_TEAM || pstIn->wPetCount < 0)
       return -1;
	for(i = 0; i < PET_BTPOS_TEAM; ++i)
	{
		if(i >= (int)pstIn->wPetCount)
			break;
		if(-1 == EncodeSPetInfo(&pstIn->astPetsInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_USER_JOIN_PETS(void *pHost, INetData* poNetData)
{
	SC_USER_JOIN_PETS *pstOut = (SC_USER_JOIN_PETS*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wPetCount, "PetCount"))
		return -1;

	int i;
	if ((int)pstOut->wPetCount > PET_BTPOS_TEAM || pstOut->wPetCount < 0)
       return -1;
	for(i = 0; i < PET_BTPOS_TEAM; ++i)
	{
		if(i >= (int)pstOut->wPetCount)
			break;
		if(-1 == DecodeSPetInfo(&pstOut->astPetsInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_INFO_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_INFO_NTF *pstIn = (const SC_PET_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSPetInfo(&pstIn->stPetInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_INFO_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_INFO_NTF *pstOut = (SC_PET_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSPetInfo(&pstOut->stPetInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_SINGLE_ENTER_NTF *pstIn = (const SC_PET_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSPetInfo(&pstIn->stPetInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_SINGLE_ENTER_NTF *pstOut = (SC_PET_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSPetInfo(&pstOut->stPetInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_SINGLE_LEAVE_NTF *pstIn = (const SC_PET_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_SINGLE_LEAVE_NTF *pstOut = (SC_PET_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GATHER_ITEM(const void *pHost, INetData* poNetData)
{
	const SC_GATHER_ITEM *pstIn = (const SC_GATHER_ITEM*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nID, "ID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCT, "CT"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GATHER_ITEM(void *pHost, INetData* poNetData)
{
	SC_GATHER_ITEM *pstOut = (SC_GATHER_ITEM*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nID, "ID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCT, "CT"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GATHER_INFO_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GATHER_INFO_NTF *pstIn = (const SC_GATHER_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->nCount > MAX_GATHER_ITEM_COUNT || pstIn->nCount < 0)
       return -1;
	for(i = 0; i < MAX_GATHER_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstIn->nCount)
			break;
		if(-1 == EncodeSC_GATHER_ITEM(&pstIn->astGathers[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GATHER_INFO_NTF(void *pHost, INetData* poNetData)
{
	SC_GATHER_INFO_NTF *pstOut = (SC_GATHER_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->nCount > MAX_GATHER_ITEM_COUNT || pstOut->nCount < 0)
       return -1;
	for(i = 0; i < MAX_GATHER_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstOut->nCount)
			break;
		if(-1 == DecodeSC_GATHER_ITEM(&pstOut->astGathers[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GATHER_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GATHER_SINGLE_ENTER_NTF *pstIn = (const SC_GATHER_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nID, "ID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCT, "CT"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GATHER_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData)
{
	SC_GATHER_SINGLE_ENTER_NTF *pstOut = (SC_GATHER_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nID, "ID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCT, "CT"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GATHER_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GATHER_SINGLE_LEAVE_NTF *pstIn = (const SC_GATHER_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nID, "ID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GATHER_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData)
{
	SC_GATHER_SINGLE_LEAVE_NTF *pstOut = (SC_GATHER_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nID, "ID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GATHER_ITEM_MERGE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GATHER_ITEM_MERGE_REQ *pstIn = (const CS_GATHER_ITEM_MERGE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTID, "TID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GATHER_ITEM_MERGE_REQ(void *pHost, INetData* poNetData)
{
	CS_GATHER_ITEM_MERGE_REQ *pstOut = (CS_GATHER_ITEM_MERGE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTID, "TID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GATHER_ITEM_MERGE_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GATHER_ITEM_MERGE_ACK *pstIn = (const SC_GATHER_ITEM_MERGE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTID, "TID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GATHER_ITEM_MERGE_ACK(void *pHost, INetData* poNetData)
{
	SC_GATHER_ITEM_MERGE_ACK *pstOut = (SC_GATHER_ITEM_MERGE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTID, "TID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_PROD_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_PROD_REQ *pstIn = (const CS_ROLE_PROD_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->nCount > MAX_PROD_ITEM_COUNT || pstIn->nCount < 0)
       return -1;
	for(i = 0; i < MAX_PROD_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstIn->nCount)
			break;
		if(-1 == poNetData->AddUint64(pstIn->aqwOtherDBID[i], "OtherDBID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_PROD_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_PROD_REQ *pstOut = (CS_ROLE_PROD_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->nCount > MAX_PROD_ITEM_COUNT || pstOut->nCount < 0)
       return -1;
	for(i = 0; i < MAX_PROD_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstOut->nCount)
			break;
		if(-1 == poNetData->DelUint64(pstOut->aqwOtherDBID[i], "OtherDBID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_PROD_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_PROD_ACK *pstIn = (const SC_ROLE_PROD_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSXITEMS(&pstIn->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_PROD_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_PROD_ACK *pstOut = (SC_ROLE_PROD_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSXITEMS(&pstOut->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PET_GET_EXP_RPT(const void *pHost, INetData* poNetData)
{
	const CS_PET_GET_EXP_RPT *pstIn = (const CS_PET_GET_EXP_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwOwnerDBID, "OwnerDBID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nOtherCount, "OtherCount"))
		return -1;

	int i;
	if((int)pstIn->nOtherCount > MAX_PET_COUNT || pstIn->nOtherCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_COUNT; ++i)
	{
		if(i >= (int)pstIn->nOtherCount)
			break;
		if(-1 == poNetData->AddUint64(pstIn->aqwOtherDBID[i], "OtherDBID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PET_GET_EXP_RPT(void *pHost, INetData* poNetData)
{
	CS_PET_GET_EXP_RPT *pstOut = (CS_PET_GET_EXP_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwOwnerDBID, "OwnerDBID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nOtherCount, "OtherCount"))
		return -1;

	int i;
	if ((int)pstOut->nOtherCount > MAX_PET_COUNT || pstOut->nOtherCount < 0)
       return -1;
	for(i = 0; i < MAX_PET_COUNT; ++i)
	{
		if(i >= (int)pstOut->nOtherCount)
			break;
		if(-1 == poNetData->DelUint64(pstOut->aqwOtherDBID[i], "OtherDBID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_GET_EXP_ACK(const void *pHost, INetData* poNetData)
{
	const SC_PET_GET_EXP_ACK *pstIn = (const SC_PET_GET_EXP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwOwnerDBID, "OwnerDBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_GET_EXP_ACK(void *pHost, INetData* poNetData)
{
	SC_PET_GET_EXP_ACK *pstOut = (SC_PET_GET_EXP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwOwnerDBID, "OwnerDBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_LEVEL_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_LEVEL_NTF *pstIn = (const SC_PET_LEVEL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nLevel, "Level"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_LEVEL_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_LEVEL_NTF *pstOut = (SC_PET_LEVEL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nLevel, "Level"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PET_UP_REQ(const void *pHost, INetData* poNetData)
{
	const CS_PET_UP_REQ *pstIn = (const CS_PET_UP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwOwnerDBID, "OwnerDBID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwOtherDBID, "OtherDBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PET_UP_REQ(void *pHost, INetData* poNetData)
{
	CS_PET_UP_REQ *pstOut = (CS_PET_UP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwOwnerDBID, "OwnerDBID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwOtherDBID, "OtherDBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_UP_ACK(const void *pHost, INetData* poNetData)
{
	const SC_PET_UP_ACK *pstIn = (const SC_PET_UP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nUp, "Up"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOk, "Ok"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_UP_ACK(void *pHost, INetData* poNetData)
{
	SC_PET_UP_ACK *pstOut = (SC_PET_UP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nUp, "Up"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOk, "Ok"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SET_BATTLE_PET_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SET_BATTLE_PET_REQ *pstIn = (const CS_SET_BATTLE_PET_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nBattlePos, "BattlePos"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOk, "Ok"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SET_BATTLE_PET_REQ(void *pHost, INetData* poNetData)
{
	CS_SET_BATTLE_PET_REQ *pstOut = (CS_SET_BATTLE_PET_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nBattlePos, "BattlePos"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOk, "Ok"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SET_BATTLE_PET_NTF(const void *pHost, INetData* poNetData)
{
	const SC_SET_BATTLE_PET_NTF *pstIn = (const SC_SET_BATTLE_PET_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nBattlePos, "BattlePos"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwDBID, "DBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SET_BATTLE_PET_NTF(void *pHost, INetData* poNetData)
{
	SC_SET_BATTLE_PET_NTF *pstOut = (SC_SET_BATTLE_PET_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nBattlePos, "BattlePos"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwDBID, "DBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PET_MERGE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_PET_MERGE_REQ *pstIn = (const CS_PET_MERGE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwOwnerDBID, "OwnerDBID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwOtherDBID, "OtherDBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PET_MERGE_REQ(void *pHost, INetData* poNetData)
{
	CS_PET_MERGE_REQ *pstOut = (CS_PET_MERGE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwOwnerDBID, "OwnerDBID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwOtherDBID, "OtherDBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_ADD_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_ADD_NTF *pstIn = (const SC_PET_ADD_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTemplateID, "TemplateID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_ADD_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_ADD_NTF *pstOut = (SC_PET_ADD_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTemplateID, "TemplateID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSOtherInfo(const void *pHost, INetData* poNetData)
{
	const SOtherInfo *pstIn = (const SOtherInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwObjID, "ObjID"))
		return -1;

	if(-1 == EncodeSRoleInfoWithEquip(&pstIn->stRoleInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSOtherInfo(void *pHost, INetData* poNetData)
{
	SOtherInfo *pstOut = (SOtherInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwObjID, "ObjID"))
		return -1;

	if(-1 == DecodeSRoleInfoWithEquip(&pstOut->stRoleInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSOtherInfoWithPos(const void *pHost, INetData* poNetData)
{
	const SOtherInfoWithPos *pstIn = (const SOtherInfoWithPos*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSOtherInfo(&pstIn->stRoleInfo, poNetData))
		return -1;

	if(-1 == EncodeSPosInfo(&pstIn->stPos, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSOtherInfoWithPos(void *pHost, INetData* poNetData)
{
	SOtherInfoWithPos *pstOut = (SOtherInfoWithPos*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSOtherInfo(&pstOut->stRoleInfo, poNetData))
		return -1;

	if(-1 == DecodeSPosInfo(&pstOut->stPos, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_OTHER_APPEAR(const void *pHost, INetData* poNetData)
{
	const SC_OTHER_APPEAR *pstIn = (const SC_OTHER_APPEAR*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > GS_MAX_SYNC_ROLE_COUNT || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSOtherInfoWithPos(&pstIn->astRoleInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_OTHER_APPEAR(void *pHost, INetData* poNetData)
{
	SC_OTHER_APPEAR *pstOut = (SC_OTHER_APPEAR*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > GS_MAX_SYNC_ROLE_COUNT || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSOtherInfoWithPos(&pstOut->astRoleInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_OTHER_UPDATE(const void *pHost, INetData* poNetData)
{
	const SC_OTHER_UPDATE *pstIn = (const SC_OTHER_UPDATE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > GS_MAX_SYNC_ROLE_COUNT || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSOtherInfo(&pstIn->astRoleInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_OTHER_UPDATE(void *pHost, INetData* poNetData)
{
	SC_OTHER_UPDATE *pstOut = (SC_OTHER_UPDATE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > GS_MAX_SYNC_ROLE_COUNT || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSOtherInfo(&pstOut->astRoleInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_OTHER_DISAPPEAR(const void *pHost, INetData* poNetData)
{
	const SC_OTHER_DISAPPEAR *pstIn = (const SC_OTHER_DISAPPEAR*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->wCount > GS_MAX_SYNC_ROLE_COUNT || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == poNetData->AddUint64(pstIn->aqwObjID[i], "ObjID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_OTHER_DISAPPEAR(void *pHost, INetData* poNetData)
{
	SC_OTHER_DISAPPEAR *pstOut = (SC_OTHER_DISAPPEAR*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > GS_MAX_SYNC_ROLE_COUNT || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == poNetData->DelUint64(pstOut->aqwObjID[i], "ObjID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_MOVE_SYNC_MODE(const void *pHost, INetData* poNetData)
{
	const CS_MOVE_SYNC_MODE *pstIn = (const CS_MOVE_SYNC_MODE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nMode, "Mode"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_MOVE_SYNC_MODE(void *pHost, INetData* poNetData)
{
	CS_MOVE_SYNC_MODE *pstOut = (CS_MOVE_SYNC_MODE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nMode, "Mode"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_MOVE_BEGIN(const void *pHost, INetData* poNetData)
{
	const CS_MOVE_BEGIN *pstIn = (const CS_MOVE_BEGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwTime, "Time"))
		return -1;

	if(-1 == EncodeSPosInfo(&pstIn->stPosition, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_MOVE_BEGIN(void *pHost, INetData* poNetData)
{
	CS_MOVE_BEGIN *pstOut = (CS_MOVE_BEGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwTime, "Time"))
		return -1;

	if(-1 == DecodeSPosInfo(&pstOut->stPosition, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_MOVE_STOP(const void *pHost, INetData* poNetData)
{
	const CS_MOVE_STOP *pstIn = (const CS_MOVE_STOP*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwTime, "Time"))
		return -1;

	if(-1 == EncodeSPosInfo(&pstIn->stPosition, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_MOVE_STOP(void *pHost, INetData* poNetData)
{
	CS_MOVE_STOP *pstOut = (CS_MOVE_STOP*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwTime, "Time"))
		return -1;

	if(-1 == DecodeSPosInfo(&pstOut->stPosition, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSMoveObj(const void *pHost, INetData* poNetData)
{
	const SMoveObj *pstIn = (const SMoveObj*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwObjectID, "ObjectID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwTime, "Time"))
		return -1;

	if(-1 == EncodeSPosInfo(&pstIn->stPosition, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSMoveObj(void *pHost, INetData* poNetData)
{
	SMoveObj *pstOut = (SMoveObj*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwObjectID, "ObjectID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwTime, "Time"))
		return -1;

	if(-1 == DecodeSPosInfo(&pstOut->stPosition, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_MOVE_BEGIN(const void *pHost, INetData* poNetData)
{
	const SC_MOVE_BEGIN *pstIn = (const SC_MOVE_BEGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > GS_MAX_SYNC_ROLE_COUNT || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSMoveObj(&pstIn->astObjs[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_MOVE_BEGIN(void *pHost, INetData* poNetData)
{
	SC_MOVE_BEGIN *pstOut = (SC_MOVE_BEGIN*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > GS_MAX_SYNC_ROLE_COUNT || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSMoveObj(&pstOut->astObjs[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_MOVE_STOP(const void *pHost, INetData* poNetData)
{
	const SC_MOVE_STOP *pstIn = (const SC_MOVE_STOP*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddWord(pstIn->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->wCount > GS_MAX_SYNC_ROLE_COUNT || pstIn->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstIn->wCount)
			break;
		if(-1 == EncodeSMoveObj(&pstIn->astObjs[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_MOVE_STOP(void *pHost, INetData* poNetData)
{
	SC_MOVE_STOP *pstOut = (SC_MOVE_STOP*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelWord(pstOut->wCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->wCount > GS_MAX_SYNC_ROLE_COUNT || pstOut->wCount < 0)
       return -1;
	for(i = 0; i < GS_MAX_SYNC_ROLE_COUNT; ++i)
	{
		if(i >= (int)pstOut->wCount)
			break;
		if(-1 == DecodeSMoveObj(&pstOut->astObjs[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSSkillInfo(const void *pHost, INetData* poNetData)
{
	const SSkillInfo *pstIn = (const SSkillInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSkillID, "SkillID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCooldownTime, "CooldownTime"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSSkillInfo(void *pHost, INetData* poNetData)
{
	SSkillInfo *pstOut = (SSkillInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSkillID, "SkillID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCooldownTime, "CooldownTime"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_USER_SKILLS_NTF(const void *pHost, INetData* poNetData)
{
	const SC_USER_SKILLS_NTF *pstIn = (const SC_USER_SKILLS_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSkillPoint, "SkillPoint"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalSkillTreePoint, "TotalSkillTreePoint"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->byCount > MAX_TRANS_SKILL_NUM || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < MAX_TRANS_SKILL_NUM; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == EncodeSSkillInfo(&pstIn->astSkillsInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_USER_SKILLS_NTF(void *pHost, INetData* poNetData)
{
	SC_USER_SKILLS_NTF *pstOut = (SC_USER_SKILLS_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSkillPoint, "SkillPoint"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalSkillTreePoint, "TotalSkillTreePoint"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->byCount > MAX_TRANS_SKILL_NUM || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < MAX_TRANS_SKILL_NUM; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == DecodeSSkillInfo(&pstOut->astSkillsInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_LEARN_SKILL(const void *pHost, INetData* poNetData)
{
	const CS_LEARN_SKILL *pstIn = (const CS_LEARN_SKILL*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSkillID, "SkillID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_LEARN_SKILL(void *pHost, INetData* poNetData)
{
	CS_LEARN_SKILL *pstOut = (CS_LEARN_SKILL*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSkillID, "SkillID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SKILL_INFO_NTF(const void *pHost, INetData* poNetData)
{
	const SC_SKILL_INFO_NTF *pstIn = (const SC_SKILL_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSSkillInfo(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SKILL_INFO_NTF(void *pHost, INetData* poNetData)
{
	SC_SKILL_INFO_NTF *pstOut = (SC_SKILL_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSSkillInfo(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_REMOVE_SKILL_NTF(const void *pHost, INetData* poNetData)
{
	const SC_REMOVE_SKILL_NTF *pstIn = (const SC_REMOVE_SKILL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSkillID, "SkillID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_REMOVE_SKILL_NTF(void *pHost, INetData* poNetData)
{
	SC_REMOVE_SKILL_NTF *pstOut = (SC_REMOVE_SKILL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSkillID, "SkillID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SKILL_POINT_NTF(const void *pHost, INetData* poNetData)
{
	const SC_SKILL_POINT_NTF *pstIn = (const SC_SKILL_POINT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSkillPoint, "SkillPoint"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalSkillTreePoint, "TotalSkillTreePoint"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SKILL_POINT_NTF(void *pHost, INetData* poNetData)
{
	SC_SKILL_POINT_NTF *pstOut = (SC_SKILL_POINT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSkillPoint, "SkillPoint"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalSkillTreePoint, "TotalSkillTreePoint"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SKILL_RESET_ALL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SKILL_RESET_ALL_REQ *pstIn = (const CS_SKILL_RESET_ALL_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SKILL_RESET_ALL_REQ(void *pHost, INetData* poNetData)
{
	CS_SKILL_RESET_ALL_REQ *pstOut = (CS_SKILL_RESET_ALL_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_ITEM_NTF(const void *pHost, INetData* poNetData)
{
	const SC_SELF_ITEM_NTF *pstIn = (const SC_SELF_ITEM_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byPos, "Pos"))
		return -1;

	if(-1 == EncodeSItemList(&pstIn->stItemList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_ITEM_NTF(void *pHost, INetData* poNetData)
{
	SC_SELF_ITEM_NTF *pstOut = (SC_SELF_ITEM_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byPos, "Pos"))
		return -1;

	if(-1 == DecodeSItemList(&pstOut->stItemList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_MOVE_ITEM_REQ(const void *pHost, INetData* poNetData)
{
	const CS_MOVE_ITEM_REQ *pstIn = (const CS_MOVE_ITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byFromPos, "FromPos"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byToPos, "ToPos"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwUUID, "UUID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwAnotherUUID, "AnotherUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_MOVE_ITEM_REQ(void *pHost, INetData* poNetData)
{
	CS_MOVE_ITEM_REQ *pstOut = (CS_MOVE_ITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byFromPos, "FromPos"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byToPos, "ToPos"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwUUID, "UUID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwAnotherUUID, "AnotherUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_MOVE_ITEM_ACK(const void *pHost, INetData* poNetData)
{
	const SC_MOVE_ITEM_ACK *pstIn = (const SC_MOVE_ITEM_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeCS_MOVE_ITEM_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_MOVE_ITEM_ACK(void *pHost, INetData* poNetData)
{
	SC_MOVE_ITEM_ACK *pstOut = (SC_MOVE_ITEM_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeCS_MOVE_ITEM_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_BAG_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_BAG_NTF *pstIn = (const SC_ROLE_BAG_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nMaxRoleBagCount, "MaxRoleBagCount"))
		return -1;

	if(-1 == EncodeSXITEMS(&pstIn->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_BAG_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_BAG_NTF *pstOut = (SC_ROLE_BAG_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nMaxRoleBagCount, "MaxRoleBagCount"))
		return -1;

	if(-1 == DecodeSXITEMS(&pstOut->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_LIMIT_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_LIMIT_NTF *pstIn = (const SC_ROLE_LIMIT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nMaxRoleBagCount, "MaxRoleBagCount"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxPetBagCount, "MaxPetBagCount"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nMaxPetCount, "MaxPetCount"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_LIMIT_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_LIMIT_NTF *pstOut = (SC_ROLE_LIMIT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nMaxRoleBagCount, "MaxRoleBagCount"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxPetBagCount, "MaxPetBagCount"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nMaxPetCount, "MaxPetCount"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_EQUIP_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_EQUIP_NTF *pstIn = (const SC_ROLE_EQUIP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSXITEMS(&pstIn->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_EQUIP_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_EQUIP_NTF *pstOut = (SC_ROLE_EQUIP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSXITEMS(&pstOut->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_BAG_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_BAG_SINGLE_LEAVE_NTF *pstIn = (const SC_ROLE_BAG_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_BAG_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_BAG_SINGLE_LEAVE_NTF *pstOut = (SC_ROLE_BAG_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_BAG_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_BAG_SINGLE_ENTER_NTF *pstIn = (const SC_ROLE_BAG_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSXITEM(&pstIn->stItem, poNetData))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nEnterType, "EnterType"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_BAG_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_BAG_SINGLE_ENTER_NTF *pstOut = (SC_ROLE_BAG_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSXITEM(&pstOut->stItem, poNetData))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nEnterType, "EnterType"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_EQUIP_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_EQUIP_SINGLE_LEAVE_NTF *pstIn = (const SC_ROLE_EQUIP_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_EQUIP_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_EQUIP_SINGLE_LEAVE_NTF *pstOut = (SC_ROLE_EQUIP_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_EQUIP_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_EQUIP_SINGLE_ENTER_NTF *pstIn = (const SC_ROLE_EQUIP_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSXITEM(&pstIn->stItem, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_EQUIP_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_EQUIP_SINGLE_ENTER_NTF *pstOut = (SC_ROLE_EQUIP_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSXITEM(&pstOut->stItem, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_EQUIP_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_EQUIP_REQ *pstIn = (const CS_ROLE_EQUIP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsEquip, "IsEquip"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_EQUIP_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_EQUIP_REQ *pstOut = (CS_ROLE_EQUIP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsEquip, "IsEquip"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_EVENT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_EVENT_REQ *pstIn = (const CS_ROLE_EVENT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byEventType, "EventType"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_EVENT_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_EVENT_REQ *pstOut = (CS_ROLE_EVENT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byEventType, "EventType"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_ITEMUP_RPT(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_ITEMUP_RPT *pstIn = (const CS_ROLE_ITEMUP_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byUpType, "UpType"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->byCount > MAX_ITEM_UP_USE_COUNT || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < MAX_ITEM_UP_USE_COUNT; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == poNetData->AddUint64(pstIn->aqwOtherItemUUID[i], "OtherItemUUID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_ITEMUP_RPT(void *pHost, INetData* poNetData)
{
	CS_ROLE_ITEMUP_RPT *pstOut = (CS_ROLE_ITEMUP_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byUpType, "UpType"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->byCount > MAX_ITEM_UP_USE_COUNT || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < MAX_ITEM_UP_USE_COUNT; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == poNetData->DelUint64(pstOut->aqwOtherItemUUID[i], "OtherItemUUID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_ITEMUP_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_ITEMUP_ACK *pstIn = (const SC_ROLE_ITEMUP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byUpType, "UpType"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_ITEMUP_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_ITEMUP_ACK *pstOut = (SC_ROLE_ITEMUP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byUpType, "UpType"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_ITEMUP_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_ITEMUP_NTF *pstIn = (const SC_ROLE_ITEMUP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nUp, "Up"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCurUp, "CurUp"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOK, "OK"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_ITEMUP_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_ITEMUP_NTF *pstOut = (SC_ROLE_ITEMUP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nUp, "Up"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCurUp, "CurUp"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOK, "OK"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_SUIT_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_SUIT_NTF *pstIn = (const SC_ROLE_SUIT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->nCount > MAX_ITEM_COUNT || pstIn->nCount < 0)
       return -1;
	for(i = 0; i < MAX_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstIn->nCount)
			break;
		if(-1 == EncodeSROLE_SUIT(&pstIn->astSuit[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_SUIT_NTF(void *pHost, INetData* poNetData)
{
	SC_ROLE_SUIT_NTF *pstOut = (SC_ROLE_SUIT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->nCount > MAX_ITEM_COUNT || pstOut->nCount < 0)
       return -1;
	for(i = 0; i < MAX_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstOut->nCount)
			break;
		if(-1 == DecodeSROLE_SUIT(&pstOut->astSuit[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSROLE_HOLE_ON(const void *pHost, INetData* poNetData)
{
	const SROLE_HOLE_ON *pstIn = (const SROLE_HOLE_ON*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byHoleIndex, "HoleIndex"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwOtherUUID, "OtherUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSROLE_HOLE_ON(void *pHost, INetData* poNetData)
{
	SROLE_HOLE_ON *pstOut = (SROLE_HOLE_ON*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byHoleIndex, "HoleIndex"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwOtherUUID, "OtherUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_HOLE_ON_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_HOLE_ON_REQ *pstIn = (const CS_ROLE_HOLE_ON_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSROLE_HOLE_ON(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_HOLE_ON_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_HOLE_ON_REQ *pstOut = (CS_ROLE_HOLE_ON_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSROLE_HOLE_ON(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_HOLE_ON_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_HOLE_ON_ACK *pstIn = (const SC_ROLE_HOLE_ON_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nError, "Error"))
		return -1;

	if(-1 == EncodeSROLE_HOLE_ON(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_HOLE_ON_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_HOLE_ON_ACK *pstOut = (SC_ROLE_HOLE_ON_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nError, "Error"))
		return -1;

	if(-1 == DecodeSROLE_HOLE_ON(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSROLE_HOLE_OFF(const void *pHost, INetData* poNetData)
{
	const SROLE_HOLE_OFF *pstIn = (const SROLE_HOLE_OFF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byHoleIndex, "HoleIndex"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSROLE_HOLE_OFF(void *pHost, INetData* poNetData)
{
	SROLE_HOLE_OFF *pstOut = (SROLE_HOLE_OFF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byHoleIndex, "HoleIndex"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_HOLE_OFF_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_HOLE_OFF_REQ *pstIn = (const CS_ROLE_HOLE_OFF_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSROLE_HOLE_OFF(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_HOLE_OFF_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_HOLE_OFF_REQ *pstOut = (CS_ROLE_HOLE_OFF_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSROLE_HOLE_OFF(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_HOLE_OFF_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_HOLE_OFF_ACK *pstIn = (const SC_ROLE_HOLE_OFF_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nError, "Error"))
		return -1;

	if(-1 == EncodeSROLE_HOLE_OFF(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_HOLE_OFF_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_HOLE_OFF_ACK *pstOut = (SC_ROLE_HOLE_OFF_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nError, "Error"))
		return -1;

	if(-1 == DecodeSROLE_HOLE_OFF(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSROLE_HOLE_REFRESH(const void *pHost, INetData* poNetData)
{
	const SROLE_HOLE_REFRESH *pstIn = (const SROLE_HOLE_REFRESH*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItem2UUID, "Item2UUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSROLE_HOLE_REFRESH(void *pHost, INetData* poNetData)
{
	SROLE_HOLE_REFRESH *pstOut = (SROLE_HOLE_REFRESH*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItem2UUID, "Item2UUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_HOLE_REFRESH_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_HOLE_REFRESH_REQ *pstIn = (const CS_ROLE_HOLE_REFRESH_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSROLE_HOLE_REFRESH(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_HOLE_REFRESH_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_HOLE_REFRESH_REQ *pstOut = (CS_ROLE_HOLE_REFRESH_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSROLE_HOLE_REFRESH(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_HOLE_REFRESH_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_HOLE_REFRESH_ACK *pstIn = (const SC_ROLE_HOLE_REFRESH_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nError, "Error"))
		return -1;

	if(-1 == EncodeSDropInfoList(&pstIn->stDrops, poNetData))
		return -1;

	if(-1 == EncodeSROLE_HOLE_REFRESH(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_HOLE_REFRESH_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_HOLE_REFRESH_ACK *pstOut = (SC_ROLE_HOLE_REFRESH_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nError, "Error"))
		return -1;

	if(-1 == DecodeSDropInfoList(&pstOut->stDrops, poNetData))
		return -1;

	if(-1 == DecodeSROLE_HOLE_REFRESH(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSROLE_HOLE_MERGE(const void *pHost, INetData* poNetData)
{
	const SROLE_HOLE_MERGE *pstIn = (const SROLE_HOLE_MERGE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItem2UUID, "Item2UUID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwItem3UUID, "Item3UUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSROLE_HOLE_MERGE(void *pHost, INetData* poNetData)
{
	SROLE_HOLE_MERGE *pstOut = (SROLE_HOLE_MERGE*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItem2UUID, "Item2UUID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwItem3UUID, "Item3UUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_HOLE_MERGE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_HOLE_MERGE_REQ *pstIn = (const CS_ROLE_HOLE_MERGE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSROLE_HOLE_MERGE(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_HOLE_MERGE_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_HOLE_MERGE_REQ *pstOut = (CS_ROLE_HOLE_MERGE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSROLE_HOLE_MERGE(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_HOLE_MERGE_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_HOLE_MERGE_ACK *pstIn = (const SC_ROLE_HOLE_MERGE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nError, "Error"))
		return -1;

	if(-1 == EncodeSDropInfoList(&pstIn->stDrops, poNetData))
		return -1;

	if(-1 == EncodeSROLE_HOLE_MERGE(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_HOLE_MERGE_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_HOLE_MERGE_ACK *pstOut = (SC_ROLE_HOLE_MERGE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nError, "Error"))
		return -1;

	if(-1 == DecodeSDropInfoList(&pstOut->stDrops, poNetData))
		return -1;

	if(-1 == DecodeSROLE_HOLE_MERGE(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSROLE_HOLE_MERGE2(const void *pHost, INetData* poNetData)
{
	const SROLE_HOLE_MERGE2 *pstIn = (const SROLE_HOLE_MERGE2*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSROLE_HOLE_MERGE2(void *pHost, INetData* poNetData)
{
	SROLE_HOLE_MERGE2 *pstOut = (SROLE_HOLE_MERGE2*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nCount, "Count"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_HOLE_MERGE2_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_HOLE_MERGE2_REQ *pstIn = (const CS_ROLE_HOLE_MERGE2_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSROLE_HOLE_MERGE2(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_HOLE_MERGE2_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_HOLE_MERGE2_REQ *pstOut = (CS_ROLE_HOLE_MERGE2_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSROLE_HOLE_MERGE2(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_HOLE_MERGE2_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_HOLE_MERGE2_ACK *pstIn = (const SC_ROLE_HOLE_MERGE2_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nError, "Error"))
		return -1;

	if(-1 == EncodeSDropInfoList(&pstIn->stDrops, poNetData))
		return -1;

	if(-1 == EncodeSROLE_HOLE_MERGE2(&pstIn->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_HOLE_MERGE2_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_HOLE_MERGE2_ACK *pstOut = (SC_ROLE_HOLE_MERGE2_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nError, "Error"))
		return -1;

	if(-1 == DecodeSDropInfoList(&pstOut->stDrops, poNetData))
		return -1;

	if(-1 == DecodeSROLE_HOLE_MERGE2(&pstOut->stHole, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_LOCK_RPT(const void *pHost, INetData* poNetData)
{
	const CS_LOCK_RPT *pstIn = (const CS_LOCK_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nLockType, "LockType"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nLock, "Lock"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_LOCK_RPT(void *pHost, INetData* poNetData)
{
	CS_LOCK_RPT *pstOut = (CS_LOCK_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nLockType, "LockType"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nLock, "Lock"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_USEITEM_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_USEITEM_REQ *pstIn = (const CS_ROLE_USEITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_USEITEM_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_USEITEM_REQ *pstOut = (CS_ROLE_USEITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_USEITEM_START_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_USEITEM_START_ACK *pstIn = (const SC_ROLE_USEITEM_START_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nError, "Error"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_USEITEM_START_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_USEITEM_START_ACK *pstOut = (SC_ROLE_USEITEM_START_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nError, "Error"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_USEITEM_END_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_USEITEM_END_ACK *pstIn = (const SC_ROLE_USEITEM_END_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nError, "Error"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_USEITEM_END_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_USEITEM_END_ACK *pstOut = (SC_ROLE_USEITEM_END_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nError, "Error"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PET_USEITEM_REQ(const void *pHost, INetData* poNetData)
{
	const CS_PET_USEITEM_REQ *pstIn = (const CS_PET_USEITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PET_USEITEM_REQ(void *pHost, INetData* poNetData)
{
	CS_PET_USEITEM_REQ *pstOut = (CS_PET_USEITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_USEITEM_ACK(const void *pHost, INetData* poNetData)
{
	const SC_PET_USEITEM_ACK *pstIn = (const SC_PET_USEITEM_ACK*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_USEITEM_ACK(void *pHost, INetData* poNetData)
{
	SC_PET_USEITEM_ACK *pstOut = (SC_PET_USEITEM_ACK*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_BAG_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_BAG_NTF *pstIn = (const SC_PET_BAG_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nMaxPetBagCount, "MaxPetBagCount"))
		return -1;

	if(-1 == EncodeSXITEMS(&pstIn->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_BAG_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_BAG_NTF *pstOut = (SC_PET_BAG_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nMaxPetBagCount, "MaxPetBagCount"))
		return -1;

	if(-1 == DecodeSXITEMS(&pstOut->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_BAG_SINGLE_LEAVE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_BAG_SINGLE_LEAVE_NTF *pstIn = (const SC_PET_BAG_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_BAG_SINGLE_LEAVE_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_BAG_SINGLE_LEAVE_NTF *pstOut = (SC_PET_BAG_SINGLE_LEAVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_BAG_SINGLE_ENTER_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_BAG_SINGLE_ENTER_NTF *pstIn = (const SC_PET_BAG_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSXITEM(&pstIn->stItem, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_BAG_SINGLE_ENTER_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_BAG_SINGLE_ENTER_NTF *pstOut = (SC_PET_BAG_SINGLE_ENTER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSXITEM(&pstOut->stItem, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PET_EQUIP_REQ(const void *pHost, INetData* poNetData)
{
	const CS_PET_EQUIP_REQ *pstIn = (const CS_PET_EQUIP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPetUUID, "PetUUID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsEquip, "IsEquip"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PET_EQUIP_REQ(void *pHost, INetData* poNetData)
{
	CS_PET_EQUIP_REQ *pstOut = (CS_PET_EQUIP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwItemUUID, "ItemUUID"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPetUUID, "PetUUID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsEquip, "IsEquip"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PET_EVENT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_PET_EVENT_REQ *pstIn = (const CS_PET_EVENT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byEventType, "EventType"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PET_EVENT_REQ(void *pHost, INetData* poNetData)
{
	CS_PET_EVENT_REQ *pstOut = (CS_PET_EVENT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byEventType, "EventType"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwUUID, "UUID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_EVENT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_PET_EVENT_ACK *pstIn = (const SC_PET_EVENT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byEventType, "EventType"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_EVENT_ACK(void *pHost, INetData* poNetData)
{
	SC_PET_EVENT_ACK *pstOut = (SC_PET_EVENT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byEventType, "EventType"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PET_TEAM_RPT(const void *pHost, INetData* poNetData)
{
	const CS_PET_TEAM_RPT *pstIn = (const CS_PET_TEAM_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTeam, "Team"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PET_TEAM_RPT(void *pHost, INetData* poNetData)
{
	CS_PET_TEAM_RPT *pstOut = (CS_PET_TEAM_RPT*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTeam, "Team"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PET_TEAM_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PET_TEAM_NTF *pstIn = (const SC_PET_TEAM_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTeam, "Team"))
		return -1;

	int i;
	for(i = 0; i < PET_BTPOS_MAX; ++i)
	{
		if(-1 == poNetData->AddUint64(pstIn->aqwPetUUID[i], "PetUUID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PET_TEAM_NTF(void *pHost, INetData* poNetData)
{
	SC_PET_TEAM_NTF *pstOut = (SC_PET_TEAM_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTeam, "Team"))
		return -1;

	int i;
	for(i = 0; i < PET_BTPOS_MAX; ++i)
	{
		if(-1 == poNetData->DelUint64(pstOut->aqwPetUUID[i], "PetUUID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_CHAT(const void *pHost, INetData* poNetData)
{
	const CS_CHAT *pstIn = (const CS_CHAT*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSCHAT(&pstIn->stChat, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_CHAT(void *pHost, INetData* poNetData)
{
	CS_CHAT *pstOut = (CS_CHAT*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSCHAT(&pstOut->stChat, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_CHAT(const void *pHost, INetData* poNetData)
{
	const SC_CHAT *pstIn = (const SC_CHAT*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSCHAT(&pstIn->stChat, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_CHAT(void *pHost, INetData* poNetData)
{
	SC_CHAT *pstOut = (SC_CHAT*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSCHAT(&pstOut->stChat, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_CHAT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_CHAT_ACK *pstIn = (const SC_CHAT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byError, "Error"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCooldownTime, "CooldownTime"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_CHAT_ACK(void *pHost, INetData* poNetData)
{
	SC_CHAT_ACK *pstOut = (SC_CHAT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byError, "Error"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCooldownTime, "CooldownTime"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_FRIENDS_LIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_FRIENDS_LIST_REQ *pstIn = (const CS_FRIENDS_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_FRIENDS_LIST_REQ(void *pHost, INetData* poNetData)
{
	CS_FRIENDS_LIST_REQ *pstOut = (CS_FRIENDS_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_FRIENDS_LIST_NTF(const void *pHost, INetData* poNetData)
{
	const SC_FRIENDS_LIST_NTF *pstIn = (const SC_FRIENDS_LIST_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeFRIENDS_LIST_NTF(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_FRIENDS_LIST_NTF(void *pHost, INetData* poNetData)
{
	SC_FRIENDS_LIST_NTF *pstOut = (SC_FRIENDS_LIST_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeFRIENDS_LIST_NTF(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_FRIEND_EPINFO_NTF(const void *pHost, INetData* poNetData)
{
	const SC_FRIEND_EPINFO_NTF *pstIn = (const SC_FRIEND_EPINFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nEPSent, "EPSent"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nEPSendMax, "EPSendMax"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nEPRecv, "EPRecv"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nEPRecvMax, "EPRecvMax"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_FRIEND_EPINFO_NTF(void *pHost, INetData* poNetData)
{
	SC_FRIEND_EPINFO_NTF *pstOut = (SC_FRIEND_EPINFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nEPSent, "EPSent"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nEPSendMax, "EPSendMax"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nEPRecv, "EPRecv"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nEPRecvMax, "EPRecvMax"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_QUERY_ROLE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_QUERY_ROLE_REQ *pstIn = (const CS_QUERY_ROLE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeQUERY_ROLE_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_QUERY_ROLE_REQ(void *pHost, INetData* poNetData)
{
	CS_QUERY_ROLE_REQ *pstOut = (CS_QUERY_ROLE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeQUERY_ROLE_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_QUERY_ROLE_ACK(const void *pHost, INetData* poNetData)
{
	const SC_QUERY_ROLE_ACK *pstIn = (const SC_QUERY_ROLE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeQUERY_ROLE_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_QUERY_ROLE_ACK(void *pHost, INetData* poNetData)
{
	SC_QUERY_ROLE_ACK *pstOut = (SC_QUERY_ROLE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeQUERY_ROLE_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ADD_FRIEND_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ADD_FRIEND_REQ *pstIn = (const CS_ADD_FRIEND_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeADD_FRIEND_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ADD_FRIEND_REQ(void *pHost, INetData* poNetData)
{
	CS_ADD_FRIEND_REQ *pstOut = (CS_ADD_FRIEND_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeADD_FRIEND_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ADD_FRIEND_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ADD_FRIEND_ACK *pstIn = (const SC_ADD_FRIEND_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeADD_FRIEND_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ADD_FRIEND_ACK(void *pHost, INetData* poNetData)
{
	SC_ADD_FRIEND_ACK *pstOut = (SC_ADD_FRIEND_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeADD_FRIEND_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_REMOVE_FRIEND_REQ(const void *pHost, INetData* poNetData)
{
	const CS_REMOVE_FRIEND_REQ *pstIn = (const CS_REMOVE_FRIEND_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeREMOVE_FRIEND_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_REMOVE_FRIEND_REQ(void *pHost, INetData* poNetData)
{
	CS_REMOVE_FRIEND_REQ *pstOut = (CS_REMOVE_FRIEND_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeREMOVE_FRIEND_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_REMOVE_FRIEND_ACK(const void *pHost, INetData* poNetData)
{
	const SC_REMOVE_FRIEND_ACK *pstIn = (const SC_REMOVE_FRIEND_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeREMOVE_FRIEND_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_REMOVE_FRIEND_ACK(void *pHost, INetData* poNetData)
{
	SC_REMOVE_FRIEND_ACK *pstOut = (SC_REMOVE_FRIEND_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeREMOVE_FRIEND_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_DONATE_ACTION_POINT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_DONATE_ACTION_POINT_REQ *pstIn = (const CS_DONATE_ACTION_POINT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeDONATE_ACTION_POINT_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_DONATE_ACTION_POINT_REQ(void *pHost, INetData* poNetData)
{
	CS_DONATE_ACTION_POINT_REQ *pstOut = (CS_DONATE_ACTION_POINT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeDONATE_ACTION_POINT_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_DONATE_ACTION_POINT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_DONATE_ACTION_POINT_ACK *pstIn = (const SC_DONATE_ACTION_POINT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeDONATE_ACTION_POINT_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_DONATE_ACTION_POINT_ACK(void *pHost, INetData* poNetData)
{
	SC_DONATE_ACTION_POINT_ACK *pstOut = (SC_DONATE_ACTION_POINT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeDONATE_ACTION_POINT_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_DONATE_ACTION_POINT_OTHER_NTF(const void *pHost, INetData* poNetData)
{
	const SC_DONATE_ACTION_POINT_OTHER_NTF *pstIn = (const SC_DONATE_ACTION_POINT_OTHER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeDONATE_ACTION_POINT_OTHER_NTF(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_DONATE_ACTION_POINT_OTHER_NTF(void *pHost, INetData* poNetData)
{
	SC_DONATE_ACTION_POINT_OTHER_NTF *pstOut = (SC_DONATE_ACTION_POINT_OTHER_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeDONATE_ACTION_POINT_OTHER_NTF(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_RECEIVE_ACTION_POINT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_RECEIVE_ACTION_POINT_REQ *pstIn = (const CS_RECEIVE_ACTION_POINT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeRECEIVE_ACTION_POINT_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_RECEIVE_ACTION_POINT_REQ(void *pHost, INetData* poNetData)
{
	CS_RECEIVE_ACTION_POINT_REQ *pstOut = (CS_RECEIVE_ACTION_POINT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeRECEIVE_ACTION_POINT_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_RECEIVE_ACTION_POINT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_RECEIVE_ACTION_POINT_ACK *pstIn = (const SC_RECEIVE_ACTION_POINT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeRECEIVE_ACTION_POINT_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_RECEIVE_ACTION_POINT_ACK(void *pHost, INetData* poNetData)
{
	SC_RECEIVE_ACTION_POINT_ACK *pstOut = (SC_RECEIVE_ACTION_POINT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeRECEIVE_ACTION_POINT_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_RESPONSE_ADD_FRIEND_REQ(const void *pHost, INetData* poNetData)
{
	const CS_RESPONSE_ADD_FRIEND_REQ *pstIn = (const CS_RESPONSE_ADD_FRIEND_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeRESPONSE_ADD_FRIEND_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_RESPONSE_ADD_FRIEND_REQ(void *pHost, INetData* poNetData)
{
	CS_RESPONSE_ADD_FRIEND_REQ *pstOut = (CS_RESPONSE_ADD_FRIEND_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeRESPONSE_ADD_FRIEND_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_REQUEST_ADD_FRIEND_NTF(const void *pHost, INetData* poNetData)
{
	const SC_REQUEST_ADD_FRIEND_NTF *pstIn = (const SC_REQUEST_ADD_FRIEND_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeREQUEST_ADD_FRIEND_NTF(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_REQUEST_ADD_FRIEND_NTF(void *pHost, INetData* poNetData)
{
	SC_REQUEST_ADD_FRIEND_NTF *pstOut = (SC_REQUEST_ADD_FRIEND_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeREQUEST_ADD_FRIEND_NTF(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_FRIEND_INFO_CHANGE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_FRIEND_INFO_CHANGE_NTF *pstIn = (const SC_FRIEND_INFO_CHANGE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeFRIEND_INFO_CHANGE_NTF(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_FRIEND_INFO_CHANGE_NTF(void *pHost, INetData* poNetData)
{
	SC_FRIEND_INFO_CHANGE_NTF *pstOut = (SC_FRIEND_INFO_CHANGE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeFRIEND_INFO_CHANGE_NTF(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_FRIEND_REMOVE_INVITE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_FRIEND_REMOVE_INVITE_NTF *pstIn = (const SC_FRIEND_REMOVE_INVITE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeFRIEND_REMOVE_INVITE_NTF(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_FRIEND_REMOVE_INVITE_NTF(void *pHost, INetData* poNetData)
{
	SC_FRIEND_REMOVE_INVITE_NTF *pstOut = (SC_FRIEND_REMOVE_INVITE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeFRIEND_REMOVE_INVITE_NTF(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_FRIEND_ASSIST_LIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_FRIEND_ASSIST_LIST_REQ *pstIn = (const CS_FRIEND_ASSIST_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeFRIEND_ASSIST_LIST_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_FRIEND_ASSIST_LIST_REQ(void *pHost, INetData* poNetData)
{
	CS_FRIEND_ASSIST_LIST_REQ *pstOut = (CS_FRIEND_ASSIST_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeFRIEND_ASSIST_LIST_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSAssistBattleInfo(const void *pHost, INetData* poNetData)
{
	const SAssistBattleInfo *pstIn = (const SAssistBattleInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSAssistBattlePersonInfo(&pstIn->stAssistor, poNetData))
		return -1;

	if(-1 == EncodeSPetInfo(&pstIn->stBattlePet, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSAssistBattleInfo(void *pHost, INetData* poNetData)
{
	SAssistBattleInfo *pstOut = (SAssistBattleInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSAssistBattlePersonInfo(&pstOut->stAssistor, poNetData))
		return -1;

	if(-1 == DecodeSPetInfo(&pstOut->stBattlePet, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_FRIEND_ASSIST_LIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_FRIEND_ASSIST_LIST_ACK *pstIn = (const SC_FRIEND_ASSIST_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->byCount > MAX_FRIENDASSIST_COUNT || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < MAX_FRIENDASSIST_COUNT; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == EncodeSAssistBattleInfo(&pstIn->astAssistors[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_FRIEND_ASSIST_LIST_ACK(void *pHost, INetData* poNetData)
{
	SC_FRIEND_ASSIST_LIST_ACK *pstOut = (SC_FRIEND_ASSIST_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->byCount > MAX_FRIENDASSIST_COUNT || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < MAX_FRIENDASSIST_COUNT; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == DecodeSAssistBattleInfo(&pstOut->astAssistors[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SELECT_FRIEND_ASSIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SELECT_FRIEND_ASSIST_REQ *pstIn = (const CS_SELECT_FRIEND_ASSIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSELECT_FRIEND_ASSIST_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SELECT_FRIEND_ASSIST_REQ(void *pHost, INetData* poNetData)
{
	CS_SELECT_FRIEND_ASSIST_REQ *pstOut = (CS_SELECT_FRIEND_ASSIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSELECT_FRIEND_ASSIST_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELECT_FRIEND_ASSIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SELECT_FRIEND_ASSIST_ACK *pstIn = (const SC_SELECT_FRIEND_ASSIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSELECT_FRIEND_ASSIST_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELECT_FRIEND_ASSIST_ACK(void *pHost, INetData* poNetData)
{
	SC_SELECT_FRIEND_ASSIST_ACK *pstOut = (SC_SELECT_FRIEND_ASSIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSELECT_FRIEND_ASSIST_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ABYSS_TRIGGER_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ABYSS_TRIGGER_ACK *pstIn = (const SC_ABYSS_TRIGGER_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeABYSS_TRIGGER_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ABYSS_TRIGGER_ACK(void *pHost, INetData* poNetData)
{
	SC_ABYSS_TRIGGER_ACK *pstOut = (SC_ABYSS_TRIGGER_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeABYSS_TRIGGER_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ABYSS_OPEN_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ABYSS_OPEN_REQ *pstIn = (const CS_ABYSS_OPEN_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeABYSS_OPEN_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ABYSS_OPEN_REQ(void *pHost, INetData* poNetData)
{
	CS_ABYSS_OPEN_REQ *pstOut = (CS_ABYSS_OPEN_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeABYSS_OPEN_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ABYSS_OPEN_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ABYSS_OPEN_ACK *pstIn = (const SC_ABYSS_OPEN_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeABYSS_OPEN_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ABYSS_OPEN_ACK(void *pHost, INetData* poNetData)
{
	SC_ABYSS_OPEN_ACK *pstOut = (SC_ABYSS_OPEN_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeABYSS_OPEN_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ABYSS_OPEN_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ABYSS_OPEN_NTF *pstIn = (const SC_ABYSS_OPEN_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeABYSS_OPEN_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ABYSS_OPEN_NTF(void *pHost, INetData* poNetData)
{
	SC_ABYSS_OPEN_NTF *pstOut = (SC_ABYSS_OPEN_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeABYSS_OPEN_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_ABYSS_TRIGGER_LIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_ABYSS_TRIGGER_LIST_REQ *pstIn = (const CS_GET_ABYSS_TRIGGER_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeGET_ABYSS_TRIGGER_LIST_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_ABYSS_TRIGGER_LIST_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_ABYSS_TRIGGER_LIST_REQ *pstOut = (CS_GET_ABYSS_TRIGGER_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeGET_ABYSS_TRIGGER_LIST_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_ABYSS_TRIGGER_LIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_ABYSS_TRIGGER_LIST_ACK *pstIn = (const SC_GET_ABYSS_TRIGGER_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeGET_ABYSS_TRIGGER_LIST_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_ABYSS_TRIGGER_LIST_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_ABYSS_TRIGGER_LIST_ACK *pstOut = (SC_GET_ABYSS_TRIGGER_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeGET_ABYSS_TRIGGER_LIST_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_ABYSS_OPEN_LIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_ABYSS_OPEN_LIST_REQ *pstIn = (const CS_GET_ABYSS_OPEN_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeGET_ABYSS_OPEN_LIST_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_ABYSS_OPEN_LIST_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_ABYSS_OPEN_LIST_REQ *pstOut = (CS_GET_ABYSS_OPEN_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeGET_ABYSS_OPEN_LIST_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_ABYSS_OPEN_LIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_ABYSS_OPEN_LIST_ACK *pstIn = (const SC_GET_ABYSS_OPEN_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeGET_ABYSS_OPEN_LIST_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_ABYSS_OPEN_LIST_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_ABYSS_OPEN_LIST_ACK *pstOut = (SC_GET_ABYSS_OPEN_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeGET_ABYSS_OPEN_LIST_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_ABYSS_OPEN_REC_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_ABYSS_OPEN_REC_REQ *pstIn = (const CS_GET_ABYSS_OPEN_REC_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeGET_ABYSS_OPEN_REC_REQ(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_ABYSS_OPEN_REC_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_ABYSS_OPEN_REC_REQ *pstOut = (CS_GET_ABYSS_OPEN_REC_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeGET_ABYSS_OPEN_REC_REQ(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_ABYSS_OPEN_REC_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_ABYSS_OPEN_REC_ACK *pstIn = (const SC_GET_ABYSS_OPEN_REC_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeGET_ABYSS_OPEN_REC_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_ABYSS_OPEN_REC_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_ABYSS_OPEN_REC_ACK *pstOut = (SC_GET_ABYSS_OPEN_REC_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeGET_ABYSS_OPEN_REC_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ENTER_ABYSS_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ENTER_ABYSS_ACK *pstIn = (const SC_ENTER_ABYSS_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == EncodeGET_ABYSS_OPEN_LIST_ACK(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ENTER_ABYSS_ACK(void *pHost, INetData* poNetData)
{
	SC_ENTER_ABYSS_ACK *pstOut = (SC_ENTER_ABYSS_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == DecodeGET_ABYSS_OPEN_LIST_ACK(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ABYSS_RUN_NTF(const void *pHost, INetData* poNetData)
{
	const SC_ABYSS_RUN_NTF *pstIn = (const SC_ABYSS_RUN_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwActivityAbyssDBID, "ActivityAbyssDBID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ABYSS_RUN_NTF(void *pHost, INetData* poNetData)
{
	SC_ABYSS_RUN_NTF *pstOut = (SC_ABYSS_RUN_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwActivityAbyssDBID, "ActivityAbyssDBID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_MAIL_LIST_NTF(const void *pHost, INetData* poNetData)
{
	const SC_MAIL_LIST_NTF *pstIn = (const SC_MAIL_LIST_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeMAIL_LIST(&pstIn->stList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_MAIL_LIST_NTF(void *pHost, INetData* poNetData)
{
	SC_MAIL_LIST_NTF *pstOut = (SC_MAIL_LIST_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeMAIL_LIST(&pstOut->stList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SEND_MAIL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SEND_MAIL_REQ *pstIn = (const CS_SEND_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSEND_MAIL(&pstIn->stMailInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SEND_MAIL_REQ(void *pHost, INetData* poNetData)
{
	CS_SEND_MAIL_REQ *pstOut = (CS_SEND_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSEND_MAIL(&pstOut->stMailInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SEND_MAIL_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SEND_MAIL_ACK *pstIn = (const SC_SEND_MAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SEND_MAIL_ACK(void *pHost, INetData* poNetData)
{
	SC_SEND_MAIL_ACK *pstOut = (SC_SEND_MAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_ITEM_FROM_MAIL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_ITEM_FROM_MAIL_REQ *pstIn = (const CS_GET_ITEM_FROM_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwMailID, "MailID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_ITEM_FROM_MAIL_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_ITEM_FROM_MAIL_REQ *pstOut = (CS_GET_ITEM_FROM_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwMailID, "MailID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_MONEY_FROM_MAIL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_MONEY_FROM_MAIL_REQ *pstIn = (const CS_GET_MONEY_FROM_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwMailID, "MailID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_MONEY_FROM_MAIL_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_MONEY_FROM_MAIL_REQ *pstOut = (CS_GET_MONEY_FROM_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwMailID, "MailID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_READ_MAIL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_READ_MAIL_REQ *pstIn = (const CS_READ_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwMailID, "MailID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_READ_MAIL_REQ(void *pHost, INetData* poNetData)
{
	CS_READ_MAIL_REQ *pstOut = (CS_READ_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwMailID, "MailID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_READ_MAIL_ACK(const void *pHost, INetData* poNetData)
{
	const SC_READ_MAIL_ACK *pstIn = (const SC_READ_MAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwMailID, "MailID"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReadTime, "ReadTime"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_READ_MAIL_ACK(void *pHost, INetData* poNetData)
{
	SC_READ_MAIL_ACK *pstOut = (SC_READ_MAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwMailID, "MailID"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReadTime, "ReadTime"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_DELETE_MAIL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_DELETE_MAIL_REQ *pstIn = (const CS_DELETE_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeMAIL_ID_LIST(&pstIn->stMails, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_DELETE_MAIL_REQ(void *pHost, INetData* poNetData)
{
	CS_DELETE_MAIL_REQ *pstOut = (CS_DELETE_MAIL_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeMAIL_ID_LIST(&pstOut->stMails, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_DELETE_MAIL_ACK(const void *pHost, INetData* poNetData)
{
	const SC_DELETE_MAIL_ACK *pstIn = (const SC_DELETE_MAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeMAIL_ID_LIST(&pstIn->stMails, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_DELETE_MAIL_ACK(void *pHost, INetData* poNetData)
{
	SC_DELETE_MAIL_ACK *pstOut = (SC_DELETE_MAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeMAIL_ID_LIST(&pstOut->stMails, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_UPDATE_MAIL_NTF(const void *pHost, INetData* poNetData)
{
	const SC_UPDATE_MAIL_NTF *pstIn = (const SC_UPDATE_MAIL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeMAIL_LIST(&pstIn->stList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_UPDATE_MAIL_NTF(void *pHost, INetData* poNetData)
{
	SC_UPDATE_MAIL_NTF *pstOut = (SC_UPDATE_MAIL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeMAIL_LIST(&pstOut->stList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_ACTION_POINT_BOUGHT_NTF(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_ACTION_POINT_BOUGHT_NTF *pstIn = (const SC_SHOP_ACTION_POINT_BOUGHT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwBoughtCount, "BoughtCount"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_ACTION_POINT_BOUGHT_NTF(void *pHost, INetData* poNetData)
{
	SC_SHOP_ACTION_POINT_BOUGHT_NTF *pstOut = (SC_SHOP_ACTION_POINT_BOUGHT_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwBoughtCount, "BoughtCount"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SHOP_BUY_ACTION_POINT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SHOP_BUY_ACTION_POINT_REQ *pstIn = (const CS_SHOP_BUY_ACTION_POINT_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SHOP_BUY_ACTION_POINT_REQ(void *pHost, INetData* poNetData)
{
	CS_SHOP_BUY_ACTION_POINT_REQ *pstOut = (CS_SHOP_BUY_ACTION_POINT_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_BUY_ACTION_POINT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_BUY_ACTION_POINT_ACK *pstIn = (const SC_SHOP_BUY_ACTION_POINT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_BUY_ACTION_POINT_ACK(void *pHost, INetData* poNetData)
{
	SC_SHOP_BUY_ACTION_POINT_ACK *pstOut = (SC_SHOP_BUY_ACTION_POINT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_BUY_PET_INFO_CHEAP_NTF(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_BUY_PET_INFO_CHEAP_NTF *pstIn = (const SC_SHOP_BUY_PET_INFO_CHEAP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwRemainTimeCheap, "RemainTimeCheap"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_BUY_PET_INFO_CHEAP_NTF(void *pHost, INetData* poNetData)
{
	SC_SHOP_BUY_PET_INFO_CHEAP_NTF *pstOut = (SC_SHOP_BUY_PET_INFO_CHEAP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwRemainTimeCheap, "RemainTimeCheap"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF *pstIn = (const SC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byRemainCount, "RemainCount"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwRemainTimeExpensive, "RemainTimeExpensive"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF(void *pHost, INetData* poNetData)
{
	SC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF *pstOut = (SC_SHOP_BUY_PET_INFO_EXPENSIVE_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byRemainCount, "RemainCount"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwRemainTimeExpensive, "RemainTimeExpensive"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SHOP_BUY_PET_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SHOP_BUY_PET_REQ *pstIn = (const CS_SHOP_BUY_PET_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byBuyType, "BuyType"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SHOP_BUY_PET_REQ(void *pHost, INetData* poNetData)
{
	CS_SHOP_BUY_PET_REQ *pstOut = (CS_SHOP_BUY_PET_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byBuyType, "BuyType"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_BUY_PET_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_BUY_PET_ACK *pstIn = (const SC_SHOP_BUY_PET_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byType, "Type"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->byCount > MAX_SHOP_BUY_PET_RESULT_COUNT || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_BUY_PET_RESULT_COUNT; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwTemplateID[i], "TemplateID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_BUY_PET_ACK(void *pHost, INetData* poNetData)
{
	SC_SHOP_BUY_PET_ACK *pstOut = (SC_SHOP_BUY_PET_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byType, "Type"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->byCount > MAX_SHOP_BUY_PET_RESULT_COUNT || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_BUY_PET_RESULT_COUNT; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwTemplateID[i], "TemplateID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SHOP_GET_GOODSLIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SHOP_GET_GOODSLIST_REQ *pstIn = (const CS_SHOP_GET_GOODSLIST_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SHOP_GET_GOODSLIST_REQ(void *pHost, INetData* poNetData)
{
	CS_SHOP_GET_GOODSLIST_REQ *pstOut = (CS_SHOP_GET_GOODSLIST_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSGoodsInfo(const void *pHost, INetData* poNetData)
{
	const SGoodsInfo *pstIn = (const SGoodsInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwGoodsId, "GoodsId"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNum, "Num"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSGoodsInfo(void *pHost, INetData* poNetData)
{
	SGoodsInfo *pstOut = (SGoodsInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwGoodsId, "GoodsId"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNum, "Num"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_GET_GOODSLIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_GET_GOODSLIST_ACK *pstIn = (const SC_SHOP_GET_GOODSLIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->byCount > MAX_SHOP_GOODS_COUNT || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_GOODS_COUNT; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == EncodeSGoodsInfo(&pstIn->astGOODSINFOS[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_GET_GOODSLIST_ACK(void *pHost, INetData* poNetData)
{
	SC_SHOP_GET_GOODSLIST_ACK *pstOut = (SC_SHOP_GET_GOODSLIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->byCount > MAX_SHOP_GOODS_COUNT || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_GOODS_COUNT; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == DecodeSGoodsInfo(&pstOut->astGOODSINFOS[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SHOP_BUY_GOODS_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SHOP_BUY_GOODS_REQ *pstIn = (const CS_SHOP_BUY_GOODS_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwGoodsId, "GoodsId"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nGoodsCount, "GoodsCount"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SHOP_BUY_GOODS_REQ(void *pHost, INetData* poNetData)
{
	CS_SHOP_BUY_GOODS_REQ *pstOut = (CS_SHOP_BUY_GOODS_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwGoodsId, "GoodsId"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nGoodsCount, "GoodsCount"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_BUY_GOODS_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_BUY_GOODS_ACK *pstIn = (const SC_SHOP_BUY_GOODS_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nItemCount, "ItemCount"))
		return -1;

	int i;
	if ((int)pstIn->nItemCount > MAX_SHOP_BUY_ITEM_COUNT || pstIn->nItemCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_BUY_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstIn->nItemCount)
			break;
		if(-1 == EncodeSGoodsInfo(&pstIn->astTemplateID[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_BUY_GOODS_ACK(void *pHost, INetData* poNetData)
{
	SC_SHOP_BUY_GOODS_ACK *pstOut = (SC_SHOP_BUY_GOODS_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nItemCount, "ItemCount"))
		return -1;

	int i;
	if ((int)pstOut->nItemCount > MAX_SHOP_BUY_ITEM_COUNT || pstOut->nItemCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_BUY_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstOut->nItemCount)
			break;
		if(-1 == DecodeSGoodsInfo(&pstOut->astTemplateID[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SHOP_SECRET_GOODS_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SHOP_SECRET_GOODS_REQ *pstIn = (const CS_SHOP_SECRET_GOODS_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SHOP_SECRET_GOODS_REQ(void *pHost, INetData* poNetData)
{
	CS_SHOP_SECRET_GOODS_REQ *pstOut = (CS_SHOP_SECRET_GOODS_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSSecretItemInfo(const void *pHost, INetData* poNetData)
{
	const SSecretItemInfo *pstIn = (const SSecretItemInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nUID, "UID"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBought, "Bought"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSSecretItemInfo(void *pHost, INetData* poNetData)
{
	SSecretItemInfo *pstOut = (SSecretItemInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nUID, "UID"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBought, "Bought"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_SECRET_GOODS_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_SECRET_GOODS_ACK *pstIn = (const SC_SHOP_SECRET_GOODS_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwRefreshRemainTimeMS, "RefreshRemainTimeMS"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nFreeRefreshRemainCount, "FreeRefreshRemainCount"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nItemCount, "ItemCount"))
		return -1;

	int i;
	if ((int)pstIn->nItemCount > MAX_SHOP_SECRET_ITEM_COUNT || pstIn->nItemCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_SECRET_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstIn->nItemCount)
			break;
		if(-1 == EncodeSSecretItemInfo(&pstIn->astSecretItems[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_SECRET_GOODS_ACK(void *pHost, INetData* poNetData)
{
	SC_SHOP_SECRET_GOODS_ACK *pstOut = (SC_SHOP_SECRET_GOODS_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwRefreshRemainTimeMS, "RefreshRemainTimeMS"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nFreeRefreshRemainCount, "FreeRefreshRemainCount"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nItemCount, "ItemCount"))
		return -1;

	int i;
	if ((int)pstOut->nItemCount > MAX_SHOP_SECRET_ITEM_COUNT || pstOut->nItemCount < 0)
       return -1;
	for(i = 0; i < MAX_SHOP_SECRET_ITEM_COUNT; ++i)
	{
		if(i >= (int)pstOut->nItemCount)
			break;
		if(-1 == DecodeSSecretItemInfo(&pstOut->astSecretItems[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SHOP_SECRET_BUY_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SHOP_SECRET_BUY_REQ *pstIn = (const CS_SHOP_SECRET_BUY_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nUID, "UID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SHOP_SECRET_BUY_REQ(void *pHost, INetData* poNetData)
{
	CS_SHOP_SECRET_BUY_REQ *pstOut = (CS_SHOP_SECRET_BUY_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nUID, "UID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SHOP_SECRET_BUY_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SHOP_SECRET_BUY_ACK *pstIn = (const SC_SHOP_SECRET_BUY_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nUID, "UID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SHOP_SECRET_BUY_ACK(void *pHost, INetData* poNetData)
{
	SC_SHOP_SECRET_BUY_ACK *pstOut = (SC_SHOP_SECRET_BUY_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nUID, "UID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SHOP_SECRET_REFRESH_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SHOP_SECRET_REFRESH_REQ *pstIn = (const CS_SHOP_SECRET_REFRESH_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SHOP_SECRET_REFRESH_REQ(void *pHost, INetData* poNetData)
{
	CS_SHOP_SECRET_REFRESH_REQ *pstOut = (CS_SHOP_SECRET_REFRESH_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_VIP_INFO_NTF(const void *pHost, INetData* poNetData)
{
	const SC_VIP_INFO_NTF *pstIn = (const SC_VIP_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwVIPLevel, "VIPLevel"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGMLevel, "GMLevel"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_VIP_INFO_NTF(void *pHost, INetData* poNetData)
{
	SC_VIP_INFO_NTF *pstOut = (SC_VIP_INFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwVIPLevel, "VIPLevel"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGMLevel, "GMLevel"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_VIP_RMBINFO_NTF(const void *pHost, INetData* poNetData)
{
	const SC_VIP_RMBINFO_NTF *pstIn = (const SC_VIP_RMBINFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nRMBCount, "RMBCount"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nRMBSum, "RMBSum"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_VIP_RMBINFO_NTF(void *pHost, INetData* poNetData)
{
	SC_VIP_RMBINFO_NTF *pstOut = (SC_VIP_RMBINFO_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nRMBCount, "RMBCount"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nRMBSum, "RMBSum"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_VIP_MONTHCARD_NTF(const void *pHost, INetData* poNetData)
{
	const SC_VIP_MONTHCARD_NTF *pstIn = (const SC_VIP_MONTHCARD_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byMonthCardCount, "MonthCardCount"))
		return -1;

	int i;
	if ((int)pstIn->byMonthCardCount > MAX_MONTHCARD_COUNT || pstIn->byMonthCardCount < 0)
       return -1;
	for(i = 0; i < MAX_MONTHCARD_COUNT; ++i)
	{
		if(i >= (int)pstIn->byMonthCardCount)
			break;
		if(-1 == EncodeMonthCardInfo(&pstIn->astMonthCardInfos[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_VIP_MONTHCARD_NTF(void *pHost, INetData* poNetData)
{
	SC_VIP_MONTHCARD_NTF *pstOut = (SC_VIP_MONTHCARD_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byMonthCardCount, "MonthCardCount"))
		return -1;

	int i;
	if ((int)pstOut->byMonthCardCount > MAX_MONTHCARD_COUNT || pstOut->byMonthCardCount < 0)
       return -1;
	for(i = 0; i < MAX_MONTHCARD_COUNT; ++i)
	{
		if(i >= (int)pstOut->byMonthCardCount)
			break;
		if(-1 == DecodeMonthCardInfo(&pstOut->astMonthCardInfos[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_VIP_MONTHCARD_GETITEM_REQ(const void *pHost, INetData* poNetData)
{
	const CS_VIP_MONTHCARD_GETITEM_REQ *pstIn = (const CS_VIP_MONTHCARD_GETITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nUId, "UId"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_VIP_MONTHCARD_GETITEM_REQ(void *pHost, INetData* poNetData)
{
	CS_VIP_MONTHCARD_GETITEM_REQ *pstOut = (CS_VIP_MONTHCARD_GETITEM_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nUId, "UId"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_VIP_MONTHCARD_GETITEM_ACK(const void *pHost, INetData* poNetData)
{
	const SC_VIP_MONTHCARD_GETITEM_ACK *pstIn = (const SC_VIP_MONTHCARD_GETITEM_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nUId, "UId"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_VIP_MONTHCARD_GETITEM_ACK(void *pHost, INetData* poNetData)
{
	SC_VIP_MONTHCARD_GETITEM_ACK *pstOut = (SC_VIP_MONTHCARD_GETITEM_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nUId, "UId"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_SELF_PVP_PRO_REQ(const void *pHost, INetData* poNetData)
{
	const CS_SELF_PVP_PRO_REQ *pstIn = (const CS_SELF_PVP_PRO_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_SELF_PVP_PRO_REQ(void *pHost, INetData* poNetData)
{
	CS_SELF_PVP_PRO_REQ *pstOut = (CS_SELF_PVP_PRO_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_SELF_PVP_PRO_ACK(const void *pHost, INetData* poNetData)
{
	const SC_SELF_PVP_PRO_ACK *pstIn = (const SC_SELF_PVP_PRO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nMilitaryLevel, "MilitaryLevel"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRepute, "Repute"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPoints, "Points"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTimes, "Times"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwWins, "Wins"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLoses, "Loses"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRanks, "Ranks"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMiFlag, "MiFlag"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDayRepute, "DayRepute"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwDayReFlag, "DayReFlag"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_SELF_PVP_PRO_ACK(void *pHost, INetData* poNetData)
{
	SC_SELF_PVP_PRO_ACK *pstOut = (SC_SELF_PVP_PRO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nMilitaryLevel, "MilitaryLevel"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRepute, "Repute"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPoints, "Points"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTimes, "Times"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwWins, "Wins"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLoses, "Loses"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRanks, "Ranks"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMiFlag, "MiFlag"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDayRepute, "DayRepute"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwDayReFlag, "DayReFlag"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_PVP_MATCH_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_PVP_MATCH_REQ *pstIn = (const CS_GET_PVP_MATCH_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_PVP_MATCH_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_PVP_MATCH_REQ *pstOut = (CS_GET_PVP_MATCH_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_PVP_MATCH_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_PVP_MATCH_ACK *pstIn = (const SC_GET_PVP_MATCH_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodePVP_MATCH_LIST(&pstIn->stPVPMatchList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_PVP_MATCH_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_PVP_MATCH_ACK *pstOut = (SC_GET_PVP_MATCH_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodePVP_MATCH_LIST(&pstOut->stPVPMatchList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ENTER_PVP_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ENTER_PVP_REQ *pstIn = (const CS_ENTER_PVP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwRoleID, "RoleID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ENTER_PVP_REQ(void *pHost, INetData* poNetData)
{
	CS_ENTER_PVP_REQ *pstOut = (CS_ENTER_PVP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwRoleID, "RoleID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ENTER_PVP_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ENTER_PVP_ACK *pstIn = (const SC_ENTER_PVP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == EncodeSC_SELF_BASE_PRO(&pstIn->stBasePro, poNetData))
		return -1;

	if(-1 == EncodeSC_USER_JOIN_PETS(&pstIn->stPet, poNetData))
		return -1;

	if(-1 == EncodeSC_USER_SKILLS_NTF(&pstIn->stSkill, poNetData))
		return -1;

	if(-1 == EncodeSC_ROLE_EQUIP_NTF(&pstIn->stEquip, poNetData))
		return -1;

	if(-1 == EncodeSRobotBuffs(&pstIn->stRobotBuff, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ENTER_PVP_ACK(void *pHost, INetData* poNetData)
{
	SC_ENTER_PVP_ACK *pstOut = (SC_ENTER_PVP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == DecodeSC_SELF_BASE_PRO(&pstOut->stBasePro, poNetData))
		return -1;

	if(-1 == DecodeSC_USER_JOIN_PETS(&pstOut->stPet, poNetData))
		return -1;

	if(-1 == DecodeSC_USER_SKILLS_NTF(&pstOut->stSkill, poNetData))
		return -1;

	if(-1 == DecodeSC_ROLE_EQUIP_NTF(&pstOut->stEquip, poNetData))
		return -1;

	if(-1 == DecodeSRobotBuffs(&pstOut->stRobotBuff, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PVP_RETULT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_PVP_RETULT_REQ *pstIn = (const CS_PVP_RETULT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nTimeout, "Timeout"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PVP_RETULT_REQ(void *pHost, INetData* poNetData)
{
	CS_PVP_RETULT_REQ *pstOut = (CS_PVP_RETULT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nTimeout, "Timeout"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PVP_RETULT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_PVP_RETULT_ACK *pstIn = (const SC_PVP_RETULT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == EncodeSC_SELF_PVP_PRO_ACK(&pstIn->stPro, poNetData))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPoints, "Points"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nRepute, "Repute"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PVP_RETULT_ACK(void *pHost, INetData* poNetData)
{
	SC_PVP_RETULT_ACK *pstOut = (SC_PVP_RETULT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == DecodeSC_SELF_PVP_PRO_ACK(&pstOut->stPro, poNetData))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPoints, "Points"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nRepute, "Repute"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_PVP_MILITARY_REWARD_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_PVP_MILITARY_REWARD_REQ *pstIn = (const CS_GET_PVP_MILITARY_REWARD_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_PVP_MILITARY_REWARD_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_PVP_MILITARY_REWARD_REQ *pstOut = (CS_GET_PVP_MILITARY_REWARD_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_PVP_MILITARY_REWARD_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_PVP_MILITARY_REWARD_ACK *pstIn = (const SC_GET_PVP_MILITARY_REWARD_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMiFlag, "MiFlag"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_PVP_MILITARY_REWARD_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_PVP_MILITARY_REWARD_ACK *pstOut = (SC_GET_PVP_MILITARY_REWARD_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMiFlag, "MiFlag"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_PVP_REPUTE_REWARD_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_PVP_REPUTE_REWARD_REQ *pstIn = (const CS_GET_PVP_REPUTE_REWARD_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwRewardId, "RewardId"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_PVP_REPUTE_REWARD_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_PVP_REPUTE_REWARD_REQ *pstOut = (CS_GET_PVP_REPUTE_REWARD_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwRewardId, "RewardId"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_PVP_REPUTE_REWARD_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_PVP_REPUTE_REWARD_ACK *pstIn = (const SC_GET_PVP_REPUTE_REWARD_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDayRepute, "DayRepute"))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwDayReFlag, "DayReFlag"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_PVP_REPUTE_REWARD_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_PVP_REPUTE_REWARD_ACK *pstOut = (SC_GET_PVP_REPUTE_REWARD_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDayRepute, "DayRepute"))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwDayReFlag, "DayReFlag"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_RANK_LIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_RANK_LIST_REQ *pstIn = (const CS_GET_RANK_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_RANK_LIST_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_RANK_LIST_REQ *pstOut = (CS_GET_RANK_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_RANK_LIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_RANK_LIST_ACK *pstIn = (const SC_GET_RANK_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodePVP_RANK_LIST(&pstIn->stRankList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_RANK_LIST_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_RANK_LIST_ACK *pstOut = (SC_GET_RANK_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodePVP_RANK_LIST(&pstOut->stRankList, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_PVP_BUY_CHALLENGE_TIMES_REQ(const void *pHost, INetData* poNetData)
{
	const CS_PVP_BUY_CHALLENGE_TIMES_REQ *pstIn = (const CS_PVP_BUY_CHALLENGE_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_PVP_BUY_CHALLENGE_TIMES_REQ(void *pHost, INetData* poNetData)
{
	CS_PVP_BUY_CHALLENGE_TIMES_REQ *pstOut = (CS_PVP_BUY_CHALLENGE_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PVP_BUY_CHALLENGE_TIMES_ACK(const void *pHost, INetData* poNetData)
{
	const SC_PVP_BUY_CHALLENGE_TIMES_ACK *pstIn = (const SC_PVP_BUY_CHALLENGE_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PVP_BUY_CHALLENGE_TIMES_ACK(void *pHost, INetData* poNetData)
{
	SC_PVP_BUY_CHALLENGE_TIMES_ACK *pstOut = (SC_PVP_BUY_CHALLENGE_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_PVP_TIME_NTF(const void *pHost, INetData* poNetData)
{
	const SC_PVP_TIME_NTF *pstIn = (const SC_PVP_TIME_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwTime, "Time"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_PVP_TIME_NTF(void *pHost, INetData* poNetData)
{
	SC_PVP_TIME_NTF *pstOut = (SC_PVP_TIME_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwTime, "Time"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_PVP_ROLE_INFO_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_PVP_ROLE_INFO_REQ *pstIn = (const CS_GET_PVP_ROLE_INFO_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddUint64(pstIn->qwRoleID, "RoleID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_PVP_ROLE_INFO_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_PVP_ROLE_INFO_REQ *pstOut = (CS_GET_PVP_ROLE_INFO_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelUint64(pstOut->qwRoleID, "RoleID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_PVP_ROLE_INFO_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_PVP_ROLE_INFO_ACK *pstIn = (const SC_GET_PVP_ROLE_INFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nAttack, "Attack"))
		return -1;

	if(-1 == EncodeSC_ROLE_EQUIP_NTF(&pstIn->stEquip, poNetData))
		return -1;

	if(-1 == EncodeSC_USER_JOIN_PETS(&pstIn->stPet, poNetData))
		return -1;

	if(-1 == EncodeSC_USER_SKILLS_NTF(&pstIn->stSkill, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_PVP_ROLE_INFO_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_PVP_ROLE_INFO_ACK *pstOut = (SC_GET_PVP_ROLE_INFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nAttack, "Attack"))
		return -1;

	if(-1 == DecodeSC_ROLE_EQUIP_NTF(&pstOut->stEquip, poNetData))
		return -1;

	if(-1 == DecodeSC_USER_JOIN_PETS(&pstOut->stPet, poNetData))
		return -1;

	if(-1 == DecodeSC_USER_SKILLS_NTF(&pstOut->stSkill, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_SIGN_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_SIGN_NTF *pstIn = (const SC_GIFT_SIGN_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byCanSign, "CanSign"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSignCount, "SignCount"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_SIGN_NTF(void *pHost, INetData* poNetData)
{
	SC_GIFT_SIGN_NTF *pstOut = (SC_GIFT_SIGN_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byCanSign, "CanSign"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSignCount, "SignCount"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_SIGN_VIP_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_SIGN_VIP_NTF *pstIn = (const SC_GIFT_SIGN_VIP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->dwCount > MAX_GIFT_VIP_COUNT || pstIn->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_GIFT_VIP_COUNT; ++i)
	{
		if(i >= (int)pstIn->dwCount)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwDay[i], "Day"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_SIGN_VIP_NTF(void *pHost, INetData* poNetData)
{
	SC_GIFT_SIGN_VIP_NTF *pstOut = (SC_GIFT_SIGN_VIP_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->dwCount > MAX_GIFT_VIP_COUNT || pstOut->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_GIFT_VIP_COUNT; ++i)
	{
		if(i >= (int)pstOut->dwCount)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwDay[i], "Day"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_SIGN(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_SIGN *pstIn = (const CS_GIFT_SIGN*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_SIGN(void *pHost, INetData* poNetData)
{
	CS_GIFT_SIGN *pstOut = (CS_GIFT_SIGN*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_SIGN_VIP(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_SIGN_VIP *pstIn = (const CS_GIFT_SIGN_VIP*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwSignDate, "SignDate"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_SIGN_VIP(void *pHost, INetData* poNetData)
{
	CS_GIFT_SIGN_VIP *pstOut = (CS_GIFT_SIGN_VIP*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwSignDate, "SignDate"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_LEVEL_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_LEVEL_NTF *pstIn = (const SC_GIFT_LEVEL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->dwCount > MAX_GIFT_LEVEL_COUNT || pstIn->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_GIFT_LEVEL_COUNT; ++i)
	{
		if(i >= (int)pstIn->dwCount)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwLevel[i], "Level"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_LEVEL_NTF(void *pHost, INetData* poNetData)
{
	SC_GIFT_LEVEL_NTF *pstOut = (SC_GIFT_LEVEL_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->dwCount > MAX_GIFT_LEVEL_COUNT || pstOut->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_GIFT_LEVEL_COUNT; ++i)
	{
		if(i >= (int)pstOut->dwCount)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwLevel[i], "Level"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_LEVEL(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_LEVEL *pstIn = (const CS_GIFT_LEVEL*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nLevel, "Level"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_LEVEL(void *pHost, INetData* poNetData)
{
	CS_GIFT_LEVEL *pstOut = (CS_GIFT_LEVEL*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nLevel, "Level"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSDayQuestInfo(const void *pHost, INetData* poNetData)
{
	const SDayQuestInfo *pstIn = (const SDayQuestInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwQuestId, "QuestId"))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFinishProgress, "FinishProgress"))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScoreReceived, "ScoreReceived"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSDayQuestInfo(void *pHost, INetData* poNetData)
{
	SDayQuestInfo *pstOut = (SDayQuestInfo*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwQuestId, "QuestId"))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFinishProgress, "FinishProgress"))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScoreReceived, "ScoreReceived"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_DAY_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_DAY_NTF *pstIn = (const SC_GIFT_DAY_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwCount, "Count"))
		return -1;

	int i;
	if ((int)pstIn->dwCount > MAX_DAY_QUEST_COUNT || pstIn->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_DAY_QUEST_COUNT; ++i)
	{
		if(i >= (int)pstIn->dwCount)
			break;
		if(-1 == EncodeSDayQuestInfo(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_DAY_NTF(void *pHost, INetData* poNetData)
{
	SC_GIFT_DAY_NTF *pstOut = (SC_GIFT_DAY_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->dwCount > MAX_DAY_QUEST_COUNT || pstOut->dwCount < 0)
       return -1;
	for(i = 0; i < MAX_DAY_QUEST_COUNT; ++i)
	{
		if(i >= (int)pstOut->dwCount)
			break;
		if(-1 == DecodeSDayQuestInfo(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_DAY_UPD(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_DAY_UPD *pstIn = (const SC_GIFT_DAY_UPD*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSDayQuestInfo(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_DAY_UPD(void *pHost, INetData* poNetData)
{
	SC_GIFT_DAY_UPD *pstOut = (SC_GIFT_DAY_UPD*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSDayQuestInfo(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_DAY_SCORE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_DAY_SCORE_REQ *pstIn = (const CS_GIFT_DAY_SCORE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwQuestId, "QuestId"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_DAY_SCORE_REQ(void *pHost, INetData* poNetData)
{
	CS_GIFT_DAY_SCORE_REQ *pstOut = (CS_GIFT_DAY_SCORE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwQuestId, "QuestId"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_DAY_BOX_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_DAY_BOX_REQ *pstIn = (const CS_GIFT_DAY_BOX_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwBoxID, "BoxID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_DAY_BOX_REQ(void *pHost, INetData* poNetData)
{
	CS_GIFT_DAY_BOX_REQ *pstOut = (CS_GIFT_DAY_BOX_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwBoxID, "BoxID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_DAY_BOX_NTF(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_DAY_BOX_NTF *pstIn = (const SC_GIFT_DAY_BOX_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->byCount > MAX_DAY_QUEST_BOX_COUNT || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < MAX_DAY_QUEST_BOX_COUNT; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwBoxID[i], "BoxID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_DAY_BOX_NTF(void *pHost, INetData* poNetData)
{
	SC_GIFT_DAY_BOX_NTF *pstOut = (SC_GIFT_DAY_BOX_NTF*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->byCount > MAX_DAY_QUEST_BOX_COUNT || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < MAX_DAY_QUEST_BOX_COUNT; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwBoxID[i], "BoxID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_JIHUOMA_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_JIHUOMA_REQ *pstIn = (const CS_GIFT_JIHUOMA_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddString(pstIn->szJiHuoMa, sizeof(pstIn->szJiHuoMa), "JiHuoMa"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_JIHUOMA_REQ(void *pHost, INetData* poNetData)
{
	CS_GIFT_JIHUOMA_REQ *pstOut = (CS_GIFT_JIHUOMA_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelString(pstOut->szJiHuoMa, sizeof(pstOut->szJiHuoMa), "JiHuoMa"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_JIHUOMA_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_JIHUOMA_ACK *pstIn = (const SC_GIFT_JIHUOMA_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byRet, "Ret"))
		return -1;

	if(-1 == EncodeSMultiItems(&pstIn->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_JIHUOMA_ACK(void *pHost, INetData* poNetData)
{
	SC_GIFT_JIHUOMA_ACK *pstOut = (SC_GIFT_JIHUOMA_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byRet, "Ret"))
		return -1;

	if(-1 == DecodeSMultiItems(&pstOut->stItems, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_EP_INFO_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_EP_INFO_REQ *pstIn = (const CS_GIFT_EP_INFO_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_EP_INFO_REQ(void *pHost, INetData* poNetData)
{
	CS_GIFT_EP_INFO_REQ *pstOut = (CS_GIFT_EP_INFO_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_EP_INFO_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_EP_INFO_ACK *pstIn = (const SC_GIFT_EP_INFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byCount, "Count"))
		return -1;

	int i;
	if((int)pstIn->byCount > MAX_FOODS_COUNT || pstIn->byCount < 0)
       return -1;
	for(i = 0; i < MAX_FOODS_COUNT; ++i)
	{
		if(i >= (int)pstIn->byCount)
			break;
		if(-1 == poNetData->AddInt(pstIn->anDayFoodID[i], "DayFoodID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_EP_INFO_ACK(void *pHost, INetData* poNetData)
{
	SC_GIFT_EP_INFO_ACK *pstOut = (SC_GIFT_EP_INFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byCount, "Count"))
		return -1;

	int i;
	if ((int)pstOut->byCount > MAX_FOODS_COUNT || pstOut->byCount < 0)
       return -1;
	for(i = 0; i < MAX_FOODS_COUNT; ++i)
	{
		if(i >= (int)pstOut->byCount)
			break;
		if(-1 == poNetData->DelInt(pstOut->anDayFoodID[i], "DayFoodID"))
			return -1;
	}

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GIFT_RECEIVE_EP_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GIFT_RECEIVE_EP_REQ *pstIn = (const CS_GIFT_RECEIVE_EP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nDayFoodID, "DayFoodID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GIFT_RECEIVE_EP_REQ(void *pHost, INetData* poNetData)
{
	CS_GIFT_RECEIVE_EP_REQ *pstOut = (CS_GIFT_RECEIVE_EP_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nDayFoodID, "DayFoodID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GIFT_RECEIVE_EP_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GIFT_RECEIVE_EP_ACK *pstIn = (const SC_GIFT_RECEIVE_EP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddByte(pstIn->byResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDayFoodID, "DayFoodID"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GIFT_RECEIVE_EP_ACK(void *pHost, INetData* poNetData)
{
	SC_GIFT_RECEIVE_EP_ACK *pstOut = (SC_GIFT_RECEIVE_EP_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelByte(pstOut->byResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDayFoodID, "DayFoodID"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_WB_INFO_REFRESH_REQ(const void *pHost, INetData* poNetData)
{
	const CS_WB_INFO_REFRESH_REQ *pstIn = (const CS_WB_INFO_REFRESH_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_WB_INFO_REFRESH_REQ(void *pHost, INetData* poNetData)
{
	CS_WB_INFO_REFRESH_REQ *pstOut = (CS_WB_INFO_REFRESH_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_WB_INFO_REFRESH_ACK(const void *pHost, INetData* poNetData)
{
	const SC_WB_INFO_REFRESH_ACK *pstIn = (const SC_WB_INFO_REFRESH_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSWorldBossInfo(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_WB_INFO_REFRESH_ACK(void *pHost, INetData* poNetData)
{
	SC_WB_INFO_REFRESH_ACK *pstOut = (SC_WB_INFO_REFRESH_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSWorldBossInfo(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_WB_ADD_BUF_REQ(const void *pHost, INetData* poNetData)
{
	const CS_WB_ADD_BUF_REQ *pstIn = (const CS_WB_ADD_BUF_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_WB_ADD_BUF_REQ(void *pHost, INetData* poNetData)
{
	CS_WB_ADD_BUF_REQ *pstOut = (CS_WB_ADD_BUF_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nType, "Type"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_WB_ADD_BUF_ACK(const void *pHost, INetData* poNetData)
{
	const SC_WB_ADD_BUF_ACK *pstIn = (const SC_WB_ADD_BUF_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_WB_ADD_BUF_ACK(void *pHost, INetData* poNetData)
{
	SC_WB_ADD_BUF_ACK *pstOut = (SC_WB_ADD_BUF_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_WB_RELIVE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_WB_RELIVE_REQ *pstIn = (const CS_WB_RELIVE_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_WB_RELIVE_REQ(void *pHost, INetData* poNetData)
{
	CS_WB_RELIVE_REQ *pstOut = (CS_WB_RELIVE_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_WB_RELIVE_ACK(const void *pHost, INetData* poNetData)
{
	const SC_WB_RELIVE_ACK *pstIn = (const SC_WB_RELIVE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_WB_RELIVE_ACK(void *pHost, INetData* poNetData)
{
	SC_WB_RELIVE_ACK *pstOut = (SC_WB_RELIVE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nResult, "Result"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_WB_KILLED_NTF(const void *pHost, INetData* poNetData)
{
	const SC_WB_KILLED_NTF *pstIn = (const SC_WB_KILLED_NTF*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_WB_KILLED_NTF(void *pHost, INetData* poNetData)
{
	SC_WB_KILLED_NTF *pstOut = (SC_WB_KILLED_NTF*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_WB_RUN_NTF(const void *pHost, INetData* poNetData)
{
	const SC_WB_RUN_NTF *pstIn = (const SC_WB_RUN_NTF*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_WB_RUN_NTF(void *pHost, INetData* poNetData)
{
	SC_WB_RUN_NTF *pstOut = (SC_WB_RUN_NTF*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_WB_ENTER_REQ(const void *pHost, INetData* poNetData)
{
	const CS_WB_ENTER_REQ *pstIn = (const CS_WB_ENTER_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_WB_ENTER_REQ(void *pHost, INetData* poNetData)
{
	CS_WB_ENTER_REQ *pstOut = (CS_WB_ENTER_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_WB_ENTER_ACK(const void *pHost, INetData* poNetData)
{
	const SC_WB_ENTER_ACK *pstIn = (const SC_WB_ENTER_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nResult, "Result"))
		return -1;

	if(-1 == EncodeSWorldBossInfo(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_WB_ENTER_ACK(void *pHost, INetData* poNetData)
{
	SC_WB_ENTER_ACK *pstOut = (SC_WB_ENTER_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nResult, "Result"))
		return -1;

	if(-1 == DecodeSWorldBossInfo(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_WB_RESULT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_WB_RESULT_REQ *pstIn = (const CS_WB_RESULT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nDamage, "Damage"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_WB_RESULT_REQ(void *pHost, INetData* poNetData)
{
	CS_WB_RESULT_REQ *pstOut = (CS_WB_RESULT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nDamage, "Damage"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_WB_RESULT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_WB_RESULT_ACK *pstIn = (const SC_WB_RESULT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nResult, "Result"))
		return -1;

	if(-1 == EncodeSWorldBossInfo(&pstIn->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_WB_RESULT_ACK(void *pHost, INetData* poNetData)
{
	SC_WB_RESULT_ACK *pstOut = (SC_WB_RESULT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nResult, "Result"))
		return -1;

	if(-1 == DecodeSWorldBossInfo(&pstOut->stInfo, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_ROLE_RANK_REQ(const void *pHost, INetData* poNetData)
{
	const CS_ROLE_RANK_REQ *pstIn = (const CS_ROLE_RANK_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSRankRoleReq(&pstIn->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_ROLE_RANK_REQ(void *pHost, INetData* poNetData)
{
	CS_ROLE_RANK_REQ *pstOut = (CS_ROLE_RANK_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSRankRoleReq(&pstOut->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_ROLE_RANK_ACK(const void *pHost, INetData* poNetData)
{
	const SC_ROLE_RANK_ACK *pstIn = (const SC_ROLE_RANK_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSRankRoleAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_ROLE_RANK_ACK(void *pHost, INetData* poNetData)
{
	SC_ROLE_RANK_ACK *pstOut = (SC_ROLE_RANK_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSRankRoleAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_PT_BASEINFO_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_PT_BASEINFO_REQ *pstIn = (const CS_GET_PT_BASEINFO_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_PT_BASEINFO_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_PT_BASEINFO_REQ *pstOut = (CS_GET_PT_BASEINFO_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_PT_BASEINFO_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_PT_BASEINFO_ACK *pstIn = (const SC_GET_PT_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTimes, "Times"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuys, "Buys"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPass, "Pass"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_PT_BASEINFO_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_PT_BASEINFO_ACK *pstOut = (SC_GET_PT_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTimes, "Times"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuys, "Buys"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPass, "Pass"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_BUY_PT_TIMES_REQ(const void *pHost, INetData* poNetData)
{
	const CS_BUY_PT_TIMES_REQ *pstIn = (const CS_BUY_PT_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_BUY_PT_TIMES_REQ(void *pHost, INetData* poNetData)
{
	CS_BUY_PT_TIMES_REQ *pstOut = (CS_BUY_PT_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_BUY_PT_TIMES_ACK(const void *pHost, INetData* poNetData)
{
	const SC_BUY_PT_TIMES_ACK *pstIn = (const SC_BUY_PT_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_BUY_PT_TIMES_ACK(void *pHost, INetData* poNetData)
{
	SC_BUY_PT_TIMES_ACK *pstOut = (SC_BUY_PT_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_MD_BASEINFO_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_MD_BASEINFO_REQ *pstIn = (const CS_GET_MD_BASEINFO_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_MD_BASEINFO_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_MD_BASEINFO_REQ *pstOut = (CS_GET_MD_BASEINFO_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_MD_BASEINFO_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_MD_BASEINFO_ACK *pstIn = (const SC_GET_MD_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTimes, "Times"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuys, "Buys"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPass, "Pass"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_MD_BASEINFO_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_MD_BASEINFO_ACK *pstOut = (SC_GET_MD_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTimes, "Times"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuys, "Buys"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPass, "Pass"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_BUY_MD_TIMES_REQ(const void *pHost, INetData* poNetData)
{
	const CS_BUY_MD_TIMES_REQ *pstIn = (const CS_BUY_MD_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_BUY_MD_TIMES_REQ(void *pHost, INetData* poNetData)
{
	CS_BUY_MD_TIMES_REQ *pstOut = (CS_BUY_MD_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_BUY_MD_TIMES_ACK(const void *pHost, INetData* poNetData)
{
	const SC_BUY_MD_TIMES_ACK *pstIn = (const SC_BUY_MD_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_BUY_MD_TIMES_ACK(void *pHost, INetData* poNetData)
{
	SC_BUY_MD_TIMES_ACK *pstOut = (SC_BUY_MD_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GET_FD_BASEINFO_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GET_FD_BASEINFO_REQ *pstIn = (const CS_GET_FD_BASEINFO_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GET_FD_BASEINFO_REQ(void *pHost, INetData* poNetData)
{
	CS_GET_FD_BASEINFO_REQ *pstOut = (CS_GET_FD_BASEINFO_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GET_FD_BASEINFO_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GET_FD_BASEINFO_ACK *pstIn = (const SC_GET_FD_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nTimes, "Times"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuys, "Buys"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nPass, "Pass"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GET_FD_BASEINFO_ACK(void *pHost, INetData* poNetData)
{
	SC_GET_FD_BASEINFO_ACK *pstOut = (SC_GET_FD_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nTimes, "Times"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuys, "Buys"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nPass, "Pass"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_BUY_FD_TIMES_REQ(const void *pHost, INetData* poNetData)
{
	const CS_BUY_FD_TIMES_REQ *pstIn = (const CS_BUY_FD_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddInt(pstIn->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_BUY_FD_TIMES_REQ(void *pHost, INetData* poNetData)
{
	CS_BUY_FD_TIMES_REQ *pstOut = (CS_BUY_FD_TIMES_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelInt(pstOut->nBuyTimes, "BuyTimes"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_BUY_FD_TIMES_ACK(const void *pHost, INetData* poNetData)
{
	const SC_BUY_FD_TIMES_ACK *pstIn = (const SC_BUY_FD_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->AddDword(pstIn->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->AddInt(pstIn->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_BUY_FD_TIMES_ACK(void *pHost, INetData* poNetData)
{
	SC_BUY_FD_TIMES_ACK *pstOut = (SC_BUY_FD_TIMES_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == poNetData->DelDword(pstOut->dwResult, "Result"))
		return -1;

	if(-1 == poNetData->DelInt(pstOut->nBuyTimesLeft, "BuyTimesLeft"))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_INFO_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_INFO_REQ *pstIn = (const CS_GUILD_INFO_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_INFO_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_INFO_REQ *pstOut = (CS_GUILD_INFO_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_LIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_LIST_REQ *pstIn = (const CS_GUILD_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildListReq(&pstIn->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_LIST_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_LIST_REQ *pstOut = (CS_GUILD_LIST_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildListReq(&pstOut->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_LIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_LIST_ACK *pstIn = (const SC_GUILD_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildListAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_LIST_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_LIST_ACK *pstOut = (SC_GUILD_LIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildListAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_ENTER_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_ENTER_REQ *pstIn = (const CS_GUILD_ENTER_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterReq(&pstIn->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_ENTER_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_ENTER_REQ *pstOut = (CS_GUILD_ENTER_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterReq(&pstOut->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_ENTER_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_ENTER_ACK *pstIn = (const SC_GUILD_ENTER_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_ENTER_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_ENTER_ACK *pstOut = (SC_GUILD_ENTER_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_CREATE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_CREATE_REQ *pstIn = (const CS_GUILD_CREATE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterAck(&pstIn->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_CREATE_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_CREATE_REQ *pstOut = (CS_GUILD_CREATE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterAck(&pstOut->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_CREATE_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_CREATE_ACK *pstIn = (const SC_GUILD_CREATE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_CREATE_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_CREATE_ACK *pstOut = (SC_GUILD_CREATE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_LEAVE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_LEAVE_REQ *pstIn = (const CS_GUILD_LEAVE_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_LEAVE_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_LEAVE_REQ *pstOut = (CS_GUILD_LEAVE_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_LEAVE_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_LEAVE_ACK *pstIn = (const SC_GUILD_LEAVE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildLeaveAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_LEAVE_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_LEAVE_ACK *pstOut = (SC_GUILD_LEAVE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildLeaveAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_BASEINFO_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_BASEINFO_ACK *pstIn = (const SC_GUILD_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildBaseInfo(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_BASEINFO_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_BASEINFO_ACK *pstOut = (SC_GUILD_BASEINFO_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildBaseInfo(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_LOG_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_LOG_REQ *pstIn = (const CS_GUILD_LOG_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_LOG_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_LOG_REQ *pstOut = (CS_GUILD_LOG_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_LOG_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_LOG_ACK *pstIn = (const SC_GUILD_LOG_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildLogAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_LOG_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_LOG_ACK *pstOut = (SC_GUILD_LOG_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildLogAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_CHANGE_NOTICE_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_CHANGE_NOTICE_REQ *pstIn = (const CS_GUILD_CHANGE_NOTICE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildChangeNoticeReq(&pstIn->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_CHANGE_NOTICE_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_CHANGE_NOTICE_REQ *pstOut = (CS_GUILD_CHANGE_NOTICE_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildChangeNoticeReq(&pstOut->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_CHANGE_NOTICE_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_CHANGE_NOTICE_ACK *pstIn = (const SC_GUILD_CHANGE_NOTICE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildChangeNoticeAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_CHANGE_NOTICE_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_CHANGE_NOTICE_ACK *pstOut = (SC_GUILD_CHANGE_NOTICE_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildChangeNoticeAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_DETAIL_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_DETAIL_REQ *pstIn = (const CS_GUILD_DETAIL_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_DETAIL_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_DETAIL_REQ *pstOut = (CS_GUILD_DETAIL_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_DETAIL_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_DETAIL_ACK *pstIn = (const SC_GUILD_DETAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildDetailAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_DETAIL_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_DETAIL_ACK *pstOut = (SC_GUILD_DETAIL_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildDetailAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_ENTERLIST_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_ENTERLIST_REQ *pstIn = (const CS_GUILD_ENTERLIST_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_ENTERLIST_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_ENTERLIST_REQ *pstOut = (CS_GUILD_ENTERLIST_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_ENTERLIST_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_ENTERLIST_ACK *pstIn = (const SC_GUILD_ENTERLIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterListAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_ENTERLIST_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_ENTERLIST_ACK *pstOut = (SC_GUILD_ENTERLIST_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterListAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_ENTER_ACCEPT_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_ENTER_ACCEPT_REQ *pstIn = (const CS_GUILD_ENTER_ACCEPT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterAcceptReq(&pstIn->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_ENTER_ACCEPT_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_ENTER_ACCEPT_REQ *pstOut = (CS_GUILD_ENTER_ACCEPT_REQ*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterAcceptReq(&pstOut->stReq, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_ENTER_ACCEPT_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_ENTER_ACCEPT_ACK *pstIn = (const SC_GUILD_ENTER_ACCEPT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterAcceptAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_ENTER_ACCEPT_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_ENTER_ACCEPT_ACK *pstOut = (SC_GUILD_ENTER_ACCEPT_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterAcceptAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeCS_GUILD_ENTER_CLEAR_REQ(const void *pHost, INetData* poNetData)
{
	const CS_GUILD_ENTER_CLEAR_REQ *pstIn = (const CS_GUILD_ENTER_CLEAR_REQ*)pHost;
	poNetData->EnterStruct();

	(void*)pstIn;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeCS_GUILD_ENTER_CLEAR_REQ(void *pHost, INetData* poNetData)
{
	CS_GUILD_ENTER_CLEAR_REQ *pstOut = (CS_GUILD_ENTER_CLEAR_REQ*)pHost;
	poNetData->EnterStruct();

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

int EncodeSC_GUILD_ENTER_CLEAR_ACK(const void *pHost, INetData* poNetData)
{
	const SC_GUILD_ENTER_CLEAR_ACK *pstIn = (const SC_GUILD_ENTER_CLEAR_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == EncodeSGuildEnterClearAck(&pstIn->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return poNetData->GetDataLen();
}

int DecodeSC_GUILD_ENTER_CLEAR_ACK(void *pHost, INetData* poNetData)
{
	SC_GUILD_ENTER_CLEAR_ACK *pstOut = (SC_GUILD_ENTER_CLEAR_ACK*)pHost;
	poNetData->EnterStruct();

	if(-1 == DecodeSGuildEnterClearAck(&pstOut->stAck, poNetData))
		return -1;

	poNetData->LeaveStruct();
	return sizeof(*pstOut);
}

