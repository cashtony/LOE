/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
**                   Auther: Zhou Quan                             **
********************************************************************/

/*       Version Number: 1          */

#ifndef HEADERPROTO_H_INCLUDE_VERSION_1
#define HEADERPROTO_H_INCLUDE_VERSION_1

#include "netdata.h"

/*Defines Begin*/
#define MAX_SERVICENAME_LENGTH         16
#define MAX_SERVICEPARAM_LENGTH        128
#define MAX_PLUGINPACKET_LENGTH        10240
#define MAX_TRANS_SKILL_NUM            100
#define MAX_ERROR_STRING               4096
#define MAX_PET_UP_LEVEL               120
#define MAX_GEM_COUNT                  3
#define MAX_PET_BAG_COUNT              210
#define MAX_PET_EQUIP_COUNT            3
#define MAX_ITEM_COUNT                 200
#define MAX_SUIT_ITEM_COUNT            20
#define MAX_ITEM_UP_USE_COUNT          6
#define MAX_PET_MT_ROLE_LEVEL          20
#define MAX_PROD_ITEM_COUNT            5
#define MAX_EP_COUNT                   1000
#define MAX_MONEY                      1000000000
#define MAX_CASH                       500000000
#define MAX_NONCASH                    500000000
#define MAX_ALLCASH                    (MAX_CASH + MAX_NONCASH)
#define INVALID_MSG_ID                 0
#define SWIM_STATE_NEED_WATER_DEPTH    1500
#define ACCOUNT_LEN                    21
#define PTID_LEN                       21
#define ROLE_NAME_LEN                  21
#define PASSWORD_LEN                   30
#define ITEM_NAME_LEN                  61
#define DESCRIPTION_LEN                255
#define MAX_SKILL_COOLDOWN_SIZE        200
#define MAX_SCENE_NAME_LEN             12
#define ACTIVE_ROLE_NUM                4
#define AVATAR_LEN                     8
#define ROLE_MALE                      0
#define ROLE_FEMALE                    1
#define MAX_INSTANCED_COUNT            20
#define MAX_GUILD_NAME_LEN             21
#define MAX_GUILD_LIST_PER_PAGE        100
#define MAX_GUILD_AIM_LEN              120
#define MAX_GUILD_NOTICE_LEN           120
#define MAX_GUILD_LOG_COUNT            100
#define MAX_GUILD_MEMBER_COUNT         100
#define MAX_GUILD_ENTER_COUNT          50
#define MAX_MESSAGE_LEN                4096
#define MAX_MSG_CONTENT_LEN            4096
#define MAX_LINK_SIZE                  4096
#define MAX_XMLDATA_COUNT              100000
#define MAX_LEVEL_COUNT                512
#define MAX_BATTLE_COUNT               64
#define MAX_BATTLE_BOX_COUNT           256
#define MAX_LEVEL_SELECT_CARD_COUNT    5
#define MAX_SCENE_NAME                 36
#define MAX_TASK_ITEM_NUM              20
#define MAX_LOOT_ITEM_NUM              20
#define ROLE_LOOT_ALL_ITEM             255
#define MAX_XML_LEN                    40960
#define MAX_JSON_LEN                   10240
#define MAX_BIGXML_LEN                 204800
#define WORLD_NUM                      100
#define HEAVEN_EXP_WORLD_NUM           100
#define MAX_SEARCHCONTENT_LEN          17
#define MAX_MOUNT_COUNT                255
#define MAX_SERVER_NAME_LEN            32
#define MAX_SERVER_DESC_LEN            295
#define MAX_SERVER_STATE_LEN           196
#define MAX_WORLDCORERANK_COUNT        100
#define MAX_BAG_ITEM_NUM               108
#define MAX_CREATE_WORLD_BAG_ITEM_NUM  148
#define MAX_EQUIP_ITEM_NUM             10
#define MAX_EQUIPANDBAG_ITEM_NUM       (MAX_BAG_ITEM_NUM+MAX_EQUIP_ITEM_NUM)
#define MAX_MOUNT_EQUIP_ITEM_NUM       4
#define MAX_ITEM_DESC_LEN              64
#define MAX_BANK_ITEM_NUM              144
#define MAX_SEND_ITEM_NUM              200
#define MAX_ITEM_HOLE_NUM              3
#define MAX_CHEST_LOOT_NUM             5
#define INVALID_EXINFO_INDEX           255
#define INVALID_MAKER_INFO_INDEX       255
#define SELL_COST_MAX_COUNT            1
#define MAX_NPC_WARE_COUNT             50
#define MAX_BUYBACK_COUNT              24
#define MAX_EXCHANGE_SIZE              8
#define MAX_EQUIP_HEAD                 8
#define ITEM_EX_TYPE_EQUIP             0
#define ITEM_EX_TYPE_LOOT              1
#define ITEM_EX_TYPE_NULL              101
#define BATTLE_TROPHY_CLASS_MAX        8
#define MAX_WONDERSTRING_LEN           128
#define MAX_MOVE_INCREASE_LEN          64
#define SERVERSTATE_BIT_IS_QUEUE       (1<<0)
#define SQL_SELECT                     1
#define SQL_UPDATE                     2
#define SQL_UPDATE_NORSP               3
#define SQL_INSERT                     4
#define SQL_DELETE                     5
#define SQL_LOCK                       6
#define SQL_UNLOCK                     7
#define OPT_BOTH                       0
#define OPT_MEMORY                     1
#define OPT_DB                         2
#define MAX_BLOB_LEN                   4096
#define MAX_BIGBLOB_LEN                20480
#define MAX_MEDIUMBLOB_LEN             51200
#define MAX_BIG_MORE_BLOB_LEN          30720
#define MAX_EXEBIGBLOB_LEN             102400
#define MAX_ROLE_ITEM_COUNT            200
#define MIN_ROLE_ITEM_COUNT            110
#define MAX_PET_ITEM_COUNT             100
#define MAX_PET_COUNT                  110
#define MAX_PET_RECORD_COUNT           1000
#define MAX_PACKET_LEN                 (2 * 1024 * 1024)
#define WORLD_CHAT_COOLDOWN_TIME_MS    (2 * 60 * 1000)
#define WORLD_CHAT_LEVEL_LIMIT         20
#define TS_BROADCAST_ID_COUNT          4096
#define TS_BROADCAST_LEFT_SIZE         (TS_BROADCAST_ID_COUNT * 8 + 1024)
#define TS_BROADCAST_MSG_SIZE          (MAX_PACKET_LEN - (TS_BROADCAST_LEFT_SIZE))
#define MAX_FRIENDS_COUNT              50
#define MAX_FRIENDS_COUNT_PER_PAGE     20
#define MAX_FRIENDS_PET_COUNT          3
#define MAX_FRIENDS_INVITE_COUNT       30
#define MAX_FRIENDASSIST_COUNT         30
#define MAX_BATTLE_PET_COUNT           3
#define MAX_FRIEND_COUNT               50
#define MAX_ABYSS_OPEN_COUNT           50
#define MAX_XABYSS_RECORD_COUNT        20
#define MAX_ABYSS_NAME_STRING_COUNT    1024
#define MAX_MAIL_TITLE_LEN             100
#define MAX_MAIL_CONTENT_LEN           400
#define MAX_MAIL_ITEM_COUNT            5
#define MAX_MAIL_COUNT                 100
#define MAX_RANK_ROLE_COUNT            10000
#define MAX_RANK_PAGE_COUNT            50
#define MAX_SHOP_BUY_PET_RESULT_COUNT  255
#define MAX_SHOP_GOODS_COUNT           100
#define MAX_SHOP_BUY_ITEM_COUNT        100
#define MAX_SHOP_SECRET_ITEM_COUNT     6
#define MAX_GIFT_VIP_COUNT             31
#define MAX_GIFT_LEVEL_COUNT           100
#define MAX_GIFT_LEVEL_ITEM_COUNT      100
#define MAX_DAY_QUEST_COUNT            100
#define MAX_DAY_QUEST_BOX_COUNT        100
#define MAX_JIHUOMA_LEN                100
#define MAX_FOODS_COUNT                10
#define MAX_MONTHCARD_COUNT            100
#define MAX_PVP_MATCH_COUNT            5
#define MAX_PVP_RANK_COUNT             10000
#define MAX_PVP_ROLE_INFO_STRING_COUNT 409600
#define MAX_WB_RANK_COUNT              10
#define MAX_WB_ATK_COUNT               10000
#define MAX_PVP_ROBOT_BUFF_COUNT       3
#define MAX_PVP_ROBOT_SKILL_COUNT      25
#define HEADERPROTO_MSGID_RANGE 1
#define HEADERPROTO_MSGID_OFFSET 0
/*Defines End*/


/*Enums Begin*/
enum EGTLSQuerySceneType // gt向ls申请场景的类型 
{
	QUERY_TYPE_LOGON                 = 0, //  上线请求  
	QUERY_TYPE_SWITCH_SCENE          = 1, // 跳场景不指定实例id 包括跳副本(组队进副本)  
	QUERY_TYPE_SWITCH_SCENE_INSTANCE = 2, // 跳线指定实例  
};

enum EEnterGameType // 进入gs的类型 
{
	ENTER_GAME_TYPE_LOGON        = 0, //  上线  
	ENTER_GAME_TYPE_SWITCH_SCENE = 1, // 跳场景  
};

enum ESceneType // 场景的类型 
{
	SCENE_TYPE_NORMAL   = 0, //  普通场景  
	QUERY_TYPE_INSTANCE = 1, // 副本  
};

enum EErrorType //  
{
	ERROR_TYPE_COMMON  = 0, //  公用  
	ERROR_TYPE_DEBUG   = 1, //  调试  
	ERROR_TYPE_SHOWBOX = 2, //  弹框显示  
};

enum ERankType //  
{
	RANKTYPE_LEVEL     = 0, //  等级排行  
	RANKTYPE_ATTACK    = 1, //  战力排行  
	RANKTYPE_PVPWINS   = 2, //  pvp胜场  
	RANKTYPE_PVPREPUTE = 3, //  pvp声望  
};

enum EMergeType //  
{
	MERGETYPE_PET_SUBCARD = 0, //  宠物碎片  
};

enum EChatType //  
{
	CHAT_TYPE_SYSTEM  = 0, //  系统信息 gm工具或者有gm权限的用户发送  
	CHAT_TYPE_WORLD   = 1, //  世界聊天  
	CHAT_TYPE_GUILD   = 2, //  公会聊天  
	CHAT_TYPE_GROUP   = 3, //  组队聊天  
	CHAT_TYPE_PRIVATE = 4, //  私聊  
	CHAT_TYPE_MAX     = 4, //  最大值  
};

enum ESpecialItemID //  
{
	SPECIALITEMID_nonMoney = 1, // 金钱  
	SPECIALITEMID_nonCash  = 2, // 绑定徽章  
	SPECIALITEMID_cash     = 3, // 徽章  
};

enum EPetEquipPos //  
{
	PET_EQUIP_POS1 = 0, //  POS1  
	PET_EQUIP_POS2 = 1, //  POS2  
	PET_EQUIP_POS3 = 2, //  POS3  
	PET_EQUIP_MAX, //  MAX  
};

enum EPetJob //  
{
	PET_JOB_NONE     = 0, //  无职业  
	PET_JOB_Warrior  = 1, //  战士 基础  
	PET_JOB_Magic    = 4, //  法师 基础  
	PET_JOB_Rogue    = 7, //  游侠 基础  
	PET_JOB_Minister = 10, //  牧师 基础  
};

enum ERoleJob //  
{
	ROLE_JOB_NONE           = 0, //  无职业  
	ROLE_JOB_Warrior        = 1, //  战士 基础  
	ROLE_JOB_Berserker      = 2, //  狂战士  
	ROLE_JOB_Knight         = 3, //  无畏骑士  
	ROLE_JOB_Magic          = 4, //  法师 基础  
	ROLE_JOB_Wizard         = 5, //  巫术师  
	ROLE_JOB_Warlock        = 6, //  魔导师  
	ROLE_JOB_Rogue          = 7, //  游侠 基础  
	ROLE_JOB_Assassin       = 8, //  刺客  
	ROLE_JOB_Gunner         = 9, //  重炮  
	ROLE_JOB_Minister       = 10, //  牧师 基础  
	ROLE_JOB_Priest         = 11, //  主教  
	ROLE_JOB_Pastor         = 12, //  战斗牧师  
	ROLE_JOB_Max, //  
	ROLE_JOB_FLAG_NONE      = 1 << ROLE_JOB_NONE, //  无职业  
	ROLE_JOB_FLAG_Warrior   = 1 << ROLE_JOB_Warrior, //  战士 基础  
	ROLE_JOB_FLAG_Berserker = 1 << ROLE_JOB_Berserker, //  狂战士  
	ROLE_JOB_FLAG_Knight    = 1 << ROLE_JOB_Knight, //  无畏骑士  
	ROLE_JOB_FLAG_Magic     = 1 << ROLE_JOB_Magic, //  法师 基础  
	ROLE_JOB_FLAG_Wizard    = 1 << ROLE_JOB_Wizard, //  巫术师  
	ROLE_JOB_FLAG_Warlock   = 1 << ROLE_JOB_Warlock, //  魔导师  
	ROLE_JOB_FLAG_Rogue     = 1 << ROLE_JOB_Rogue, //  游侠 基础  
	ROLE_JOB_FLAG_Assassin  = 1 << ROLE_JOB_Assassin, //  刺客  
	ROLE_JOB_FLAG_Gunner    = 1 << ROLE_JOB_Gunner, //  重炮  
	ROLE_JOB_FLAG_Minister  = 1 << ROLE_JOB_Minister, //  牧师 基础  
	ROLE_JOB_FLAG_Priest    = 1 << ROLE_JOB_Priest, //  主教  
	ROLE_JOB_FLAG_Pastor    = 1 << ROLE_JOB_Pastor, //  战斗牧师  
};

enum EFBHard //  
{
	EFBHard_Normal      = 1, // 普通副本 
	EFBHard_Outstanding, // 精英副本 
	EFBHard_Expert, // 专家副本 
	EFBHard_Other, // 其它副本 
};

enum ECalcType //  
{
	CALC_BASE  = 0, //  基础  
	CALC_EX, //  扩展  
	CALC_TOTAL, //  总和  
	CALC_MAX, //  max  
};

enum EItemObjType //  
{
	ITEM_OBJ_ROLE_BASE = 0, //  角色基础背包  
	ITEM_OBJ_PET_BASE, //  宠物基础背包  
};

enum EProperty //  
{
	PROPERTY_BaseBegin       = 0, //  一级属性开始  
	PROPERTY_Str             = 0, //  力量  
	PROPERTY_Int             = 1, //  智力  
	PROPERTY_Dex             = 2, //  敏捷  
	PROPERTY_Sta             = 3, //  体力  
	PROPERTY_Fai             = 4, //  信念  
	PROPERTY_BaseMax, //  一级属性最大值  
	PROPERTY_MaxHP           = 5, //  血量上限  
	PROPERTY_MaxSP           = 6, //  技力上限  
	PROPERTY_HPTick          = 7, //  每轮回复血量  
	PROPERTY_SPTick          = 8, //  每轮回复技力量  
	PROPERTY_AtkDmgMin       = 9, //  当前伤害下限  
	PROPERTY_AtkDmgMax       = 10, //  当前伤害上限  
	PROPERTY_Def             = 11, //  当前防御  
	PROPERTY_IceAtt          = 12, //  冰属性攻击  
	PROPERTY_FireAtt         = 13, //  火属性攻击  
	PROPERTY_PoisonAtt       = 14, //  毒属性攻击  
	PROPERTY_ThunderAtt      = 15, //  雷属性攻击  
	PROPERTY_IceDef          = 16, //  冰属性抵抗  
	PROPERTY_FireDef         = 17, //  火属性抵抗  
	PROPERTY_PoisonDef       = 18, //  毒属性抵抗  
	PROPERTY_ThunderDef      = 19, //  雷属性抵抗  
	PROPERTY_Pierce          = 20, //  穿透点数  
	PROPERTY_Hit             = 21, //  命中点数  
	PROPERTY_Dodge           = 22, //  闪避点数  
	PROPERTY_Cri             = 23, //  致命一击点数  
	PROPERTY_Flex            = 24, //  韧性点数  
	PROPERTY_CriDmg          = 25, //  致命一击伤害系数 15000 = 1.5  
	PROPERTY_CriDmgDef       = 26, //  致命一击防御系数 正负 万分比   
	PROPERTY_BodySize        = 27, //  体型半径 mm  
	PROPERTY_AttSize         = 28, //  攻击半径 mm   
	PROPERTY_TableBaseMax, //  能配置的最大值   
	PROPERTY_AttSpeedModPer  = 29, //  攻击加速百分比  
	PROPERTY_MoveSpeedModPer = 30, //  移动加速百分比  
	PROPERTY_PiercePer       = 31, //  穿透百分比修正 正负 万分比  
	PROPERTY_HitPer          = 32, //  命中率修正  正负  万分比  
	PROPERTY_DodgePer        = 33, //  闪避率修正 正负  万分比  
	PROPERTY_CriPer          = 34, //  致命一击率修正 正负 万分比  
	PROPERTY_FlexPer         = 35, //  韧性率修正  正负 万分比   
	PROPERTY_AttSpeed        = 36, //  基础攻击速度  
	PROPERTY_MoveSpeed       = 37, //  基础移动速度 1秒移动多少mm  
	PROPERTY_MaxEP           = 38, //  最大活力值  
	PROPERTY_MaxAP           = 39, //  协助点数最大值   
	PROPERTY_ExpPer          = 40, //  经验值 正负 万分比  
	PROPERTY_MoneyPer        = 41, //  金钱 正负 万分比  
	PROPERTY_CanModMax, //  可以被其他模块修正的属性枚举最大值   
	PROPERTY_HP              = 64, //  当前血量  
	PROPERTY_SP              = 65, //  当前技力  
	PROPERTY_Money           = 66, //  游戏币  
	PROPERTY_BindingBadge    = 67, //  绑定徽章  
	PROPERTY_Badge           = 68, //  徽章   
	PROPERTY_MakeDmg         = 69, //  造成的伤害   
	PROPERTY_MakeAtt         = 70, //  造成的物理伤害   
	PROPERTY_MakeIce         = 71, //  造成的寒冰伤害   
	PROPERTY_MakeFire        = 72, //  造成的火焰伤害   
	PROPERTY_MakePoison      = 73, //  造成的毒气伤害   
	PROPERTY_MakeThunder     = 74, //  造成的雷电伤害   
	PROPERTY_MakeShufu       = 75, //  对处于束缚状态中的怪物造成的伤害   
	PROPERTY_MakeHunshui     = 76, //  对处于昏睡状态中的怪物造成的伤害   
	PROPERTY_MakeHunmi       = 77, //  对处于昏迷状态中的怪物造成的伤害   
	PROPERTY_MakeDef         = 78, //  对处于昏迷状态中的怪物造成的伤害   
	PROPERTY_Max, //  最大值   
};

enum ESummonObjectPro // 召唤物属性枚举  
{
	SUMMONOBJECT_PRO_TargetType         = 0, //  
	SUMMONOBJECT_PRO_HitPer, //  
	SUMMONOBJECT_PRO_CriticalPer, //  
	SUMMONOBJECT_PRO_CriticalDmgPer, //  
	SUMMONOBJECT_PRO_AoeAimNum, //  
	SUMMONOBJECT_PRO_Mode, //  
	SUMMONOBJECT_PRO_PeriodTime, //  
	SUMMONOBJECT_PRO_Count, //  
	SUMMONOBJECT_PRO_AoeArea, //  
	SUMMONOBJECT_PRO_AoeAreaType, //  
	SUMMONOBJECT_PRO_AoeAreaData, //  
	SUMMONOBJECT_PRO_IgnoreDef, //  
	SUMMONOBJECT_PRO_IgnoreDefendAmount, //  
	SUMMONOBJECT_PRO_DamagePer, //  
	SUMMONOBJECT_PRO_BodyType_Small, //  
	SUMMONOBJECT_PRO_BodyType_Middle, //  
	SUMMONOBJECT_PRO_BodyType_Big, //  
	SUMMONOBJECT_PRO_BodyType_Boss, //  
	SUMMONOBJECT_PRO_SkillEffect, //  
	SUMMONOBJECT_PRO_Dmg, //  
	SUMMONOBJECT_PRO_AtkPowerPer, //  
	SUMMONOBJECT_PRO_Skilleffect0, //  
	SUMMONOBJECT_PRO_Skilleffect1, //  
	SUMMONOBJECT_PRO_Skilleffect2, //  
	SUMMONOBJECT_PRO_Skilleffect3, //  
	SUMMONOBJECT_PRO_Skilleffect4, //  
	SUMMONOBJECT_PRO_Skilleffect5, //  
	SUMMONOBJECT_PRO_Skilleffect6, //  
	SUMMONOBJECT_PRO_Skilleffect7, //  
	SUMMONOBJECT_PRO_MoveSpeed, //  
	SUMMONOBJECT_PRO_LifeTime, //  
};

enum EGenderType // 性别  
{
	GENDER_TYPE_m   = 0, // 男性  
	GENDER_TYPE_w   = 1, // 女性  
	GENDER_TYPE_max, // 无效值  
};

enum ESkillShape // 技能形态  
{
	SKILL_SHAPE_ZHANQIE        = 0, // 斩切  
	SKILL_SHAPE_SHOUHU, // 守护  
	SKILL_SHAPE_HUIFU, // 恢复  
	SKILL_SHAPE_POHUAI, // 破坏  
	SKILL_SHAPE_MOFA, // 魔法  
	SKILL_SHAPE_AOSHU, // 奥术  
	SKILL_SHAPE_JIQIAO, // 技巧  
	SKILL_SHAPE_XUNJIE, // 迅捷  
	SKILL_SHAPE_SHENSHENG, // 神圣  
	SKILL_SHAPE_MAX, // 最大值  
	SKILL_SHAPE_FLAG_ZHANQIE   = 1 << SKILL_SHAPE_ZHANQIE, // 斩切  
	SKILL_SHAPE_FLAG_SHOUHU    = 1 << SKILL_SHAPE_SHOUHU, // 守护  
	SKILL_SHAPE_FLAG_HUIFU     = 1 << SKILL_SHAPE_HUIFU, // 恢复  
	SKILL_SHAPE_FLAG_POHUAI    = 1 << SKILL_SHAPE_POHUAI, // 破坏  
	SKILL_SHAPE_FLAG_MOFA      = 1 << SKILL_SHAPE_MOFA, // 魔法  
	SKILL_SHAPE_FLAG_AOSHU     = 1 << SKILL_SHAPE_AOSHU, // 奥术  
	SKILL_SHAPE_FLAG_JIQIAO    = 1 << SKILL_SHAPE_JIQIAO, // 技巧  
	SKILL_SHAPE_FLAG_XUNJIE    = 1 << SKILL_SHAPE_XUNJIE, // 迅捷  
	SKILL_SHAPE_FLAG_SHENSHENG = 1 << SKILL_SHAPE_SHENSHENG, // 神圣  
};

enum EItemEnterType // 获取物品来源  
{
	ITEM_ENTER_TYPE_DEFAULT = 0, // 默认值  
	ITEM_ENTER_TYPE_UNEQUIP = 1, // 卸载  
};

enum EDamageProperty // 伤害属性  
{
	DAMAGE_PROPERTY_PHY          = 0, // 物理伤害  
	DAMAGE_PROPERTY_ICE, // 冰属性伤害  
	DAMAGE_PROPERTY_FIRE, // 火属性伤害  
	DAMAGE_PROPERTY_POISON, // 毒属性伤害  
	DAMAGE_PROPERTY_THUNDER, // 雷属性伤害  
	DAMAGE_PROPERTY_NONE, // 无属性伤害  
	DAMAGE_PROPERTY_MAX, // 最大值  
	DAMAGE_PROPERTY_FLAG_PHY     = 1 << DAMAGE_PROPERTY_PHY, // 物理伤害  
	DAMAGE_PROPERTY_FLAG_ICE     = 1 << DAMAGE_PROPERTY_ICE, // 冰属性伤害  
	DAMAGE_PROPERTY_FLAG_FIRE    = 1 << DAMAGE_PROPERTY_FIRE, // 火属性伤害  
	DAMAGE_PROPERTY_FLAG_POISON  = 1 << DAMAGE_PROPERTY_POISON, // 毒属性伤害  
	DAMAGE_PROPERTY_FLAG_THUNDER = 1 << DAMAGE_PROPERTY_THUNDER, // 雷属性伤害  
	DAMAGE_PROPERTY_FLAG_NONE    = 1 << DAMAGE_PROPERTY_NONE, // 无属性伤害  
};

enum ECreatureActionState // 生物被附加的状态  
{
	CREATURE_ACTION_STATE_STAY             = 0, // 束缚 不能移动，位移技能的位移无效  
	CREATURE_ACTION_STATE_HOLD, // 昏睡 全禁止，被攻击就醒  
	CREATURE_ACTION_STATE_STUN, // 昏迷 全禁止，被攻击也不醒  
	CREATURE_ACTION_STATE_LIMIT_SKILL, // 禁魔 不能使用技能，包括普攻  
	CREATURE_ACTION_STATE_UNBEAT, // 无敌状态 不受debuff和伤害和控制  
	CREATURE_ACTION_STATE_KNOCKBACK, // 击退状态 全禁止，被攻击也不醒  
	CREATURE_ACTION_STATE_MAX, // 有记数状态最大值  
	CREATURE_ACTION_STATE_TELEPORT         = CREATURE_ACTION_STATE_MAX, // 瞬移状态  
	CREATURE_ACTION_STATE_IDLE, // 静止状态  
	CREATURE_ACTION_STATE_FLAG_STAY        = 1 << CREATURE_ACTION_STATE_STAY, // 束缚 不能移动，位移技能的位移无效  
	CREATURE_ACTION_STATE_FLAG_HOLD        = 1 << CREATURE_ACTION_STATE_HOLD, // 昏睡 全禁止，被攻击就醒  
	CREATURE_ACTION_STATE_FLAG_STUN        = 1 << CREATURE_ACTION_STATE_STUN, // 昏迷 全禁止，被攻击也不醒  
	CREATURE_ACTION_STATE_FLAG_LIMIT_SKILL = 1 << CREATURE_ACTION_STATE_LIMIT_SKILL, // 禁魔 不能使用技能，包括普攻  
	CREATURE_ACTION_STATE_FLAG_UNBEAT      = 1 << CREATURE_ACTION_STATE_UNBEAT, // 无敌状态 不受debuff和伤害和控制  
	CREATURE_ACTION_STATE_FLAG_TELEPORT    = 1 << CREATURE_ACTION_STATE_TELEPORT, // 瞬移状态  
	CREATURE_ACTION_STATE_FLAG_IDLE        = 1 << CREATURE_ACTION_STATE_IDLE, // 静止状态  
};

enum ESkillObjType // 技能作用对象的类型  
{
	SKILL_OBJ_SELF              = 0, // 只能对自己使用  
	SKILL_OBJ_TEAM, // 队员全体  
	SKILL_OBJ_TEAM_EXCLOUD_SELF, // 队员,不包括自己  
	SKILL_OBJ_FRIENDLY_ROLE, // 友好玩家,包括自己  
	SKILL_OBJ_FRIENDLY, // 包括和自己没有敌对关系的所有对象,包括npc,自己  
	SKILL_OBJ_ENEMY, //  所有敌对对象,怪物,玩家等  
	SKILL_OBJ_ALL, // 所有对象  
	SKILL_OBJ_ALL_EXCLOUD_SELF, // 所有对象,不包括自己  
	SKILL_OBJ_MAX, // 最大值  
};

enum EAoeCenter // Aoe中心类型  
{
	AOE_CETER_FORMER = 0, // 中心不变  
	AOE_CETER_FRONT, // 中心前方  
	AOE_CETER_BACK, // 中心后方  
};

enum ESkillAreaType // 范围法术区域类型  
{
	SKILL_AREA_TYPE_SINGLE   = 0, // 单体法术  
	SKILL_AREA_TYPE_ROUND, // 圆,附加Data无意义  
	SKILL_AREA_TYPE_RECT, // 正方形,附加Data为正方形的边长的一半,单位毫米  
	SKILL_AREA_TYPE_CROSS, // 十字,附加Data为直线宽度的一半,单位毫米  
	SKILL_AREA_TYPE_X, // X型,附加Data为直线宽度的一半,单位毫米  
	SKILL_AREA_TYPE_FACE_ARC, // 正面扇型,附加Data为同施法者的朝向的夹角度数,0~180  
	SKILL_AREA_TYPE_BACK_ARC, // 背面扇型,附加Data为同施法者的朝向的反向夹角度数,0~180  
	SKILL_AREA_TYPE_FACE, // 正面直线,附加Data为直线宽度,单位毫米  
	SKILL_AREA_TYPE_MAP, // 全地图,仅限于对玩家的AOE,所以会获取全地图的玩家ID  
	SKILL_AREA_TYPE_RING, // 环形 附加Data为内环的半径,单位毫米  
	SKILL_AREA_TYPE_MAX, // 最大值，无效值  
};

enum EIgnoreDefendFlag // 防御忽略类型  
{
	IGNORE_DEFEND_FLAG_NONE       = 0, // 不忽略  
	IGNORE_DEFEND_FLAG_phy        = 1, // 忽略物理防御  
	IGNORE_DEFEND_FLAG_IceDef     = 1 << 1, // 忽略冰抗  
	IGNORE_DEFEND_FLAG_FireDef    = 1 << 2, // 忽略火抗  
	IGNORE_DEFEND_FLAG_PoisonDef  = 1 << 3, // 忽略毒抗  
	IGNORE_DEFEND_FLAG_ThunderDef = 1 << 4, // 忽略雷抗  
};

enum ESkillEffect // 技能效果类型  
{
	SKILL_EFFECT_DAMAGE_HP      = 0, // 伤害HP  
	SKILL_EFFECT_DAMAGE_SP, // 伤害SP  
	SKILL_EFFECT_BALEFUL, // 有害魔法 在没有HP，SP效果的情况下指定  
	SKILL_EFFECT_CURE_HP, // 治疗,恢复HP  
	SKILL_EFFECT_CURE_MP, // 治疗,恢复SP  
	SKILL_EFFECT_HELPFUL, // 有益魔法 在没有HP，SP效果的情况下指定  
	SKILL_EFFECT_DAMAGE_OR_HEAL, // 对友方加血，对敌方减血  
	SKILL_EFFECT_NONE, // 无直接效果  
};

enum EDamageType // 攻击伤害类型  
{
	DAMAGE_TYPE_NONE       = 0, // 无伤害  
	DAMAGE_TYPE_COMMON, // 普通伤害  
	DAMAGE_TYPE_DEADLINESS, // 致命伤害  
};

enum EDamageResult // 伤害结果类型  
{
	DAMAGE_RESULT_ISDAMAGE = 0, // 伤害  
	DAMAGE_RESULT_ISCURE, // 治疗  
};

enum EDamageBring // 伤害产生来源  
{
	DAMAGE_BRING_SKILL      = 0, // 技能攻击  
	DAMAGE_BRING_BUFF, // buff攻击  
	DAMAGE_BRING_ITEM, // 药品作用  
	DAMAGE_BRING_TRAP, // 机关陷阱作用  
	DAMAGE_BRING_MAX, // 最大值  
	DAMAGE_BRING_FLAG_SKILL = 1 << DAMAGE_BRING_SKILL, // 技能攻击  
	DAMAGE_BRING_FLAG_BUFF  = 1 << DAMAGE_BRING_BUFF, // buff攻击  
	DAMAGE_BRING_FLAG_ITEM  = 1 << DAMAGE_BRING_ITEM, // 药品作用  
	DAMAGE_BRING_FLAG_TRAP  = 1 << DAMAGE_BRING_TRAP, // 机关陷阱作用  
};

enum ESkillTimingConditionType // 技能效果生效的时机  
{
	SKILL_TIMING_CONDITION_TYPE_START = 0, // 表示技能释放即生效  
	SKILL_TIMING_CONDITION_TYPE_END, // 表示技能结束时生效  
	SKILL_TIMING_CONDITION_TYPE_HIT, // 每次Hit点生效一次  
};

enum ESkillEffectHitCondition // 技能效果生效条件  
{
	SKILL_EFT_CONDITOION_ALWAYS     = 0, // 无条件生效,一般针对自己,或者一些特殊情况,比如召唤  
	SKILL_EFT_CONDITOION_HIT, // 命中目标后生效,群体技能必须命中一个目标, 命中目标后对目标或者施法者的效果  
	SKILL_EFT_CONDITOION_DEADLINESS, // 暴击后对目标或者对施法者的效果  
	SKILL_EFT_CONDITOION_MISS, // 未命中后生效,一般针对自己，攻击未命中后对自己或者对施法目标的效果  
};

enum ESkillEffectCountCondition // 表示是否每命中一个目标就生效一次  
{
	SKILL_EFFECT_COUNT_CONDITION_ONCE = 0, // 表示仅生效一次  
	SKILL_EFFECT_COUNT_CONDITION_MORE, // 表示每命中一个目标生效一次  
};

enum ECheckBuffType // 检查BUFF类型  
{
	CHECK_BUFF_NONE        = 0, // 不检查  
	CHECK_BUFF_CLASS, // 检查BUFF大类  
	CHECK_BUFF_SUB_CLASS, // 检查BUFF小类 byClass = data / 10000; SubClassID = dwID % 10000 
	CHECK_BUFF_CLASS_ID, // 检查相应1级BUFFID  
	CHECK_BUFF_TEMPLATE_ID, // 检查相应BUFF模板ID  
	CHECK_BUFF_DAMAGE_PRO, // 检查buff的攻击属性  
};

enum EBuffClass // buff大类别  
{
	BUFF_CLASS_CONTROL  = 0, // 控制类  
	BUFF_CLASS_INCREASE, // 增益类  
	BUFF_CLASS_DECREASE, // 减益类  
	BUFF_CLASS_NONE, // 其他类  
};

enum EControlSubClass // 控制类小类别  
{
	CONTROL_SUBCLASS_STAY        = 0, // 束缚 不能移动，位移技能的位移无效  
	CONTROL_SUBCLASS_HOLD, // 昏睡 全禁止，被攻击就醒  
	CONTROL_SUBCLASS_STUN, // 昏迷 全禁止，被攻击也不醒  
	CONTROL_SUBCLASS_LIMIT_SKILL, // 禁魔 不能使用技能，包括普攻  
};

enum EIncreaseSubClass // 增益类小类别  
{
	INCREASE_SUBCLASS_NORMAL        = 0, // 增加creature某个属性  
	INCREASE_SUBCLASS_SPEED_UP_ATT, // 加速,攻击速度  
	INCREASE_SUBCLASS_SPEED_UP_MOVE, // 加速,移动速度  
};

enum EDecreaseSubClass // 减益类小类别  
{
	DECREASE_SUBCLASS_NORMAL        = 0, // 降低 creature某个属性  
	DECREASE_SUBCLASS_SPEED_UP_ATT, // 减速,攻击速度  
	DECREASE_SUBCLASS_SPEED_UP_MOVE, // 减速,移动速度  
};

enum EBuffFlag // BUFF标志位  
{
	BUFF_FLAG_HIDE           = 1 << 0, // 隐藏类状态  
	BUFF_FLAG_OFFLINE_SAVE   = 1 << 1, // 下线保留  
	BUFF_FLAG_OFFLINE_TIME   = 1 << 2, // 下线后仍然计时  
	BUFF_FLAG_SHARE_MULTI    = 1 << 3, // 是否可以多个共存 1可以 0不可以  
	BUFF_FLAG_SWAP_OTHERS    = 1 << 4, // 是否可以替换别人的 替换同类的别人的buff  
	BUFF_FLAG_DEAD_HOLD      = 1 << 5, // 死亡时保留  
	BUFF_FLAG_REFRESH_TIME   = 1 << 6, // 同等级替换时是否刷新时间  
	BUFF_FLAG_AURA_EXCLUDE   = 1 << 7, // 光环作用排除自己  
	BUFF_FLAG_SCENE_CHG_SAVE = 1 << 8, // 离开场景是否保留 1保留  
	BUFF_FLAG_TYPE_DEBUFF    = 1 << 9, // 是否有害状态 debuff  
};

enum EBuffRemoveFlag // buff移除限制  
{
	BUFF_REMOVE_FLAG_EFFECT = 1 << 0, // 可以被效果移除 技能物品等  
	BUFF_REMOVE_FLAG_HAND   = 1 << 1, // 可以被手动移除  
};

enum EBuffEffectType // BUFF效果生效类型  
{
	BUFF_EFFECT_NONE                  = 0, // 无效果  
	BUFF_EFFECT_START, // 开始生效  
	BUFF_EFFECT_PERIODIC, // 周期性生效  
	BUFF_EFFECT_END, // 结束时生效  
	BUFF_EFFECT_SPRING, // 触发生效  
	BUFF_EFFECT_FULL_LAYER, // 层数叠满时生效  
	BUFF_EFFECT_MOD_PRO, // 表示该效果修正人物属性  
	BUFF_EFFECT_MOD_SKILL_INFO_PRO, // 表示该效果修正技能info表属性  
	BUFF_EFFECT_MOD_SKILL_ACTION_PRO, // 表示该效果修正技能action表属性  
	BUFF_EFFECT_MOD_SKILL_EFFECT_PRO, // 表示该效果修正SKILLEFFECT表的属性  
	BUFF_EFFECT_MOD_SUMMONOBJECT_PRO , // 表示该效果修正召唤物的属性  
};

enum EBuffEndType // buff结束方式  
{
	BUFF_END_NONE        = 0, // 未结束  
	BUFF_END_TIMEUP, // 时间耗尽  
	BUFF_END_DISPEL, // 被驱散  
	BUFF_END_USEUP, // 触发次数耗尽  
	BUFF_END_DEAD, // 死亡消失  
	BUFF_END_HAND, // 手动取消  
	BUFF_END_LEAVE_SCENE, // 离开场景  
	BUFF_END_LEAVE_GAME, // 离开游戏  
	BUFF_END_UNKNOWN, // 未知原因  
};

enum EEffectSkillBuffOptType // 效果修正技能，修正buff的效果  
{
	EFFECT_SKILL_BUFF_OPT_ADDBUFF             = 0, // 添加一个buff  
	EFFECT_SKILL_BUFF_OPT_MOD_SKILL, // 修改单一技能  
	EFFECT_SKILL_BUFF_OPT_MOD_BUFF_TEMPLATEID, // 修改某个模板id的buff  
	EFFECT_SKILL_BUFF_OPT_MOD_BUFF_CLASS, // 修改某类classid的buff  
	EFFECT_SKILL_BUFF_OPT_LEVEL_UP_SKILL, // 将某个技能的等级提升一级 配置技能的classid  
};

enum EImmunityType // 免疫能力 todo,继续添加  
{
	IMMUNITY_TYPE_STAY             = 0, // 免疫stay效果  
	IMMUNITY_TYPE_HOLD, // 免疫hold效果  
	IMMUNITY_TYPE_STUN, // 免疫一切stun效果  
	IMMUNITY_TYPE_LIMIT_SKILL, // 免疫一切禁魔效果  
	IMMUNITY_TYPE_SLOW_ATT, // 免疫一切slow效果 减少攻击速度  
	IMMUNITY_TYPE_SLOW_MOVE, // 免疫一切slow效果 减少移动速度  
	IMMUNITY_TYPE_CATCH, // 免疫一切catch效果 针对效果的  抓取  
	IMMUNITY_TYPE_ROCK, // 免疫一切rock效果  针对效果的  击飞  
	IMMUNITY_TYPE_ATT_PHY, // 免疫一切物理攻击和伤害  
	IMMUNITY_TYPE_ATT_ICE, // 免疫一切冰攻击和伤害  
	IMMUNITY_TYPE_ATT_FIRE, // 免疫一切火攻击和伤害  
	IMMUNITY_TYPE_ATT_POISON, // 免疫一切毒攻击和伤害  
	IMMUNITY_TYPE_ATT_THUNDER, // 免疫一切雷攻击和伤害  
	IMMUNITY_TYPE_MAX, // 最大值  
	IMMUNITY_TYPE_FLAG_STAY        = 1 << IMMUNITY_TYPE_STAY, // 免疫stay效果  
	IMMUNITY_TYPE_FLAG_HOLD        = 1 << IMMUNITY_TYPE_HOLD, // 免疫hold效果  
	IMMUNITY_TYPE_FLAG_STUN        = 1 << IMMUNITY_TYPE_STUN, // 免疫一切stun效果  
	IMMUNITY_TYPE_FLAG_LIMIT_SKILL = 1 << IMMUNITY_TYPE_LIMIT_SKILL, // 免疫一切禁魔效果  
	IMMUNITY_TYPE_FLAG_SLOW_ATT    = 1 << IMMUNITY_TYPE_SLOW_ATT, // 免疫一切slow效果 减少攻击速度  
	IMMUNITY_TYPE_FLAGSLOW_MOVE    = 1 << IMMUNITY_TYPE_SLOW_MOVE, // 免疫一切slow效果 减少移动速度  
	IMMUNITY_TYPE_FLAG_CATCH       = 1 << IMMUNITY_TYPE_CATCH, // 免疫一切catch效果 针对效果的  抓取  
	IMMUNITY_TYPE_FLAG_ROCK        = 1 << IMMUNITY_TYPE_ROCK, // 免疫一切rock效果  针对效果的  击飞  
	IMMUNITY_TYPE_FLAG_ATT_PHY     = 1 << IMMUNITY_TYPE_ATT_PHY, // 免疫一切物理攻击和伤害  
	IMMUNITY_TYPE_FLAG_ATT_ICE     = 1 << IMMUNITY_TYPE_ATT_ICE, // 免疫一切冰攻击和伤害  
	IMMUNITY_TYPE_FLAG_ATT_FIRE    = 1 << IMMUNITY_TYPE_ATT_FIRE, // 免疫一切火攻击和伤害  
	IMMUNITY_TYPE_FLAG_ATT_POISON  = 1 << IMMUNITY_TYPE_ATT_POISON, // 免疫一切毒攻击和伤害  
	IMMUNITY_TYPE_FLAG_ATT_THUNDER = 1 << IMMUNITY_TYPE_ATT_THUNDER, // 免疫一切雷攻击和伤害  
};

enum EOpreationType // 技能，buff等所调用的操作类型  
{
	OPREATION_TYPE_NONE                 = 0, // 无效果  
	OPREATION_TYPE_FOREVER, // 永久类效果 包括增加，减少HP,SP等  
	OPREATION_TYPE_STATE, // 附加状态，一些控制类的状态，例如昏迷、束缚等  
	OPREATION_TYPE_ADD_BUFF, // 附加BUFF  
	OPREATION_TYPE_DISPEL, // 驱散buff（需要判断buff的驱散标志位）  
	OPREATION_TYPE_DO_BUFF_DAMAGE, // 进行buff伤害   
	OPREATION_TYPE_ADD_SKILL_POINT , // 增加技能点  
	OPREATION_TYPE_DO_SKILL_COOLDOWN , // 使技能冷却  
	OPREATION_TYPE_CLEAR_SKILL_COOLDOWN, // 消除技能冷却  
	OPREATION_TYPE_INTERUPT_SKILL, // 打断技能释放  
	OPREATION_TYPE_SUMMON_MONSTER, // 召唤怪物  
	OPREATION_TYPE_TELEPORT, // 瞬移11  
	OPREATION_TYPE_DOACTION, // 直接调用action 12  
	OPREATION_TYPE_COMBO, // 修改是否连招 13  
	OPREATION_TYPE_ATTACKGETHP, // 吸血 14  
	OPERATION_TYPE_HURTMODIFYBUFF, // 15表示对拥有某个类型的buff的目标造成的伤害进行万分比修正 
	OPERATION_TYPE_HURTMODIFY, // 16表示对造成或受到的伤害进行万分比的修正 
	OPERATION_TYPE_SUMMON, // 17 
	OPERATION_TYPE_HIDESHOW, // 18 
	OPERATION_TYPE_FLASH, // 19 闪现 
};

enum ETeleportType // 瞬移方式  
{
	TELEPORT_TYPE_KNOCK = 0, // 被击飞  
	TELEPORT_TYPE_DRAG  = 0, // 被拖拽 拖拽到施法者附近  
};

enum ESkillCooldownType // 技能冷却方式  
{
	SKILL_COOLDOWN_TYPE_TEMPLATE_ID = 0, // 按技能的模板id冷却  
	SKILL_COOLDOWN_TYPE_SHAPE, // 按技能形态冷却  
	SKILL_COOLDOWN_TYPE_ALL, // 完全冷却  
};

enum EOpreationFlag // 操作相关的一些枚举  
{
	OPREATION_FLAG_MOD_HP  = 0, // 永久类效果，操作HP  
	OPREATION_FLAG_MOD_SP  = 1, // 永久类效果，操作SP  
	OPREATION_FLAG_ADD     = 0, // 增加  
	OPREATION_FLAG_REDUCE  = 1, // 减少  
	OPREATION_FLAG_SET     = 2, // 设置  
	OPREATION_FLAG_INTEGER = 0, // 整数  
	OPREATION_FLAG_PERCENT = 1, // 百分比  
};

enum EDoOperationType // 操作处理类型  
{
	DO_OPERATION_TYPE_START  = 0, // 开始时处理  
	DO_OPERATION_TYPE_ADD, // 增加层数处理  
	DO_OPERATION_TYPE_REDUCE, // 层数减少处理  
	DO_OPERATION_TYPE_REMOVE, // 移除时处理  
};

enum ESkillInfoPro // SkillInfo表内可能被修正的属性  
{
	SKILL_INFO_PRO_Cooldown = 0, // 冷却时间  
};

enum ESkillActionPro // SkillAction表内可能被修正的属性  
{
	SKILL_ACTION_PRO_CostSP                         = 0, //   
	SKILL_ACTION_PRO_IgnoreAction, //   
	SKILL_ACTION_PRO_TargetType, //   
	SKILL_ACTION_PRO_HitPer, //   
	SKILL_ACTION_PRO_CriticalPer, //   
	SKILL_ACTION_PRO_CriticalDmgPer, //   
	SKILL_ACTION_PRO_oeAimNum, //   
	SKILL_ACTION_PRO_AoeCenterType, //   
	SKILL_ACTION_PRO_oeCenterData, //   
	SKILL_ACTION_PRO_AoeAreaType, //   
	SKILL_ACTION_PRO_oeAreaData, //   
	SKILL_ACTION_PRO_IgnoreDef, //   
	SKILL_ACTION_PRO_IgnoreDefendAmount, //   
	SKILL_ACTION_PRO_DamagePer, //   
	SKILL_ACTION_PRO_MoreDamagePer_BODY_TYPE_small, //   
	SKILL_ACTION_PRO_MoreDamagePer_BODY_TYPE_middle, //   
	SKILL_ACTION_PRO_MoreDamagePer_BODY_TYPE_big, //   
	SKILL_ACTION_PRO_MoreDamagePer_BODY_TYPE_boss, //   
	SKILL_ACTION_PRO_SkillEffect, //   
	SKILL_ACTION_PRO_DirectDmgMin, //   
	SKILL_ACTION_PRO_DirectDmgMax, //   
	SKILL_ACTION_PRO_Dmg, // 所有段的攻击都被修正  
	SKILL_ACTION_PRO_AtkPowerPer, // 所有段调用的攻击力都被修正  
	SKILL_ACTION_PRO_skillEffectSelf0, // 修改技能对自身所调用的的效果0  
	SKILL_ACTION_PRO_skillEffectSelf1, // 修改技能对自身所调用的的效果1  
	SKILL_ACTION_PRO_skillEffectSelf2, // 修改技能对自身所调用的的效果2  
	SKILL_ACTION_PRO_skillEffectSelf3, // 修改技能对自身所调用的的效果3  
	SKILL_ACTION_PRO_skillEffectSelf4, // 修改技能对自身所调用的的效果4  
	SKILL_ACTION_PRO_skillEffectSelf5, // 修改技能对自身所调用的的效果5  
	SKILL_ACTION_PRO_skillEffectSelf6, // 修改技能对自身所调用的的效果6  
	SKILL_ACTION_PRO_skillEffectSelf7, // 修改技能对自身所调用的的效果7  
	SKILL_ACTION_PRO_skillEffect0, // 修改技能调用的的效果0  
	SKILL_ACTION_PRO_skillEffect1, // 修改技能调用的的效果1  
	SKILL_ACTION_PRO_skillEffect2, // 修改技能调用的的效果2  
	SKILL_ACTION_PRO_skillEffect3, // 修改技能调用的的效果3  
	SKILL_ACTION_PRO_skillEffect4, // 修改技能调用的的效果4  
	SKILL_ACTION_PRO_skillEffect5, // 修改技能调用的的效果5  
	SKILL_ACTION_PRO_skillEffect6, // 修改技能调用的的效果6  
	SKILL_ACTION_PRO_skillEffect7, // 修改技能调用的的效果7  
	SKILL_ACTION_PRO_HealRatio, // 治疗的的万分比调整  
};

enum ESkillEffectPro // SkillInfo表内可能被修正的属性  
{
	SKILL_EFFECT_PRO_HitCondition        = 0, // 冷却时间  
	SKILL_EFFECT_PRO_MonsterBodyTypeFlag, //   
	SKILL_EFFECT_PRO_SelfCheckType, //   
	SKILL_EFFECT_PRO_SelfBuffID, //   
	SKILL_EFFECT_PRO_TgtCheckType, //   
	SKILL_EFFECT_PRO_TgtBuffID, //   
	SKILL_EFFECT_PRO_Probability, //   
	SKILL_EFFECT_PRO_Flag, //   
	SKILL_EFFECT_PRO_OperationID, //   
	SKILL_EFFECT_PRO_OperationData, //   
	SKILL_EFFECT_PRO_OperationData1, //   
};

enum EPetQuality // 宠物品质  
{
	PET_QUALITY_GRAY   = 0, // 灰色品质  
	PET_QUALITY_WHITE  = 1, // 白色品质  
	PET_QUALITY_GREEN  = 2, // 绿色品质  
	PET_QUALITY_BLUE   = 3, // 蓝色品质  
	PET_QUALITY_PURPLE = 4, // 紫色品质  
	PET_QUALITY_GOD    = 5, // 金色品质  
	PET_QUALITY_CS     = 6, // 传说品质  
	PET_QUALITY_SS     = 7, // 史诗品质  
	PET_QUALITY_MAX, // 最大值  
};

enum EPetTeam // 宠物队列索引 
{
	PET_TEAM_MIN = 0, // MIN  
	PET_TEAM1    = 0, // team1  
	PET_TEAM2, // team2  
	PET_TEAM3, // team3  
	PET_TEAM_MAX, // MAX  
};

enum EPetBattlePos // 宠物出战位置  
{
	PET_BTPOS_TEAM        = 7, // 一组出战队伍中宠物数量 
	PET_BTPOS_UNKNOWN     = -1, // 无效位 
	PET_BTPOS_CAPTAIN     = 0, // 队长位  
	PET_BTPOS_JOIN1, // 参战位1  
	PET_BTPOS_JOIN2, // 参战位2  
	PET_BTPOS_JOIN_MAX, // 参战位max  
	PET_BTPOS_ASSISTANT1  = PET_BTPOS_JOIN_MAX, // 辅助位1  
	PET_BTPOS_ASSISTANT2, // 辅助位2  
	PET_BTPOS_ASSISTANT3, // 辅助位3  
	PET_BTPOS_ASSISTANT4, // 辅助位4  
	PET_BTPOS1_CAPTAIN, // 队长位  
	PET_BTPOS1_JOIN1, // 参战位1  
	PET_BTPOS1_JOIN2, // 参战位2  
	PET_BTPOS1_ASSISTANT1, // 辅助位1  
	PET_BTPOS1_ASSISTANT2, // 辅助位2  
	PET_BTPOS1_ASSISTANT3, // 辅助位3  
	PET_BTPOS1_ASSISTANT4, // 辅助位4  
	PET_BTPOS2_CAPTAIN, // 队长位  
	PET_BTPOS2_JOIN1, // 参战位1  
	PET_BTPOS2_JOIN2, // 参战位2  
	PET_BTPOS2_ASSISTANT1, // 辅助位1  
	PET_BTPOS2_ASSISTANT2, // 辅助位2  
	PET_BTPOS2_ASSISTANT3, // 辅助位3  
	PET_BTPOS2_ASSISTANT4, // 辅助位4  
	PET_BTPOS_MAX, // 最大值  
};

enum EPetUp // 宠物强化  
{
	PET_UP_MIN = 0, // 最小强化  
	PET_UP_0   = 0, // 强0  
	PET_UP_1, // 强1  
	PET_UP_2, // 强2  
	PET_UP_3, // 强3  
	PET_UP_4, // 强4  
	PET_UP_5, // 强5  
	PET_UP_6, // 强6  
	PET_UP_7, // 强7  
	PET_UP_8, // 强8  
	PET_UP_9, // 强9  
	PET_UP_MAX = 5, // 最大强化  
};

enum ELockType // 宠物强化  
{
	ROLE_ITEM_LOCK = 1, //  角色物品  
	PET_ITEM_LOCK  = 2, //  宠物物品  
	PET_LOCK       = 3, //  宠物  
};

enum EReturnType //  
{
	GS_RESULT_YES     = 1, //  
	GS_RESULT_NO      = 0, //  
	GS_RESULT_SUCCESS = 1, //  
	GS_RESULT_FAIL    = 0, //  
};

enum ERoleItemEvent //  
{
	ROLE_ITEM_EVENT_SELL = 0, //  
};

enum EItemUpEvent //  
{
	ITEM_UP_LJ  = 0, //  
	ITEM_UP_PER = 1, //  
	ITEM_UP_EXP = 2, //  
};

enum EPetEvent //  
{
	PET_ITEM_EVENT_SELL = 0, //  
	PET_EVENT_SELL      = 1, //  
};

enum EMonsterAbility //  
{
	MONSTER_ABILITY_normal        = 0, //  普通  
	MONSTER_ABILITY_outstand, //  精英  
	MONSTER_ABILITY_copy, //  副本  
	MONSTER_ABILITY_boss, //  Boss  
	MONSTER_ABILITY_boss_big, //  中型Boss  
	MONSTER_ABILITY_boss_large, //  大型Boss  
	MONSTER_ABILITY_NPC, //  npc  
	MONSTER_ABILITY_max, //  max  
	MONSTER_ABILITY_FLAG_normal   = 1 << MONSTER_ABILITY_normal, //  普通  
	MONSTER_ABILITY_FLAG_outstand = 1 << MONSTER_ABILITY_outstand, //  精英  
	MONSTER_ABILITY_FLAG_copy     = 1 << MONSTER_ABILITY_copy, //  副本  
	MONSTER_ABILITY_FLAG_boss     = 1 << MONSTER_ABILITY_boss, //  Boss  
	MONSTER_ABILITY_FLAG_NPC      = 1 << MONSTER_ABILITY_NPC, //  npc  
};

enum EMonsterBodyType //  
{
	MONSTER_BODY_TYPE_small       = 0, //  小型  
	MONSTER_BODY_TYPE_middle, //  中型  
	MONSTER_BODY_TYPE_big, //  大型  
	MONSTER_BODY_TYPE_boss, //  Boss  
	MONSTER_BODY_TYPE_max, //  max  
	MONSTER_BODY_TYPE_FLAG_small  = 1 << MONSTER_BODY_TYPE_small, //  小型  
	MONSTER_BODY_TYPE_FLAG_middle = 1 << MONSTER_BODY_TYPE_middle, //  中型  
	MONSTER_BODY_TYPE_FLAG_big    = 1 << MONSTER_BODY_TYPE_big, //  大型  
	MONSTER_BODY_TYPE_FLAG_boss   = 1 << MONSTER_BODY_TYPE_boss, //  Boss  
};

enum EItemPos //  
{
	ItemPos_Bag       = 1, //  
	ItemPos_Equip     = 2, //  
	ItemPos_Warehouse = 4, //  
	ItemPos_None      = 0, //  
};

enum EItemQuality // 物品品质  
{
	ITEM_QUALITY_GRAY   = 0, // 灰色品质  
	ITEM_QUALITY_WHITE  = 1, // 白色品质  
	ITEM_QUALITY_GREEN  = 2, // 绿色品质  
	ITEM_QUALITY_BLUE   = 3, // 蓝色品质  
	ITEM_QUALITY_PURPLE = 4, // 紫色品质  
	ITEM_QUALITY_GOD    = 5, // 金色品质  
	ITEM_QUALITY_CS     = 6, // 传说品质  
	ITEM_QUALITY_SS     = 7, // 史诗品质  
	ITEM_QUALITY_MAX, // 最大值  
};

enum ERoleItemEquipSlot // 物品装备位置 
{
	RoleItemEquipSlot_Equip_Min    = 0, // 开始 
	RoleItemEquipSlot_Weapon       = 0, // 武器 
	RoleItemEquipSlot_Helmet       = 1, // 帽子 
	RoleItemEquipSlot_Clothing     = 2, // 上衣 
	RoleItemEquipSlot_Gloves       = 3, // 手套 
	RoleItemEquipSlot_Trousers     = 4, // 下装 
	RoleItemEquipSlot_Mantle       = 5, // 披风 
	RoleItemEquipSlot_Ring         = 6, // 戒指 
	RoleItemEquipSlot_Adron        = 7, // 饰品 
	RoleItemEquipSlot_Necklace     = 8, // 项链 
	RoleItemEquipSlot_SecondWeapon = 9, // 副手武器 
	RoleItemEquipSlot_Equip_Max    = 10, // 装备位数量 
};

enum EPetItemEquipSlot // 宠物装备位置 
{
	PetItemEquipSlot_Equip_Min = 0, // 开始 
	PetItemEquipSlot_Weapon    = 0, // 武器 
	PetItemEquipSlot_Armor     = 1, // 防具 
	PetItemEquipSlot_Adorn     = 2, // 饰品 
	PetItemEquipSlot_Equip_Max = 3, // 最大数量 
};

enum EItemClass // 物品分类 
{
	ItemClass_Role_Equip_Start = 0, // 开始 
	ItemClass_Weapon           = 0, // 武器 
	ItemClass_Armor            = 1, // 防具 
	ItemClass_Adorn            = 2, // 首饰 
	ItemClass_Role_Equip_End, // 结束 
	ItemClass_Role_Item        = 51, // 普通物品 
	ItemClass_Pet_Equip        = 100, // 宠物装备 
	ItemClass_Pet_Item         = 101, // 宠物物品 
};

enum EItemSubClass_Role_Item // 角色物品小类 
{
	ItemSubClass_Role_Item      = 0, // 通用类型 
	ItemSubClass_Role_Item_Hole = 1, // 宝石 
	ItemSubClass_Role_Item_Prod = 2, // 图纸 
};

enum EItemSubClass_Pet_Equip // 宠物装备分类 
{
	ItemSubClass_Pet_Equip = 0, // 通用类型 
};

enum EItemSubClass_Pet_Item // 宠物物品分类 
{
	ItemSubClass_Pet_Item    = 0, // 通用类型 
	ItemSubClass_Pet_Card    = 1, // 宠物卡片 
	ItemSubClass_Pet_SubCard = 2, // 宠物碎片 
};

enum EItemSubClass_Weapon // 物品分类.武器分小类 
{
	ItemSubClass_Sword       = 0, // 剑 
	ItemSubClass_Wand, // 杖 
	ItemSubClass_Bow, // 弓 
	ItemSubClass_Hammer, // 锤子 
	ItemSubClass_Shield, // 战盾 
	ItemSubClass_Hudun, // 护盾 
	ItemSubClass_Hufu, // 护符 
	ItemSubClass_Jiandai, // 箭袋 
	ItemSubClassFlag_Sword   = 1 << ItemSubClass_Sword, // 剑 
	ItemSubClassFlag_Wand    = 1 << ItemSubClass_Wand, // 杖 
	ItemSubClassFlag_Bow     = 1 << ItemSubClass_Bow, // 弓 
	ItemSubClassFlag_Hammer  = 1 << ItemSubClass_Hammer, // 锤子 
	ItemSubClassFlag_Shield  = 1 << ItemSubClass_Shield, // 盾 
	ItemSubClassFlag_Hudun   = 1 << ItemSubClass_Hudun, // 护盾 
	ItemSubClassFlag_Hufu    = 1 << ItemSubClass_Hufu, // 护符 
	ItemSubClassFlag_Jiandai = 1 << ItemSubClass_Jiandai, // 箭袋 
};

enum EItemSubClass_Armor // 物品分类.防具分小类 
{
	ItemSubClass_Helmet   = 0, // 帽子 
	ItemSubClass_Clothing, // 上衣 
	ItemSubClass_Gloves, // 手套 
	ItemSubClass_Trousers, // 下装 
	ItemSubClass_Mantle, // 披风 
};

enum EItemSubClass_Adorn // 物品分类.首饰分小类 
{
	ItemSubClass_Ring     = 0, // 戒指 
	ItemSubClass_Adron, // 饰品 
	ItemSubClass_Necklace, // 项链 
};

enum ELevelCompleteResult // 关卡完成评价 
{
	LEVEL_COMPLETE_RESULT_NO  = 0, // 未完成 
	LEVEL_COMPLETE_RESULT_B, // B级评价 
	LEVEL_COMPLETE_RESULT_A, // A级评价 
	LEVEL_COMPLETE_RESULT_S, // S级评价 
	LEVEL_COMPLETE_RESULT_MAX, // 最大值 
};

enum RS_ROLE_PROERTY_TYPE //  
{
	RS_ROLE_PROPERTY_NULL   = 0, // 空 
	RS_ROLE_PROPERTY_BASE   = 1, // 基础属性 
	RS_ROLE_PROPERTY_PET    = 2, // 宠物数据 
	RS_ROLE_PROPERTY_EQUIP  = 3, // 装备数据 
	RS_ROLE_PROPERTY_ONLINE = 4, // 在线数据 
};

enum RS_ACTIVITY_ABYSS_STATE_TYPE //  
{
	RS_ACTIVITY_ABYSS_STATE_NULL         = 0, // 初始 
	RS_ACTIVITY_ABYSS_STATE_TRIGGER      = 1, // 触发状态 
	RS_ACTIVITY_ABYSS_STATE_TRIGGER_OVER = 1, // 触发为打开而消失状态 
	RS_ACTIVITY_ABYSS_STATE_OPEN         = 2, // 打开状态 
	RS_ACTIVITY_ABYSS_STATE_KILLED       = 3, // 被杀死状态 
	RS_ACTIVITY_ABYSS_STATE_RUN          = 4, // 逃跑状态 
};

enum LEVEL_BATTLE_TYPE //  
{
	LEVEL_BATTLE_TYPE_NORMAL         = 0, // 正常推图 
	LEVEL_BATTLE_TYPE_ABYSS          = 1, // 深渊活动 
	LEVEL_BATTLE_TYPE_WORLD_BOSS     = 2, // 世界boss 
	LEVEL_BATTLE_TYPE_PET_TRAIN      = 3, // 战魂试炼活动 
	LEVEL_BATTLE_TYPE_MONEY_DUNGEONS = 4, // 金钱副本活动 
	LEVEL_BATTLE_TYPE_FIRE_GRAGON    = 5, // 火龙塔活动 
};

enum MAIL_TYPE //  
{
	mail_type_system = 0, // 系统邮件 
	mail_type_user   = 1, // 非好友玩家邮件 
	mail_type_friend = 2, // 好友邮件 
};

enum EBuyPetType //  
{
	EBuyPetType_Exchange    = 0, //  
	EBuyPetType_Cheap       = 1, //  
	EBuyPetType_Expensive   = 2, //  
	EBuyPetType_Expensive10 = 3, //  
};

enum EShopPetType // 商城宠物库类型 
{
	EShopPetType_Exchange  = 0, // 商城兑换库 
	EShopPetType_Cheap     = 1, // 低档购买库 
	EShopPetType_Expensive = 2, // 高档购买库 
	EShopPetType_Critical  = 3, // 高档必中库 
};

enum EBuyEPResult //  
{
	EBuyEPResult_Success = 0, // 购买体力成功 
	EBuyEPResult_EPMax   = 1, // 体力值已满，不能购买 
};

enum EShopLimitType // 商城限购类型 
{
	EShopLimitType_None    = 0, // 不限购 
	EShopLimitType_Forever = 1, // 永久限购 
	EShopLimitType_Day     = 2, // 每日限购 
};

enum EShopBuyResult //  
{
	EShopBuyResult_Success   = 0, // 购买商品成功 
	EShopBuyResult_Fail      = 1, // 购买商品失败,这里不提示失败原因 
	EShopBuyResult_BagFull   = 2, // 背包已满 
	EShopBuyResult_NoCrystal = 3, // 神秘水晶不够 
	EShopBuyResult_NoCash    = 4, // 徽章不够 
	EShopBuyResult_NoMoney   = 5, // 金币不够 
};

enum EMonthCardAwardResult //  
{
	EMonthCardAwardResult_Success = 0, // 月卡领取成功 
	EMonthCardAwardResult_Fail    = 1, // 月卡领取失败 
	EMonthCardAwardResult_Expired = 2, // 月卡已过期 
};

enum EDayQuestType //  
{
	EDayQuestType_INVALID = 100, // 无意义 
	EDayQuestType_FB1     = 101, // 普通副本 
	EDayQuestType_FB2     = 102, // 精英副本 
	EDayQuestType_FB3     = 103, // 专家副本 
	EDayQuestType_ItemUp  = 104, // 装备强化 
	EDayQuestType_GEM     = 105, // 宝石镶嵌 
	EDayQuestType_PVP     = 106, // 竞技场 
	EDayQuestType_PetUp   = 107, // 升级宠物 
	EDayQuestType_AP      = 108, // 与好友一起战斗 
	EDayQuestType_MAX     = 109, // 最大值，无意义 
};

enum EJihuoma //  
{
	EJihuomaSuccess       = 1, // 成功 
	EJihuomaCodeLenExceed = 2, // 长度越界 
	EJihuomaGDSysError    = 3, // GD系统错误 
	EJihuomaSysError      = 4, // 系统错误 
	EJihuomaMsgFieldError = 5, // 消息包字段错误 
	EJihuomaCodeIllegal   = 6, // 激活码不正确 
	EJihuomaAlreadyUsed   = 7, // 激活码已被使用 
	EJihuomaAddItemFailed = 8, // 添加物品失败 
};

enum EReceiveEPResult //  
{
	EReceiveEPResult_Success    = 1, // 领取成功 
	EReceiveEPResult_NotInTime  = 2, // 不在领取时间段 
	EReceiveEPResult_AlreadyGet = 3, // 在领取时间段但是已经领过 
	EReceiveEPResult_SysError   = 4, // 系统错误 
};

enum MILITARY_NAME_COLOR_TYPE //  
{
	MILITARY_NAME_COLOR_WHITE  = 0, // 白色 
	MILITARY_NAME_COLOR_GREEN  = 1, // 绿色 
	MILITARY_NAME_COLOR_BLUE   = 2, // 蓝色 
	MILITARY_NAME_COLOR_PURPLE = 3, // 紫色 
	MILITARY_NAME_COLOR_ORANGE = 4, // 橙色 
};

enum PVP_GET_POINTS_TYPE //  
{
	PVP_GET_POINTS_TYPE_NORMAL = 0, // 获取一般积分 
	PVP_GET_POINTS_TYPE_LARGE  = 1, // 获取大量积分 
	PVP_GET_POINTS_TYPE_SUPER  = 2, // 获取超多积分 
};

enum WORLD_BOSS_STATUS_TYPE //  
{
	WORLD_BOSS_STATUS_TYPE_NORMAL  = 0, // 初始 
	WORLD_BOSS_STATUS_TYPE_PREPARE = 1, // 准备 
	WORLD_BOSS_STATUS_TYPE_BEGIN   = 2, // 开始 
	WORLD_BOSS_STATUS_TYPE_RUN     = 3, // 逃跑 
	WORLD_BOSS_STATUS_TYPE_KILLED  = 4, // 杀死 
	WORLD_BOSS_STATUS_TYPE_CALC    = 5, // 结算 
	WORLD_BOSS_STATUS_TYPE_END     = 6, // 结束 
};

enum EGuildPosition //  
{
	EGuildPosition_President     = 1, // 会长 
	EGuildPosition_VicePresident = 2, // 副会长 
	EGuildPosition_Elite         = 3, // 精英 
	EGuildPosition_Common        = 4, // 普通 
};

enum EGuildListResult //  
{
	EGuildListResult_OK      = 1, // 操作成功 
	EGuildListResult_PageMax = 2, // 查询页数过大 
};

enum EGuildEnterResult //  
{
	EGuildEnterResult_OK        = 1, // 操作成功 
	EGuildEnterResult_InGuild   = 2, // 已经入会 
	EGuildEnterResult_EnterMax  = 3, // 该公会已经有太多人申请 
	EGuildEnterResult_MemberMax = 4, // 该公会已经人满为患 
};

enum EGuildLeaveResult //  
{
	EGuildLeaveResult_OK        = 1, // 操作成功 
	EGuildLeaveResult_President = 2, // 将会长职位传给其他人后才可脱离公会 
	EGuildLeaveResult_SysError  = 4, // 系统错误 
};

enum EGuildCreateResult //  
{
	EGuildCreateResult_OK        = 1, // 操作成功 
	EGuildCreateResult_NameExist = 2, // 公会名称已存在 
	EGuildCreateResult_NameShort = 3, // 公会名称字数不足 
	EGuildCreateResult_NameLong  = 4, // 公会名称字数过多 
	EGuildCreateResult_AimShort  = 5, // 公会宗旨字数不足 
	EGuildCreateResult_AimLong   = 6, // 公会宗旨字数过多 
};

enum EGuildLogType //  
{
	EGuildLogType_MemberEnter      = 11, // 成员加入 
	EGuildLogType_MemberKick       = 12, // 成员踢出 
	EGuildLogType_PotitionChange   = 13, // 职位调整 
	EGuildLogType_PresidentChange  = 14, // 会长转让 
	EGuildLogType_PresidentImpeach = 15, // 会长弹劾 
	EGuildLogType_LevelUp          = 20, // 公会升级 
	EGuildLogType_TechnologyUp     = 30, // 公会科技升级 
	EGuildLogType_Pray             = 40, // 公会祈福 
	EGuildLogType_NoticeChange     = 50, // 公告修改 
	EGuildLogType_AimChange        = 60, // 宗旨修改 
};

enum EGuildLogResult //  
{
	EGuildLogResult_OK        = 1, // 操作成功 
	EGuildLogResult_NotMember = 2, // 非公会成员 
	EGuildLogResult_SysError  = 3, // 系统错误 
};

enum EGuildChangeNoticeResult //  
{
	EGuildChangeNoticeResult_OK        = 1, // 操作成功 
	EGuildChangeNoticeResult_NotMember = 2, // 非公会成员 
	EGuildChangeNoticeResult_SysError  = 3, // 系统错误 
};

enum EGuildEnterAcceptResult //  
{
	EGuildEnterAcceptResult_OK        = 1, // 操作成功 
	EGuildEnterAcceptResult_NotInList = 2, // 不在申请列表 
	EGuildEnterAcceptResult_InGuild   = 3, // 已在公会(不一定是本公会) 
	EGuildEnterAcceptResult_Canceled  = 4, // 玩家已取消申请 
	EGuildEnterAcceptResult_SysError  = 5, // 系统错误 
};

/*Enums End*/


enum EN_HeaderProto_MessageID
{
};

class CHeaderProto;
/*Define Structs and Unions        Begin*/
typedef struct tagSError{
	typedef CHeaderProto ProtoType;
	int              nType;	/// 错误码类型      
	char             szError[MAX_ERROR_STRING];	/// 错误信息        
}SError;

typedef struct tagSPosInfo{
	typedef CHeaderProto ProtoType;
	int              nX;	/// X坐标，单位0.001米 
	int              nY;	/// Y坐标，单位0.001米 
	int              nZ;	/// Z坐标，单位0.001米 
	int              nOrientation;	/// 方向，单位角度  
}SPosInfo;

typedef struct tagSRoleDBInfo{
	typedef CHeaderProto ProtoType;
	int              nDBIndex;	/// 数据库索引      
	int              nHP;	/// 当前血量        
	int              nSP;	/// 当前技力        
	int              nEP;	/// 活力值          
	int              nVipEP;	/// vip活力值       
	int              nAP;	/// 活动协助次数    
	long long        llExperience;	/// 当前经验值      
	unsigned int     dwNonMoney;	/// 当前绑定游戏币（金币） 
	unsigned int     dwNonCash;	/// 当前绑定勋章    
	unsigned int     dwCash;	/// 当前流通勋章    
	unsigned long long qwLatestWorldChatTime;	/// 最近一次世界聊天的时间 
	char             szXData[MAX_BIGXML_LEN];	/// xml扩展数据     
	char             szXData2[MAX_XML_LEN];	/// 关卡数据等      
	char             szXData3[MAX_XML_LEN];	/// 保留数据        
	char             szActivityInfo[MAX_XML_LEN];	/// 活动的xml扩展数据
	char             szShop[MAX_XML_LEN];	/// 商城的xml扩展数据
	char             szClentCfg[512];	/// 客户端配置      
}SRoleDBInfo;

typedef struct tagSItemInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    byIndex;
	unsigned char    bySlot;	/// 所在位置        
	unsigned char    byExInfoIndex;	/// 装备附属性对应位置，数组元素最大个数为没有
	unsigned char    byMakerInfoIndex;	/// 制作人信息对应位置，数组元素最大个数为没有该属性
	unsigned char    byTimeInfoIndex;	/// 时间信息对应位置，数组元素最大个数为没有该属性
	unsigned short   wCount;	/// 数量            
	unsigned int     dwFlag;	/// 物品标记,见EItemInfoFlag
	unsigned char    byPersonalFlag;	/// 特殊标记EItemPersonalFlag
	unsigned int     dwTemplateId;	/// 物品模板ID      
	unsigned int     dwObjId;	/// 物品obj id      
	unsigned long long qwItemUUId;	/// 物品模板ID      
}SItemInfo;

typedef struct tagSRollItemData{
	typedef CHeaderProto ProtoType;
	unsigned char    byType;	/// 参见EActCellObtainType
	unsigned int     dwID;
	unsigned short   wNum;
	int              nBroadcastFlag;
	int              nRare;
}SRollItemData;

typedef struct tagSRollData_Common{
	typedef CHeaderProto ProtoType;
}SRollData_Common;

typedef struct tagSRollData_Money{
	typedef CHeaderProto ProtoType;
}SRollData_Money;

typedef struct tagSRollData_Cell{
	typedef CHeaderProto ProtoType;
}SRollData_Cell;

typedef struct tagSRollPoolItem{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTemplate;
	int              nNum;
}SRollPoolItem;

/* 用于传输的物品结构体。仅适用于用templateId可以唯一确定的物品，不能使用于随机属性、强化等物品 */
typedef struct tagSBaseItemInfo{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTemplateId;
	int              nNum;
}SBaseItemInfo;

/* 用于传输的物品结构体，包括物品TemplateID/物品数量 */
typedef struct tagSMultiItems{
	typedef CHeaderProto ProtoType;
	int              nTypeCount;	/// 物品种类数      
	SBaseItemInfo    astItems[MAX_ITEM_COUNT];
}SMultiItems;

typedef struct tagSBlob{
	typedef CHeaderProto ProtoType;
	unsigned int     dwLen;	/// 数据长度        
	unsigned char    abyData[MAX_BLOB_LEN];	/// 数据            
}SBlob;

typedef struct tagSBigBlob{
	typedef CHeaderProto ProtoType;
	unsigned int     dwLen;	/// 数据长度        
	unsigned char    abyData[MAX_BIGBLOB_LEN];	/// 数据            
}SBigBlob;

typedef struct tagSMediumBlob{
	typedef CHeaderProto ProtoType;
	unsigned int     dwLen;	/// 数据长度        
	unsigned char    abyData[MAX_MEDIUMBLOB_LEN];	/// 数据            
}SMediumBlob;

typedef struct tagSBigMoreBlob{
	typedef CHeaderProto ProtoType;
	unsigned int     dwLen;	/// 数据长度        
	unsigned char    abyData[MAX_BIG_MORE_BLOB_LEN];	/// 数据            
}SBigMoreBlob;

typedef struct tagSEXBigBlob{
	typedef CHeaderProto ProtoType;
	unsigned int     dwLen;	/// 数据长度        
	unsigned char    abyData[MAX_EXEBIGBLOB_LEN];	/// 数据            
}SEXBigBlob;

typedef struct tagSEquipInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    bySlot;	/// 装备位置        
	unsigned int     dwTemplateId;	/// 装备模板ID      
	unsigned int     dwHuanhuaTemplateId;	/// 幻化模板ID      
	unsigned char    byStarCount;	/// 当前星级        
}SEquipInfo;

/* 基本角色信息 */
typedef struct tagSRoleInfo{
	typedef CHeaderProto ProtoType;
	unsigned long long qwDBRoleId;	/// DB中的角色ID    
	char             szRoleName[ROLE_NAME_LEN];	/// 角色名          
	int              nLevel;	/// 等级            
	unsigned char    byBaseJob;	/// 基础职业        
	unsigned char    byJob;	/// 职业            
	unsigned char    byGender;	/// 性别            
	unsigned char    bySkinColor;	/// 肤色            
	unsigned char    byHairStyle;	/// 发型            
	char             szcreatetime[64];	/// 创建时间        
	unsigned long long qwLastLoginTime;	/// 最近登陆时间    
	unsigned long long qwLastLogoutTime;	/// 最近登出时间    
	unsigned int     dwSceneId;	/// 角色最后所在场景的模板id
	unsigned int     dwInstanceSceneId;	/// 角色最后所在场景的实例id
	unsigned int     dwLatestSceneId;	/// 角色上一次所在场景的模板id
	unsigned int     dwLatestInstanceSceneId;	/// 角色上一次所在场景的实例id
	unsigned long long qwForbidenTime;	/// 禁止登陆到期时间
}SRoleInfo;

typedef struct tagSXGEM{
	typedef CHeaderProto ProtoType;
	int              nTID;
}SXGEM;

typedef struct tagSXITEM{
	typedef CHeaderProto ProtoType;
	unsigned long long qwUID;
	int              nTID;
	int              nUP;
	int              nCT;
	int              nEXP;
	int              nLK;
	unsigned short   wGEMCount;
	SXGEM            astGEM[MAX_GEM_COUNT];
}SXITEM;

typedef struct tagSXITEMS{
	typedef CHeaderProto ProtoType;
	unsigned short   wItemCount;
	SXITEM           astItems[MAX_ITEM_COUNT];
}SXITEMS;

/* 带装备信息的角色信息 */
typedef struct tagSRoleInfoWithEquip{
	typedef CHeaderProto ProtoType;
	SRoleInfo        stRoleInfo;	/// roleinfo        
	SXITEMS          stEquip;	/// equip           
}SRoleInfoWithEquip;

/* 带装备信息的角色信息 */
typedef struct tagSRoleInfoWithEquipAll{
	typedef CHeaderProto ProtoType;
	SRoleInfo        stRoleInfo;	/// SRoleInfo       
	SRoleDBInfo      stRoleDBInfo;	/// SRoleDBInfo     
}SRoleInfoWithEquipAll;

/* 套装物品 */
typedef struct tagSROLE_SUIT_ITEM{
	typedef CHeaderProto ProtoType;
	unsigned long long qwItemUUID;	/// 物品UUID        
	int              nItemID;	/// 物品模板ID      
}SROLE_SUIT_ITEM;

/* 强化某物品回应 */
typedef struct tagSROLE_SUIT{
	typedef CHeaderProto ProtoType;
	int              nSuitID;	/// 套装ID          
	int              nSuitCount;	/// 套装激活套数    
	SROLE_SUIT_ITEM  astSuitItem[MAX_SUIT_ITEM_COUNT];	/// 物品信息        
}SROLE_SUIT;

/*  装备字头  */
typedef struct tagSHeadRecord{
	typedef CHeaderProto ProtoType;
	char             chRandomValue;	///  浮动值         
	unsigned short   wHeadID;	///  字头id         
}SHeadRecord;

/*  装备随机字头  */
typedef struct tagSRandomEquipHead{
	typedef CHeaderProto ProtoType;
	unsigned char    byIsIdentifyed;	/// 是否鉴定过      
	unsigned char    byCount;	/// 字头数量        
	SHeadRecord      astHeads[MAX_EQUIP_HEAD];	/// 字头id数组      
}SRandomEquipHead;

typedef struct tagSItemEquipExInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    byLevel;	/// 等级            
	unsigned char    byMaxLevel;	/// 最大等级        
	unsigned char    byMaxHoleNum;	/// 最大孔数        
	unsigned char    byHole;	/// 孔数            
	SRandomEquipHead stRandomHead;	/// 随机字头        
	unsigned int     dwDurability;	/// 耐久            
	unsigned int     dwMaxDurability;	/// 耐久度上限      
	unsigned int     adwGemID[MAX_ITEM_HOLE_NUM];	/// 镶嵌的宝石      
	char             chSmithingRandom;	/// 装备锻造浮动值  
	char             chStarRandom;	/// 装备升星浮动值  
	unsigned char    byReduceEquipNeedLevel;	/// 降低装备需求等级
	unsigned int     dwHunhuaTemplateID;	/// 幻化模板id      
	unsigned int     dwHunhuaEndTime;	/// 幻化结束时间    
	unsigned int     dwBuffID;	/// BUFF模板ID      
	unsigned int     dwStarExp;	/// 星值            
}SItemEquipExInfo;

typedef struct tagSItemMakerInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    abyMaker[ROLE_NAME_LEN];	/// 制造者          
	unsigned int     dwVirtue;	/// 正值            
	unsigned int     dwEvil;	/// 邪值            
	unsigned int     dwGoodness;	/// 善值            
	unsigned int     dwBadness;	/// 恶值            
}SItemMakerInfo;

typedef struct tagSItemTimeInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    byUseNum;	/// 剩余使用次数    
	unsigned int     dwDestroyTime;	/// 消失剩余时间    
}SItemTimeInfo;

typedef struct tagSNull{
	typedef CHeaderProto ProtoType;
}SNull;

typedef union tagUItemExInfo{
	typedef CHeaderProto ProtoType;
	SNull            stNull;
	SItemEquipExInfo stEquipExInfo;
}UItemExInfo;

typedef struct tagSItemExInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    byType;
	UItemExInfo      stExInfo;
}SItemExInfo;

typedef struct tagSExchangeItem{
	typedef CHeaderProto ProtoType;
	unsigned char    byAdd;	/// 添加还是删除    
	unsigned int     dwTemplateId;	/// 物品模板ID      
	unsigned char    byFromIndex;	/// 从，序列号      
	unsigned char    byFromSlot;	/// 从，位置        
	unsigned char    byToSlot;	/// 到,位置         
}SExchangeItem;

typedef struct tagSItemShortcut{
	typedef CHeaderProto ProtoType;
	unsigned char    bySlot;	/// 所在位置        
	unsigned int     dwTemplateId;	/// 物品模板ID      
	unsigned long long qwItemUUId;	/// 物品模板ID      
}SItemShortcut;

typedef struct tagSRoleName{
	typedef CHeaderProto ProtoType;
	char             szRoleName[ROLE_NAME_LEN];	/// 角色名字        
	unsigned long long qwRoleID;
	unsigned int     dwLevel;	/// 角色等级        
	unsigned int     dwJob;	/// 角色门派        
}SRoleName;

typedef struct tagSServerInfo{
	typedef CHeaderProto ProtoType;
	unsigned int     dwServerID;
	unsigned int     dwListenIP;
	unsigned short   wListenPort;
}SServerInfo;

/* 月卡信息 */
typedef struct tagMonthCardInfo{
	typedef CHeaderProto ProtoType;
	int              nUId;	/// 月卡ID          
	unsigned long long qwBTm;	/// 购买时间        
	int              nDays;	/// 持续时间，一个月卡可以多次购买，时间叠加
	unsigned long long qwUTm;	/// 上次领取时间，0表未领取
}MonthCardInfo;

/* 账号的VIP相关信息,目前包括充值、GM等级 */
typedef struct tagSLMAccountInfo{
	typedef CHeaderProto ProtoType;
	unsigned long long qwAccountId;	/// 账号 即digitid  
	int              nRMBCount;	/// 账号充值次数(RMB)
	int              nRMBSum;	/// 账号充值总金额(RMB)
	unsigned int     dwCash;	/// 徽章数          
	int              nVIPLevel;	/// 账号VIP等级     
	unsigned char    byGMLevel;	/// 账号GM等级      
	unsigned char    byMonthCardCount;	/// 月卡数量        
	MonthCardInfo    astMonthCardInfos[MAX_MONTHCARD_COUNT];	/// 账号月卡信息    
}SLMAccountInfo;

typedef struct tagSGameServerDescInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    byOptLen;
	unsigned char    abyOpt[255];
	unsigned short   wDescLen;
	unsigned char    abyDesc[MAX_SERVER_DESC_LEN];
	unsigned short   wStateLen;
	unsigned char    abyState[MAX_SERVER_STATE_LEN];
}SGameServerDescInfo;

typedef struct tagSGameServerInfo{
	typedef CHeaderProto ProtoType;
	SServerInfo      stServer;
	unsigned short   wPlayerCount;
	unsigned char    byServerState;
	SGameServerDescInfo stDesc;
	unsigned int     dwServerUniqueId;	/// 服的唯一id，跨区唯一
}SGameServerInfo;

typedef struct tagCTDT_CONNECTION_INFO{
	typedef CHeaderProto ProtoType;
	unsigned int     dwIncomingBytesPerMinute;
	unsigned int     dwOutgoingBytesPerMinute;
}CTDT_CONNECTION_INFO;

/* 物品信息结构 */
typedef struct tagSUUItemInfo{
	typedef CHeaderProto ProtoType;
	unsigned short   wCount;	///  数量           
	unsigned int     dwTemplateId;	///  物品模板ID     
	unsigned long long qwUUID;	/// UUID            
}SUUItemInfo;

/* 物品清单，[DB]要进数据库，请保持子结构SUUItemInfo不含嵌套结构 */
typedef struct tagSItemList{
	typedef CHeaderProto ProtoType;
	unsigned short   wCount;	/// 物品数量        
	SUUItemInfo      astItemList[MAX_ROLE_ITEM_COUNT];
}SItemList;

/* 关卡数据 */
typedef struct tagSLevelInfo{
	typedef CHeaderProto ProtoType;
	unsigned int     dwLevelID;	/// 关卡id          
	unsigned char    byCrystal;	/// 获得的星数      
	unsigned short   wUsedTimes;	/// 当日进入次数，次数上限请查阅level.csv表
}SLevelInfo;

/* 战役相关数据 */
typedef struct tagSBattleInfo{
	typedef CHeaderProto ProtoType;
	unsigned int     dwBattleID;	/// 战役id          
	unsigned short   wGetStars;	/// 战役已获取的星数
}SBattleInfo;

typedef struct tagSCHAT{
	typedef CHeaderProto ProtoType;
	unsigned char    byChatType;	/// 见EChatType     
	char             szWho[ROLE_NAME_LEN];
	char             szToWho[ROLE_NAME_LEN];
	char             szContent[MAX_MSG_CONTENT_LEN];
	unsigned char    byGmLevel;	/// GM命令使用者的GM等级 
	unsigned char    bySpeakerVIPLevel;	/// 发送者的vip等级 
}SCHAT;

typedef struct tagSFriendEquipInfo{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTemplateID;	/// 装备模板id      
}SFriendEquipInfo;

typedef struct tagSFriendPetInfo{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTemplateID;	/// 模板id          
}SFriendPetInfo;

typedef struct tagSRSNull{
	typedef CHeaderProto ProtoType;
}SRSNull;

/* 角色基础属性 */
typedef struct tagSRSRoleBaseData{
	typedef CHeaderProto ProtoType;
	unsigned int     dwLevel;
	unsigned int     dwAttack;
	int              nPVPWins;
	int              nPVPRepute;
}SRSRoleBaseData;

/* 角色装备信息 */
typedef struct tagSRSRoleEquipData{
	typedef CHeaderProto ProtoType;
	unsigned char    byCount;
	SXITEM           astEquipInfo[MAX_EQUIP_ITEM_NUM];
}SRSRoleEquipData;

/* 角色宠物信息 */
typedef struct tagSRSRolePetData{
	typedef CHeaderProto ProtoType;
	unsigned char    byCount;
	SFriendPetInfo   astPetInfo[MAX_FRIENDS_PET_COUNT];
}SRSRolePetData;

/* 角色在线信息 */
typedef struct tagSRSRoleOnlineData{
	typedef CHeaderProto ProtoType;
	unsigned char    byIsOnline;
}SRSRoleOnlineData;

typedef union tagURSRoleProperty{
	typedef CHeaderProto ProtoType;
	SRSNull          stNull;
	SRSRoleBaseData  stBase;
	SRSRoleEquipData stEquip;
	SRSRolePetData   stPet;
	SRSRoleOnlineData stOnline;
}URSRoleProperty;

typedef struct tagSRSRoleProperty{
	typedef CHeaderProto ProtoType;
	unsigned char    byType;	/// 类型 RS_ROLE_PROERTY_TYPE
	URSRoleProperty  stProperty;
}SRSRoleProperty;

typedef struct tagSFriendInfo{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
	unsigned int     dwHead;	/// 头像            
	char             szName[ROLE_NAME_LEN];	/// 名字            
	unsigned char    bySkinColor;	/// 肤色            
	unsigned char    bySex;	/// 性别            
	unsigned char    byHairStyle;	/// 发型            
	unsigned short   wLevel;	/// 等级            
	unsigned char    byJob;	/// 职业            
	unsigned int     dwAttack;	/// 战斗力          
	unsigned char    byIsOnline;	/// 是否在线        
	unsigned int     dwActionPoint;	/// 此好友给自己赠送的体力
	unsigned char    byCanDonateActionPoint;	/// 是否可给此好友赠送体力
	SRSRoleEquipData stEquip;	/// 装备信息        
	SRSRolePetData   stPet;	/// 宠物信息        
}SFriendInfo;

/* 邀请者信息 */
typedef struct tagSFriendInviteInfo{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;	/// 邀请时间        
	SFriendInfo      stInfo;	/// 邀请者信息      
}SFriendInviteInfo;

/* 邀请列表 */
typedef struct tagSFriendInviteList{
	typedef CHeaderProto ProtoType;
	unsigned int     dwInviteCount;	/// 数量            
	SFriendInviteInfo astInviteList[MAX_FRIENDS_INVITE_COUNT];	/// 邀请列表        
}SFriendInviteList;

typedef struct tagSRoleBaseInfo{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
	char             szName[ROLE_NAME_LEN];	/// 名字            
	unsigned char    bySkinColor;	/// 肤色            
	unsigned char    bySex;	/// 性别            
	unsigned char    byHairStyle;	/// 发型            
	unsigned short   wLevel;	/// 等级            
	unsigned char    byJob;	/// 职业            
	unsigned int     dwAttack;	/// 战斗力          
	int              nPVPWins;
	int              nPVPRepute;
	unsigned char    byIsOnline;	/// 是否在线        
	int              nVIPLevel;	/// 账号VIP等级     
}SRoleBaseInfo;

typedef struct tagSDBPET{
	typedef CHeaderProto ProtoType;
	unsigned long long qwUID;	/// 唯一ID          
	unsigned int     dwTID;	/// 模板ID          
	int              nLV;	/// 等级            
	long long        llEXP;	/// 经验            
	int              nHP;	/// HP              
	int              nSP;	/// SP              
	int              nUP;	/// 强化等级        
	int              nLOCK;	/// 是否锁定        
	SXITEMS          stEQ;	/// 装备            
}SDBPET;

typedef struct tagSRSBattlePets{
	typedef CHeaderProto ProtoType;
	unsigned char    byCount;	/// 数量            
	SDBPET           astPets[MAX_BATTLE_PET_COUNT];	/// 宠物            
}SRSBattlePets;

typedef struct tagSRoleRsServerInfo{
	typedef CHeaderProto ProtoType;
	SRoleBaseInfo    stBaseInfo;	/// 基础信息        
	SRSRoleEquipData stEquip;	/// 装备信息        
	SRSRolePetData   stPet;	/// 宠物信息        
	SRSBattlePets    stBattlePets;
}SRoleRsServerInfo;

typedef struct tagSAssistBattlePersonInfo{
	typedef CHeaderProto ProtoType;
	unsigned char    byIsFriend;	/// 是否是好友      
	SFriendInfo      stInfo;	/// 助战人信息      
}SAssistBattlePersonInfo;

typedef struct tagSSeverAssistBattleInfo{
	typedef CHeaderProto ProtoType;
	SAssistBattlePersonInfo stAssistor;	/// 助战人信息      
	SDBPET           stBattlePet;	/// 战斗宠物        
}SSeverAssistBattleInfo;

/* 好友列表通知 */
typedef struct tagFRIENDS_LIST_NTF{
	typedef CHeaderProto ProtoType;
	unsigned int     dwCount;	/// 数量            
	SFriendInfo      astList[MAX_FRIENDS_COUNT];	/// 列表            
	SFriendInviteList stInviteList;	/// 邀请列表        
}FRIENDS_LIST_NTF;

/* 查询指定名字角色 */
typedef struct tagQUERY_ROLE_REQ{
	typedef CHeaderProto ProtoType;
	unsigned int     dwPage;	/// 请求的页码      
	char             szKeyWords[ROLE_NAME_LEN];	/// 关键字          
}QUERY_ROLE_REQ;

/* 查询指定名字角色反馈 */
typedef struct tagQUERY_ROLE_ACK{
	typedef CHeaderProto ProtoType;
	unsigned int     dwCount;	/// 条数            
	unsigned int     dwPage;	/// 当前页数        
	unsigned int     dwTotalPage;	/// 总业数          
	SFriendInfo      astLists[MAX_FRIENDS_COUNT_PER_PAGE];	/// 查询列表        
}QUERY_ROLE_ACK;

/* 添加好友 */
typedef struct tagADD_FRIEND_REQ{
	typedef CHeaderProto ProtoType;
	char             szName[ROLE_NAME_LEN];	/// 名字            
}ADD_FRIEND_REQ;

/* 添加好友反馈 */
typedef struct tagADD_FRIEND_ACK{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 结果            
	unsigned char    byCount;	/// 数量            
	SFriendInfo      astFriends[1];	/// 好友数量,用数组是为了避免失败时不用额外发送好友信息
}ADD_FRIEND_ACK;

/* 删除好友 */
typedef struct tagREMOVE_FRIEND_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
}REMOVE_FRIEND_REQ;

/* 删除好友反馈 */
typedef struct tagREMOVE_FRIEND_ACK{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 结果            
	unsigned long long qwRoleDBID;	/// 角色dbid        
}REMOVE_FRIEND_ACK;

/* 赠送体力 */
typedef struct tagDONATE_ACTION_POINT_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
}DONATE_ACTION_POINT_REQ;

/* 赠送体力反馈 */
typedef struct tagDONATE_ACTION_POINT_ACK{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 被赠送角色dbid  
	unsigned char    byResult;	/// 结果            
}DONATE_ACTION_POINT_ACK;

/* 赠送体力通知被赠送者 */
typedef struct tagDONATE_ACTION_POINT_OTHER_NTF{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 增送者dbid      
}DONATE_ACTION_POINT_OTHER_NTF;

/* 领取体力 */
typedef struct tagRECEIVE_ACTION_POINT_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 被领取好友dbid  
}RECEIVE_ACTION_POINT_REQ;

/* 领取体力反馈 */
typedef struct tagRECEIVE_ACTION_POINT_ACK{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 被领取好友dbid  
	unsigned char    byResult;	/// 结果            
}RECEIVE_ACTION_POINT_ACK;

/* 别人请求成为好友通知 */
typedef struct tagREQUEST_ADD_FRIEND_NTF{
	typedef CHeaderProto ProtoType;
	SFriendInviteInfo stNewInfo;	/// 好友信息        
}REQUEST_ADD_FRIEND_NTF;

/* 回应添加好友请求 */
typedef struct tagRESPONSE_ADD_FRIEND_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
	unsigned char    byAgree;	/// 是否同意        
}RESPONSE_ADD_FRIEND_REQ;

/* 删除邀请列表中的请 */
typedef struct tagFRIEND_REMOVE_INVITE_NTF{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
}FRIEND_REMOVE_INVITE_NTF;

/* 好友信息变化通知 */
typedef struct tagFRIEND_INFO_CHANGE_NTF{
	typedef CHeaderProto ProtoType;
	SRSRoleProperty  stInfo;
	unsigned long long qwRoleDBID;	/// 角色dbid        
}FRIEND_INFO_CHANGE_NTF;

/* 好友助战列表请求 */
typedef struct tagFRIEND_ASSIST_LIST_REQ{
	typedef CHeaderProto ProtoType;
}FRIEND_ASSIST_LIST_REQ;

/* 选择助战好友请求 */
typedef struct tagSELECT_FRIEND_ASSIST_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
}SELECT_FRIEND_ASSIST_REQ;

/* 选择助战好友反馈 */
typedef struct tagSELECT_FRIEND_ASSIST_ACK{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;	/// 角色dbid        
	unsigned char    byResult;	/// 结果            
}SELECT_FRIEND_ASSIST_ACK;

typedef struct tagSAbyssRsServerInfo{
	typedef CHeaderProto ProtoType;
	unsigned long long qwActDBID;	/// 活动dbid        
	unsigned int     dwActTmpId;	/// 活动配置模板的index
	int              nBlood;	/// 怪物血量        
	unsigned long long qwRoleid;	/// 拥有者的角色id  
	char             szRolename[ROLE_NAME_LEN];
	int              nAtkcount;	/// 攻击者数量      
	unsigned long long aqwAtklist[MAX_FRIEND_COUNT];	/// 攻击深渊的角色id列表
	int              nStatus;	/// 状态 0-初始 1-触发 2-打开 3-被杀死 4-逃跑
	unsigned long long qwTritime;	/// 触发时间        
	unsigned long long qwOpentime;	/// 打开时间        
	unsigned long long qwKilltime;	/// 杀死时间        
	unsigned long long qwEntranceExistTime;	/// 触发的入口存在的时间
	unsigned long long qwAbyssExistTime;	/// 打开的入口存在时间
}SAbyssRsServerInfo;

/* 触发深渊请求 */
typedef struct tagABYSS_TRIGGER_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwAbyssDBID;
	unsigned int     dwAbyTemplateID;	/// 配置的深渊id模板
	char             szAbyName[MAX_ABYSS_NAME_STRING_COUNT];
	unsigned int     dwMonsterID;	/// 怪物id          
	unsigned int     dwTotalBlood;	/// 怪物总血量      
	unsigned long long qwTriggerTime;	/// 触发时间        
	unsigned long long qwEntranceExistTime;	/// 触发的入口存在的时间
	unsigned long long qwAbyssExistTime;	/// 打开的入口存在时间
	char             szRolename[ROLE_NAME_LEN];
	unsigned char    byJob;	/// 职业            
}ABYSS_TRIGGER_REQ;

/* 触发深渊反馈 */
typedef struct tagABYSS_TRIGGER_ACK{
	typedef CHeaderProto ProtoType;
	unsigned char    byIfTrigger;	/// 是否触发 1表示触发 其他不触发
	SAbyssRsServerInfo stAbyssInfo;	/// 深渊信息        
}ABYSS_TRIGGER_ACK;

/* 打开深渊请求 */
typedef struct tagABYSS_OPEN_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwAbyssDBID;
	unsigned long long qwOpenTime;
}ABYSS_OPEN_REQ;

/* 打开深渊反馈 */
typedef struct tagABYSS_OPEN_ACK{
	typedef CHeaderProto ProtoType;
	SAbyssRsServerInfo stAbyssInfo;
}ABYSS_OPEN_ACK;

/* 通知朋友有打开的深渊 */
typedef struct tagABYSS_OPEN_NTF{
	typedef CHeaderProto ProtoType;
	int              nAbyssCount;
	SAbyssRsServerInfo astAbyssInfo[MAX_ABYSS_OPEN_COUNT];
}ABYSS_OPEN_NTF;

/* 获取触发的深渊列表请求 */
typedef struct tagGET_ABYSS_TRIGGER_LIST_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;
}GET_ABYSS_TRIGGER_LIST_REQ;

/* 获取触发的深渊列表的反馈 */
typedef struct tagGET_ABYSS_TRIGGER_LIST_ACK{
	typedef CHeaderProto ProtoType;
	int              nAbyssCount;
	SAbyssRsServerInfo astAbyssInfo[MAX_ABYSS_OPEN_COUNT];
}GET_ABYSS_TRIGGER_LIST_ACK;

/* 获取打开的深渊列表的请求 */
typedef struct tagGET_ABYSS_OPEN_LIST_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;
}GET_ABYSS_OPEN_LIST_REQ;

/* 获取打开的深渊列表的反馈 */
typedef struct tagGET_ABYSS_OPEN_LIST_ACK{
	typedef CHeaderProto ProtoType;
	int              nAbyssCount;
	SAbyssRsServerInfo astAbyssInfo[MAX_ABYSS_OPEN_COUNT];
}GET_ABYSS_OPEN_LIST_ACK;

typedef struct tagABYSS_OPEN_RECORD{
	typedef CHeaderProto ProtoType;
	unsigned long long qwAbydbid;	/// 深渊dbid        
	unsigned int     dwAbyTmpid;
	unsigned long long qwOpentime;
	unsigned long long qwRoleid;
	char             szRolename[ROLE_NAME_LEN];
}ABYSS_OPEN_RECORD;

/* 获取打开记录请求 */
typedef struct tagGET_ABYSS_OPEN_REC_REQ{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;
}GET_ABYSS_OPEN_REC_REQ;

/* 获取打开记录反馈 */
typedef struct tagGET_ABYSS_OPEN_REC_ACK{
	typedef CHeaderProto ProtoType;
	int              nCount;	/// 数量            
	ABYSS_OPEN_RECORD astRecords[MAX_XABYSS_RECORD_COUNT];
}GET_ABYSS_OPEN_REC_ACK;

/* 攻击深渊的角色 */
typedef struct tagATK_INFO{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleid;	/// 攻击者id        
	unsigned char    byJob;	/// 职业            
}ATK_INFO;

/* 攻击深渊的角色列表 */
typedef struct tagATK_INFO_LIST{
	typedef CHeaderProto ProtoType;
	int              nAtkcount;	/// 攻击者数量      
	ATK_INFO         astAtklist[MAX_FRIEND_COUNT];	/// 攻击深渊的角色列表
}ATK_INFO_LIST;

/* 深渊信息 */
typedef struct tagABYSS_SEND_REWARD_MAIL{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTmpID;
	unsigned long long qwRoleid;	/// 拥有者的角色id  
	char             szRolename[ROLE_NAME_LEN];
	unsigned char    byJob;	/// 职业            
	int              nStatus;	/// 状态 0-初始 1-触发 2-打开 3-被杀死 4-逃跑
	ATK_INFO_LIST    stAtkInfoList;	/// 攻击者          
}ABYSS_SEND_REWARD_MAIL;

typedef struct tagSMailDetail{
	typedef CHeaderProto ProtoType;
	unsigned char    byType;	/// 邮件类型        
	unsigned long long qwUniqueID;	/// 邮件唯一id      
	int              nMoney;	/// 金钱            
	unsigned int     dwSendTime;	/// 发送时间        
	unsigned int     dwReadTime;	/// 阅读时间        
	char             szSender[ROLE_NAME_LEN];	/// 发件人姓名      
	char             szReceiver[ROLE_NAME_LEN];	/// 收件人姓名      
	char             szTitle[MAX_MAIL_TITLE_LEN];	/// 标题            
	char             szContent[MAX_MAIL_CONTENT_LEN];	/// 内容            
	unsigned char    byItemCount;	/// 物品数量        
	SXITEM           astItems[MAX_MAIL_ITEM_COUNT];
}SMailDetail;

typedef struct tagMAIL_LIST{
	typedef CHeaderProto ProtoType;
	unsigned short   wCount;	/// 邮件数量        
	SMailDetail      astMails[MAX_MAIL_COUNT];
}MAIL_LIST;

typedef struct tagSEND_MAIL{
	typedef CHeaderProto ProtoType;
	int              nMoney;	/// 金钱            
	char             szReceiver[ROLE_NAME_LEN];	/// 收件人姓名      
	char             szTitle[MAX_MAIL_TITLE_LEN];	/// 标题            
	char             szContent[MAX_MAIL_CONTENT_LEN];	/// 内容            
	unsigned char    byItemCount;	/// 物品数量        
	unsigned long long aqwItems[MAX_MAIL_ITEM_COUNT];
}SEND_MAIL;

typedef struct tagMAIL_ID_LIST{
	typedef CHeaderProto ProtoType;
	unsigned short   wCount;
	unsigned long long aqwMailIDs[MAX_MAIL_COUNT];
}MAIL_ID_LIST;

typedef struct tagSPVPRoleAllData{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleid;	/// 角色id          
	unsigned long long qwDigitid;	/// 账号数字id      
	char             szRoleName[ROLE_NAME_LEN];	/// 角色名字        
	int              nRoleLevel;	/// 角色等级        
	int              nMiLevel;	/// 军阶等级        
	int              nRepute;	/// 声望            
	int              nPoints;	/// 积分            
	int              nRanks;	/// 排名            
	unsigned char    byBaseJob;	/// 基础门派        
	unsigned char    bySex;	/// 对象性别        
	unsigned char    byHairStyle;	/// 发型            
	unsigned char    byHairColor;	/// 颜色            
	int              nAttack;	/// 战斗力          
}SPVPRoleAllData;

typedef struct tagPVP_MATCH{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleid;	/// 角色id          
	char             szRoleName[ROLE_NAME_LEN];	/// 角色名字        
	int              nRoleLevel;	/// 角色等级        
	int              nMilitaryLevel;	/// 军阶等级        
	int              nPoints;	/// 角色当前积分    
	unsigned char    byBaseJob;	/// 基础门派        
	unsigned char    bySex;	/// 对象性别        
	unsigned char    byHairStyle;	/// 发型            
	unsigned char    byHairColor;	/// 颜色            
}PVP_MATCH;

/* 获取pvp对手回应  */
typedef struct tagPVP_MATCH_LIST{
	typedef CHeaderProto ProtoType;
	unsigned short   wCount;
	PVP_MATCH        astPVPMatchList[MAX_PVP_MATCH_COUNT];
}PVP_MATCH_LIST;

typedef struct tagPVP_RANK{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleid;	/// 角色id          
	char             szRoleName[ROLE_NAME_LEN];	/// 角色名字        
	int              nRoleLevel;	/// 角色等级        
	int              nMilitaryLevel;	/// 军阶等级        
	int              nPoints;	/// 角色当前积分    
	int              nRank;	/// 角色排名        
	unsigned char    byBaseJob;	/// 基础门派        
	unsigned char    bySex;	/// 对象性别        
	unsigned char    byHairStyle;	/// 发型            
	unsigned char    byHairColor;	/// 颜色            
}PVP_RANK;

/* 获取pvp排行榜  */
typedef struct tagPVP_RANK_LIST{
	typedef CHeaderProto ProtoType;
	unsigned short   wCount;
	PVP_RANK         astPVPRankList[MAX_PVP_RANK_COUNT];
}PVP_RANK_LIST;

typedef struct tagSRobotPet{
	typedef CHeaderProto ProtoType;
	int              nTemplateId;
}SRobotPet;

typedef struct tagSRobotPets{
	typedef CHeaderProto ProtoType;
	unsigned short   wPetCount;	/// 拥有宠物个数    
	SRobotPet        astPetsInfo[PET_BTPOS_TEAM];
	int              nPetLevel;
	int              nPetUp;
}SRobotPets;

typedef struct tagSRobosEquip{
	typedef CHeaderProto ProtoType;
	int              nTemplateId;
}SRobosEquip;

typedef struct tagSRobosEquips{
	typedef CHeaderProto ProtoType;
	unsigned char    byEquipCount;
	SRobosEquip      astEquipInfo[MAX_EQUIP_ITEM_NUM];
}SRobosEquips;

typedef struct tagSRobotBuff{
	typedef CHeaderProto ProtoType;
	int              nTemplateId;
}SRobotBuff;

typedef struct tagSRobotBuffs{
	typedef CHeaderProto ProtoType;
	unsigned char    byBuffCount;
	SRobotBuff       astBuffInfo[MAX_PVP_ROBOT_BUFF_COUNT];
}SRobotBuffs;

typedef struct tagSPVPRobot{
	typedef CHeaderProto ProtoType;
	unsigned long long qwUID;
	unsigned long long qwDGID;
	char             szName[ROLE_NAME_LEN];
	int              nLevel;
	unsigned char    byJob;
	int              nQuality;
	int              nRepute;
	int              nMilitery;
	int              nPoints;
	unsigned char    bySex;
	unsigned char    byHairStyle;	/// 发型            
	unsigned char    byHairColor;	/// 颜色            
	SRobosEquips     stEquips;
	SRobotPets       stPets;
	SRobotBuffs      stBuffs;
}SPVPRobot;

typedef struct tagSSeverPVPBattleInfo{
	typedef CHeaderProto ProtoType;
	SPVPRoleAllData  stPVPProperty;	/// PVP信息         
	char             szRoleAllInfo[MAX_PVP_ROLE_INFO_STRING_COUNT];	/// 人物所有信息，包括装备、宠物、技能、属性等
	SPVPRobot        stPVPRobot;	/// 机器人          
}SSeverPVPBattleInfo;

typedef struct tagWBAtkInfo{
	typedef CHeaderProto ProtoType;
	unsigned long long qwId;
	char             szNm[ROLE_NAME_LEN];
	int              nDmg;
	int              nBuf;
	int              nBufId;
	int              nRank;
}WBAtkInfo;

typedef struct tagWBBossBuff{
	typedef CHeaderProto ProtoType;
	int              nPercent;
	int              nBuffID;
}WBBossBuff;

typedef struct tagSWorldBossInfo{
	typedef CHeaderProto ProtoType;
	unsigned long long qwWBDBID;	/// 世界boss的dbid  
	unsigned int     dwWBTmpId;	/// 世界boss配置模板的index
	int              nTotalNum;	/// 参与总人数      
	int              nBlood;	/// 怪物血量        
	WBBossBuff       stBossBuff;	/// 怪物属性加成    
	int              nAtkcount;	/// 攻击者数量      
	WBAtkInfo        astAtklist[MAX_WB_RANK_COUNT];	/// 攻击角色列表    
	WBAtkInfo        stAtkInfo;	/// 个人攻击信息    
	int              nStatus;	/// 状态 0-初始 1-准备 2-打开 3-结算 4-杀死 5-逃跑
	unsigned long long qwStartTime;	/// 打开时间        
	unsigned long long qwEndTime;	/// 结束时间        
	unsigned long long qwKilltime;	/// 杀死时间        
	unsigned long long qwReliveTime;	/// 死亡冷却时间    
	unsigned long long qwNextTime;	/// 下一场开始的标准时间
	int              nTime;	/// 角色还可以打世界boss的次数
}SWorldBossInfo;

typedef struct tagSRankRoleReq{
	typedef CHeaderProto ProtoType;
	unsigned long long qwRoleDBID;
	int              nRankType;	/// 参见ERankType   
	int              nPage;	/// 第一页=0 依此类推 每页最多MAX_RANK_PAGE_COUNT
}SRankRoleReq;

typedef struct tagSRankRole{
	typedef CHeaderProto ProtoType;
	SRoleRsServerInfo stRoleInfo;
}SRankRole;

typedef struct tagSRankRoleAck{
	typedef CHeaderProto ProtoType;
	SRankRoleReq     stReq;
	int              nTotalCount;	/// 总的人数        
	int              nSelfRank;	/// 自己的排名=-1代表不在MAX_RANK_ROLE_COUNT内
	int              nRankCount;	/// 指定Page有多少名玩家
	SRankRole        astRank[MAX_RANK_PAGE_COUNT];
}SRankRoleAck;

/* 公会列表请求，非入会玩家  */
typedef struct tagSGuildListReq{
	typedef CHeaderProto ProtoType;
	unsigned int     dwPage;	/// 第几页          
}SGuildListReq;

/* 公会列表信息  */
typedef struct tagSGuildListInfo{
	typedef CHeaderProto ProtoType;
	int              nGuildId;	/// 公会ID          
	char             szGuildName[MAX_GUILD_NAME_LEN];
	int              nGuildLv;	/// 公会等级        
	char             szPresidentName[ROLE_NAME_LEN];
	int              nMemberCount;	/// 公会人数        
	int              nMemberMax;	/// 公会最大人数    
}SGuildListInfo;

/* 公会列表回应，非入会玩家  */
typedef struct tagSGuildListAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildListResult
	unsigned char    byCount;	/// 信息数量        
	SGuildListInfo   astInfo[MAX_GUILD_LIST_PER_PAGE];	/// 公会信息        
}SGuildListAck;

/* 公会入会申请  */
typedef struct tagSGuildEnterReq{
	typedef CHeaderProto ProtoType;
	int              nGuildId;	/// 公会ID          
}SGuildEnterReq;

/* 公会入会申请返回  */
typedef struct tagSGuildEnterAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildEnterResult
	int              nGuildId;	/// 公会ID          
}SGuildEnterAck;

/* 离开公会返回  */
typedef struct tagSGuildLeaveAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildLeaveResult
}SGuildLeaveAck;

/* 创建公会  */
typedef struct tagSGuildCreateReq{
	typedef CHeaderProto ProtoType;
	char             szGuildName[MAX_GUILD_NAME_LEN];
	char             szGuildAim[MAX_GUILD_AIM_LEN];
	unsigned char    byCostType;	/// 花费类型(1金币2徽章)
}SGuildCreateReq;

/* 创建公会结果  */
typedef struct tagSGuildCreateAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildCreateResult
}SGuildCreateAck;

/* 公会基本信息  */
typedef struct tagSGuildBaseInfo{
	typedef CHeaderProto ProtoType;
	int              nGuildId;	/// 公会ID          
	char             szGuildName[MAX_GUILD_NAME_LEN];
	char             szGuildNotice[MAX_GUILD_NOTICE_LEN];
	int              nMemberCount;	/// 公会人数        
	int              nMemberMax;	/// 公会最大人数    
	int              nMyContribution;	/// 我的贡献        
	int              nMyContributionMax;	/// 我的贡献最大值  
}SGuildBaseInfo;

/* 公会LOG.成员加入  */
typedef struct tagSGuildLog_MemberEnter{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	char             szMemberName[ROLE_NAME_LEN];
}SGuildLog_MemberEnter;

/* 公会LOG.成员踢出  */
typedef struct tagSGuildLog_MemberKick{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	char             szMemberName[ROLE_NAME_LEN];
	char             szKickName[ROLE_NAME_LEN];
}SGuildLog_MemberKick;

/* 公会LOG.职位调整  */
typedef struct tagSGuildLog_PotitionChange{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	char             szMemberName[ROLE_NAME_LEN];
	char             szPositionChangeName[ROLE_NAME_LEN];
	unsigned char    byNewPosition;	/// 调整后职位 参考EGuildPosition
}SGuildLog_PotitionChange;

/* 公会LOG.会长转让  */
typedef struct tagSGuildLog_PresidentChange{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	char             szFromName[ROLE_NAME_LEN];
	char             szToName[ROLE_NAME_LEN];
}SGuildLog_PresidentChange;

/* 公会LOG.会长弹劾  */
typedef struct tagSGuildLog_PresidentImpeach{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	char             szFromName[ROLE_NAME_LEN];
	char             szToName[ROLE_NAME_LEN];
}SGuildLog_PresidentImpeach;

/* 公会LOG.公会升级  */
typedef struct tagSGuildLog_LevelUp{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	int              nFromLevel;
	int              nToLevel;
}SGuildLog_LevelUp;

/* 公会LOG.公会科技升级  */
typedef struct tagSGuildLog_TechnologyUp{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	unsigned char    byTechnologyType;	/// 科技类型，目前包括经验提升、商品开发
	char             szOpName[ROLE_NAME_LEN];
	int              nFromLevel;
	int              nToLevel;
}SGuildLog_TechnologyUp;

/* 公会LOG.公会祈福  */
typedef struct tagSGuildLog_Pray{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	unsigned char    byPrayType;	/// 祈福类型，1普通2高级3神圣
	char             szOpName[ROLE_NAME_LEN];
	int              nMoney;
}SGuildLog_Pray;

/* 公会LOG.公告修改  */
typedef struct tagSGuildLog_NoticeChange{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	char             szOpName[ROLE_NAME_LEN];
}SGuildLog_NoticeChange;

/* 公会LOG.宗旨修改  */
typedef struct tagSGuildLog_AimChange{
	typedef CHeaderProto ProtoType;
	unsigned int     dwTime;
	char             szOpName[ROLE_NAME_LEN];
}SGuildLog_AimChange;

/* 公会日志结果  */
typedef struct tagSGuildLogAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildLogResult
	unsigned char    byCount11;	/// 信息数量        
	SGuildLog_MemberEnter astMemberEnter[MAX_GUILD_LOG_COUNT];	/// 成员加入        
	unsigned char    byCount12;	/// 信息数量        
	SGuildLog_MemberKick astMemberKick[MAX_GUILD_LOG_COUNT];	/// 成员踢出        
	unsigned char    byCount13;	/// 信息数量        
	SGuildLog_PotitionChange astPotitionChange[MAX_GUILD_LOG_COUNT];	/// 职位调整        
	unsigned char    byCount14;	/// 信息数量        
	SGuildLog_PresidentChange astPresidentChange[MAX_GUILD_LOG_COUNT];	/// 会长转让        
	unsigned char    byCount15;	/// 信息数量        
	SGuildLog_PresidentImpeach astPresidentImpeach[MAX_GUILD_LOG_COUNT];	/// 会长弹劾        
	unsigned char    byCount20;	/// 信息数量        
	SGuildLog_LevelUp astLevelUp[MAX_GUILD_LOG_COUNT];	/// 公会升级        
	unsigned char    byCount30;	/// 信息数量        
	SGuildLog_TechnologyUp astTechnologyUp[MAX_GUILD_LOG_COUNT];	/// 公会科技升级    
	unsigned char    byCount40;	/// 信息数量        
	SGuildLog_Pray   astPray[MAX_GUILD_LOG_COUNT];	/// 公会祈福        
	unsigned char    byCount50;	/// 信息数量        
	SGuildLog_NoticeChange astNoticeChange[MAX_GUILD_LOG_COUNT];	/// 公告修改        
	unsigned char    byCount60;	/// 信息数量        
	SGuildLog_AimChange astAimChange[MAX_GUILD_LOG_COUNT];	/// 宗旨修改        
}SGuildLogAck;

/* 公会修改公告请求  */
typedef struct tagSGuildChangeNoticeReq{
	typedef CHeaderProto ProtoType;
	char             szNewNotice[MAX_GUILD_NOTICE_LEN];
}SGuildChangeNoticeReq;

/* 公会修改公告结果  */
typedef struct tagSGuildChangeNoticeAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildChangeNoticeResult
}SGuildChangeNoticeAck;

/* 公会成员列表信息  */
typedef struct tagSGuildMemberListInfo{
	typedef CHeaderProto ProtoType;
	char             szName[ROLE_NAME_LEN];
	int              nLevel;	/// 等级            
	int              nAttack;	/// 战力            
	unsigned char    byPosition;	/// 职位 参考EGuildPosition
	int              nContribution;	/// 贡献            
	unsigned long long qwOfflineTime;	/// 离线时间        
}SGuildMemberListInfo;

/* 公会详细信息返回  */
typedef struct tagSGuildDetailAck{
	typedef CHeaderProto ProtoType;
	char             szGuildName[MAX_GUILD_NAME_LEN];
	int              nGuildId;	/// 公会ID          
	int              nGuildLevel;	/// 公会等级        
	int              nMemberCount;	/// 公会人数        
	int              nMemberMax;	/// 公会最大人数    
	int              nGuildAttack;	/// 公会总战力      
	int              nAttack;	/// 公会活跃度      
	int              nReputation;
	int              nMoney;
	char             szGuildAim[MAX_GUILD_AIM_LEN];
	unsigned char    byCount;	/// 信息数量        
	SGuildMemberListInfo astMemberList[MAX_GUILD_MEMBER_COUNT];	/// 成员列表        
}SGuildDetailAck;

/* 公会申请列表信息  */
typedef struct tagSGuildEnterInfo{
	typedef CHeaderProto ProtoType;
	char             szName[ROLE_NAME_LEN];
	int              nLevel;	/// 等级            
	int              nAttack;	/// 战力            
	unsigned char    byBaseJob;	/// 基础门派        
	unsigned char    byJob;	/// 当前门派        
}SGuildEnterInfo;

/* 公会申请列表返回  */
typedef struct tagSGuildEnterListAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byCount;	/// 信息数量        
	SGuildEnterInfo  astEnterList[MAX_GUILD_ENTER_COUNT];	/// 申请列表        
}SGuildEnterListAck;

/* 公会申请.同意/拒绝  */
typedef struct tagSGuildEnterAcceptReq{
	typedef CHeaderProto ProtoType;
	unsigned char    byAccept;	/// 1同意2拒绝 其他无意义
	char             szName[ROLE_NAME_LEN];
}SGuildEnterAcceptReq;

/* 公会申请.同意/拒绝 返回  */
typedef struct tagSGuildEnterAcceptAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildEnterAcceptResult
	char             szName[ROLE_NAME_LEN];
}SGuildEnterAcceptAck;

/* 公会申请.清空 返回  */
typedef struct tagSGuildEnterClearAck{
	typedef CHeaderProto ProtoType;
	unsigned char    byResult;	/// 操作结果 参考EGuildEnterAcceptResult
}SGuildEnterClearAck;

/*Define Structs and Unions        End*/


/*Encode and Decode Function Declare Begin*/
int EncodeSError(const void *pHost, INetData* poNetData);
int DecodeSError(void *pHost, INetData* poNetData);
int EncodeSPosInfo(const void *pHost, INetData* poNetData);
int DecodeSPosInfo(void *pHost, INetData* poNetData);
int EncodeSRoleDBInfo(const void *pHost, INetData* poNetData);
int DecodeSRoleDBInfo(void *pHost, INetData* poNetData);
int EncodeSItemInfo(const void *pHost, INetData* poNetData);
int DecodeSItemInfo(void *pHost, INetData* poNetData);
int EncodeSRollItemData(const void *pHost, INetData* poNetData);
int DecodeSRollItemData(void *pHost, INetData* poNetData);
int EncodeSRollData_Common(const void *pHost, INetData* poNetData);
int DecodeSRollData_Common(void *pHost, INetData* poNetData);
int EncodeSRollData_Money(const void *pHost, INetData* poNetData);
int DecodeSRollData_Money(void *pHost, INetData* poNetData);
int EncodeSRollData_Cell(const void *pHost, INetData* poNetData);
int DecodeSRollData_Cell(void *pHost, INetData* poNetData);
int EncodeSRollPoolItem(const void *pHost, INetData* poNetData);
int DecodeSRollPoolItem(void *pHost, INetData* poNetData);
int EncodeSBaseItemInfo(const void *pHost, INetData* poNetData);
int DecodeSBaseItemInfo(void *pHost, INetData* poNetData);
int EncodeSMultiItems(const void *pHost, INetData* poNetData);
int DecodeSMultiItems(void *pHost, INetData* poNetData);
int EncodeSBlob(const void *pHost, INetData* poNetData);
int DecodeSBlob(void *pHost, INetData* poNetData);
int EncodeSBigBlob(const void *pHost, INetData* poNetData);
int DecodeSBigBlob(void *pHost, INetData* poNetData);
int EncodeSMediumBlob(const void *pHost, INetData* poNetData);
int DecodeSMediumBlob(void *pHost, INetData* poNetData);
int EncodeSBigMoreBlob(const void *pHost, INetData* poNetData);
int DecodeSBigMoreBlob(void *pHost, INetData* poNetData);
int EncodeSEXBigBlob(const void *pHost, INetData* poNetData);
int DecodeSEXBigBlob(void *pHost, INetData* poNetData);
int EncodeSEquipInfo(const void *pHost, INetData* poNetData);
int DecodeSEquipInfo(void *pHost, INetData* poNetData);
int EncodeSRoleInfo(const void *pHost, INetData* poNetData);
int DecodeSRoleInfo(void *pHost, INetData* poNetData);
int EncodeSXGEM(const void *pHost, INetData* poNetData);
int DecodeSXGEM(void *pHost, INetData* poNetData);
int EncodeSXITEM(const void *pHost, INetData* poNetData);
int DecodeSXITEM(void *pHost, INetData* poNetData);
int EncodeSXITEMS(const void *pHost, INetData* poNetData);
int DecodeSXITEMS(void *pHost, INetData* poNetData);
int EncodeSRoleInfoWithEquip(const void *pHost, INetData* poNetData);
int DecodeSRoleInfoWithEquip(void *pHost, INetData* poNetData);
int EncodeSRoleInfoWithEquipAll(const void *pHost, INetData* poNetData);
int DecodeSRoleInfoWithEquipAll(void *pHost, INetData* poNetData);
int EncodeSROLE_SUIT_ITEM(const void *pHost, INetData* poNetData);
int DecodeSROLE_SUIT_ITEM(void *pHost, INetData* poNetData);
int EncodeSROLE_SUIT(const void *pHost, INetData* poNetData);
int DecodeSROLE_SUIT(void *pHost, INetData* poNetData);
int EncodeSHeadRecord(const void *pHost, INetData* poNetData);
int DecodeSHeadRecord(void *pHost, INetData* poNetData);
int EncodeSRandomEquipHead(const void *pHost, INetData* poNetData);
int DecodeSRandomEquipHead(void *pHost, INetData* poNetData);
int EncodeSItemEquipExInfo(const void *pHost, INetData* poNetData);
int DecodeSItemEquipExInfo(void *pHost, INetData* poNetData);
int EncodeSItemMakerInfo(const void *pHost, INetData* poNetData);
int DecodeSItemMakerInfo(void *pHost, INetData* poNetData);
int EncodeSItemTimeInfo(const void *pHost, INetData* poNetData);
int DecodeSItemTimeInfo(void *pHost, INetData* poNetData);
int EncodeSNull(const void *pHost, INetData* poNetData);
int DecodeSNull(void *pHost, INetData* poNetData);
int EncodeUnUItemExInfo(const void *pHost, int iSelect, INetData* poNetData);
int DecodeUnUItemExInfo(void *pHost, int iSelect, INetData* poNetData);
int EncodeSItemExInfo(const void *pHost, INetData* poNetData);
int DecodeSItemExInfo(void *pHost, INetData* poNetData);
int EncodeSExchangeItem(const void *pHost, INetData* poNetData);
int DecodeSExchangeItem(void *pHost, INetData* poNetData);
int EncodeSItemShortcut(const void *pHost, INetData* poNetData);
int DecodeSItemShortcut(void *pHost, INetData* poNetData);
int EncodeSRoleName(const void *pHost, INetData* poNetData);
int DecodeSRoleName(void *pHost, INetData* poNetData);
int EncodeSServerInfo(const void *pHost, INetData* poNetData);
int DecodeSServerInfo(void *pHost, INetData* poNetData);
int EncodeMonthCardInfo(const void *pHost, INetData* poNetData);
int DecodeMonthCardInfo(void *pHost, INetData* poNetData);
int EncodeSLMAccountInfo(const void *pHost, INetData* poNetData);
int DecodeSLMAccountInfo(void *pHost, INetData* poNetData);
int EncodeSGameServerDescInfo(const void *pHost, INetData* poNetData);
int DecodeSGameServerDescInfo(void *pHost, INetData* poNetData);
int EncodeSGameServerInfo(const void *pHost, INetData* poNetData);
int DecodeSGameServerInfo(void *pHost, INetData* poNetData);
int EncodeCTDT_CONNECTION_INFO(const void *pHost, INetData* poNetData);
int DecodeCTDT_CONNECTION_INFO(void *pHost, INetData* poNetData);
int EncodeSUUItemInfo(const void *pHost, INetData* poNetData);
int DecodeSUUItemInfo(void *pHost, INetData* poNetData);
int EncodeSItemList(const void *pHost, INetData* poNetData);
int DecodeSItemList(void *pHost, INetData* poNetData);
int EncodeSLevelInfo(const void *pHost, INetData* poNetData);
int DecodeSLevelInfo(void *pHost, INetData* poNetData);
int EncodeSBattleInfo(const void *pHost, INetData* poNetData);
int DecodeSBattleInfo(void *pHost, INetData* poNetData);
int EncodeSCHAT(const void *pHost, INetData* poNetData);
int DecodeSCHAT(void *pHost, INetData* poNetData);
int EncodeSFriendEquipInfo(const void *pHost, INetData* poNetData);
int DecodeSFriendEquipInfo(void *pHost, INetData* poNetData);
int EncodeSFriendPetInfo(const void *pHost, INetData* poNetData);
int DecodeSFriendPetInfo(void *pHost, INetData* poNetData);
int EncodeSRSNull(const void *pHost, INetData* poNetData);
int DecodeSRSNull(void *pHost, INetData* poNetData);
int EncodeSRSRoleBaseData(const void *pHost, INetData* poNetData);
int DecodeSRSRoleBaseData(void *pHost, INetData* poNetData);
int EncodeSRSRoleEquipData(const void *pHost, INetData* poNetData);
int DecodeSRSRoleEquipData(void *pHost, INetData* poNetData);
int EncodeSRSRolePetData(const void *pHost, INetData* poNetData);
int DecodeSRSRolePetData(void *pHost, INetData* poNetData);
int EncodeSRSRoleOnlineData(const void *pHost, INetData* poNetData);
int DecodeSRSRoleOnlineData(void *pHost, INetData* poNetData);
int EncodeUnURSRoleProperty(const void *pHost, int iSelect, INetData* poNetData);
int DecodeUnURSRoleProperty(void *pHost, int iSelect, INetData* poNetData);
int EncodeSRSRoleProperty(const void *pHost, INetData* poNetData);
int DecodeSRSRoleProperty(void *pHost, INetData* poNetData);
int EncodeSFriendInfo(const void *pHost, INetData* poNetData);
int DecodeSFriendInfo(void *pHost, INetData* poNetData);
int EncodeSFriendInviteInfo(const void *pHost, INetData* poNetData);
int DecodeSFriendInviteInfo(void *pHost, INetData* poNetData);
int EncodeSFriendInviteList(const void *pHost, INetData* poNetData);
int DecodeSFriendInviteList(void *pHost, INetData* poNetData);
int EncodeSRoleBaseInfo(const void *pHost, INetData* poNetData);
int DecodeSRoleBaseInfo(void *pHost, INetData* poNetData);
int EncodeSDBPET(const void *pHost, INetData* poNetData);
int DecodeSDBPET(void *pHost, INetData* poNetData);
int EncodeSRSBattlePets(const void *pHost, INetData* poNetData);
int DecodeSRSBattlePets(void *pHost, INetData* poNetData);
int EncodeSRoleRsServerInfo(const void *pHost, INetData* poNetData);
int DecodeSRoleRsServerInfo(void *pHost, INetData* poNetData);
int EncodeSAssistBattlePersonInfo(const void *pHost, INetData* poNetData);
int DecodeSAssistBattlePersonInfo(void *pHost, INetData* poNetData);
int EncodeSSeverAssistBattleInfo(const void *pHost, INetData* poNetData);
int DecodeSSeverAssistBattleInfo(void *pHost, INetData* poNetData);
int EncodeFRIENDS_LIST_NTF(const void *pHost, INetData* poNetData);
int DecodeFRIENDS_LIST_NTF(void *pHost, INetData* poNetData);
int EncodeQUERY_ROLE_REQ(const void *pHost, INetData* poNetData);
int DecodeQUERY_ROLE_REQ(void *pHost, INetData* poNetData);
int EncodeQUERY_ROLE_ACK(const void *pHost, INetData* poNetData);
int DecodeQUERY_ROLE_ACK(void *pHost, INetData* poNetData);
int EncodeADD_FRIEND_REQ(const void *pHost, INetData* poNetData);
int DecodeADD_FRIEND_REQ(void *pHost, INetData* poNetData);
int EncodeADD_FRIEND_ACK(const void *pHost, INetData* poNetData);
int DecodeADD_FRIEND_ACK(void *pHost, INetData* poNetData);
int EncodeREMOVE_FRIEND_REQ(const void *pHost, INetData* poNetData);
int DecodeREMOVE_FRIEND_REQ(void *pHost, INetData* poNetData);
int EncodeREMOVE_FRIEND_ACK(const void *pHost, INetData* poNetData);
int DecodeREMOVE_FRIEND_ACK(void *pHost, INetData* poNetData);
int EncodeDONATE_ACTION_POINT_REQ(const void *pHost, INetData* poNetData);
int DecodeDONATE_ACTION_POINT_REQ(void *pHost, INetData* poNetData);
int EncodeDONATE_ACTION_POINT_ACK(const void *pHost, INetData* poNetData);
int DecodeDONATE_ACTION_POINT_ACK(void *pHost, INetData* poNetData);
int EncodeDONATE_ACTION_POINT_OTHER_NTF(const void *pHost, INetData* poNetData);
int DecodeDONATE_ACTION_POINT_OTHER_NTF(void *pHost, INetData* poNetData);
int EncodeRECEIVE_ACTION_POINT_REQ(const void *pHost, INetData* poNetData);
int DecodeRECEIVE_ACTION_POINT_REQ(void *pHost, INetData* poNetData);
int EncodeRECEIVE_ACTION_POINT_ACK(const void *pHost, INetData* poNetData);
int DecodeRECEIVE_ACTION_POINT_ACK(void *pHost, INetData* poNetData);
int EncodeREQUEST_ADD_FRIEND_NTF(const void *pHost, INetData* poNetData);
int DecodeREQUEST_ADD_FRIEND_NTF(void *pHost, INetData* poNetData);
int EncodeRESPONSE_ADD_FRIEND_REQ(const void *pHost, INetData* poNetData);
int DecodeRESPONSE_ADD_FRIEND_REQ(void *pHost, INetData* poNetData);
int EncodeFRIEND_REMOVE_INVITE_NTF(const void *pHost, INetData* poNetData);
int DecodeFRIEND_REMOVE_INVITE_NTF(void *pHost, INetData* poNetData);
int EncodeFRIEND_INFO_CHANGE_NTF(const void *pHost, INetData* poNetData);
int DecodeFRIEND_INFO_CHANGE_NTF(void *pHost, INetData* poNetData);
int EncodeFRIEND_ASSIST_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeFRIEND_ASSIST_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeSELECT_FRIEND_ASSIST_REQ(const void *pHost, INetData* poNetData);
int DecodeSELECT_FRIEND_ASSIST_REQ(void *pHost, INetData* poNetData);
int EncodeSELECT_FRIEND_ASSIST_ACK(const void *pHost, INetData* poNetData);
int DecodeSELECT_FRIEND_ASSIST_ACK(void *pHost, INetData* poNetData);
int EncodeSAbyssRsServerInfo(const void *pHost, INetData* poNetData);
int DecodeSAbyssRsServerInfo(void *pHost, INetData* poNetData);
int EncodeABYSS_TRIGGER_REQ(const void *pHost, INetData* poNetData);
int DecodeABYSS_TRIGGER_REQ(void *pHost, INetData* poNetData);
int EncodeABYSS_TRIGGER_ACK(const void *pHost, INetData* poNetData);
int DecodeABYSS_TRIGGER_ACK(void *pHost, INetData* poNetData);
int EncodeABYSS_OPEN_REQ(const void *pHost, INetData* poNetData);
int DecodeABYSS_OPEN_REQ(void *pHost, INetData* poNetData);
int EncodeABYSS_OPEN_ACK(const void *pHost, INetData* poNetData);
int DecodeABYSS_OPEN_ACK(void *pHost, INetData* poNetData);
int EncodeABYSS_OPEN_NTF(const void *pHost, INetData* poNetData);
int DecodeABYSS_OPEN_NTF(void *pHost, INetData* poNetData);
int EncodeGET_ABYSS_TRIGGER_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeGET_ABYSS_TRIGGER_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeGET_ABYSS_TRIGGER_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeGET_ABYSS_TRIGGER_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeGET_ABYSS_OPEN_LIST_REQ(const void *pHost, INetData* poNetData);
int DecodeGET_ABYSS_OPEN_LIST_REQ(void *pHost, INetData* poNetData);
int EncodeGET_ABYSS_OPEN_LIST_ACK(const void *pHost, INetData* poNetData);
int DecodeGET_ABYSS_OPEN_LIST_ACK(void *pHost, INetData* poNetData);
int EncodeABYSS_OPEN_RECORD(const void *pHost, INetData* poNetData);
int DecodeABYSS_OPEN_RECORD(void *pHost, INetData* poNetData);
int EncodeGET_ABYSS_OPEN_REC_REQ(const void *pHost, INetData* poNetData);
int DecodeGET_ABYSS_OPEN_REC_REQ(void *pHost, INetData* poNetData);
int EncodeGET_ABYSS_OPEN_REC_ACK(const void *pHost, INetData* poNetData);
int DecodeGET_ABYSS_OPEN_REC_ACK(void *pHost, INetData* poNetData);
int EncodeATK_INFO(const void *pHost, INetData* poNetData);
int DecodeATK_INFO(void *pHost, INetData* poNetData);
int EncodeATK_INFO_LIST(const void *pHost, INetData* poNetData);
int DecodeATK_INFO_LIST(void *pHost, INetData* poNetData);
int EncodeABYSS_SEND_REWARD_MAIL(const void *pHost, INetData* poNetData);
int DecodeABYSS_SEND_REWARD_MAIL(void *pHost, INetData* poNetData);
int EncodeSMailDetail(const void *pHost, INetData* poNetData);
int DecodeSMailDetail(void *pHost, INetData* poNetData);
int EncodeMAIL_LIST(const void *pHost, INetData* poNetData);
int DecodeMAIL_LIST(void *pHost, INetData* poNetData);
int EncodeSEND_MAIL(const void *pHost, INetData* poNetData);
int DecodeSEND_MAIL(void *pHost, INetData* poNetData);
int EncodeMAIL_ID_LIST(const void *pHost, INetData* poNetData);
int DecodeMAIL_ID_LIST(void *pHost, INetData* poNetData);
int EncodeSPVPRoleAllData(const void *pHost, INetData* poNetData);
int DecodeSPVPRoleAllData(void *pHost, INetData* poNetData);
int EncodePVP_MATCH(const void *pHost, INetData* poNetData);
int DecodePVP_MATCH(void *pHost, INetData* poNetData);
int EncodePVP_MATCH_LIST(const void *pHost, INetData* poNetData);
int DecodePVP_MATCH_LIST(void *pHost, INetData* poNetData);
int EncodePVP_RANK(const void *pHost, INetData* poNetData);
int DecodePVP_RANK(void *pHost, INetData* poNetData);
int EncodePVP_RANK_LIST(const void *pHost, INetData* poNetData);
int DecodePVP_RANK_LIST(void *pHost, INetData* poNetData);
int EncodeSRobotPet(const void *pHost, INetData* poNetData);
int DecodeSRobotPet(void *pHost, INetData* poNetData);
int EncodeSRobotPets(const void *pHost, INetData* poNetData);
int DecodeSRobotPets(void *pHost, INetData* poNetData);
int EncodeSRobosEquip(const void *pHost, INetData* poNetData);
int DecodeSRobosEquip(void *pHost, INetData* poNetData);
int EncodeSRobosEquips(const void *pHost, INetData* poNetData);
int DecodeSRobosEquips(void *pHost, INetData* poNetData);
int EncodeSRobotBuff(const void *pHost, INetData* poNetData);
int DecodeSRobotBuff(void *pHost, INetData* poNetData);
int EncodeSRobotBuffs(const void *pHost, INetData* poNetData);
int DecodeSRobotBuffs(void *pHost, INetData* poNetData);
int EncodeSPVPRobot(const void *pHost, INetData* poNetData);
int DecodeSPVPRobot(void *pHost, INetData* poNetData);
int EncodeSSeverPVPBattleInfo(const void *pHost, INetData* poNetData);
int DecodeSSeverPVPBattleInfo(void *pHost, INetData* poNetData);
int EncodeWBAtkInfo(const void *pHost, INetData* poNetData);
int DecodeWBAtkInfo(void *pHost, INetData* poNetData);
int EncodeWBBossBuff(const void *pHost, INetData* poNetData);
int DecodeWBBossBuff(void *pHost, INetData* poNetData);
int EncodeSWorldBossInfo(const void *pHost, INetData* poNetData);
int DecodeSWorldBossInfo(void *pHost, INetData* poNetData);
int EncodeSRankRoleReq(const void *pHost, INetData* poNetData);
int DecodeSRankRoleReq(void *pHost, INetData* poNetData);
int EncodeSRankRole(const void *pHost, INetData* poNetData);
int DecodeSRankRole(void *pHost, INetData* poNetData);
int EncodeSRankRoleAck(const void *pHost, INetData* poNetData);
int DecodeSRankRoleAck(void *pHost, INetData* poNetData);
int EncodeSGuildListReq(const void *pHost, INetData* poNetData);
int DecodeSGuildListReq(void *pHost, INetData* poNetData);
int EncodeSGuildListInfo(const void *pHost, INetData* poNetData);
int DecodeSGuildListInfo(void *pHost, INetData* poNetData);
int EncodeSGuildListAck(const void *pHost, INetData* poNetData);
int DecodeSGuildListAck(void *pHost, INetData* poNetData);
int EncodeSGuildEnterReq(const void *pHost, INetData* poNetData);
int DecodeSGuildEnterReq(void *pHost, INetData* poNetData);
int EncodeSGuildEnterAck(const void *pHost, INetData* poNetData);
int DecodeSGuildEnterAck(void *pHost, INetData* poNetData);
int EncodeSGuildLeaveAck(const void *pHost, INetData* poNetData);
int DecodeSGuildLeaveAck(void *pHost, INetData* poNetData);
int EncodeSGuildCreateReq(const void *pHost, INetData* poNetData);
int DecodeSGuildCreateReq(void *pHost, INetData* poNetData);
int EncodeSGuildCreateAck(const void *pHost, INetData* poNetData);
int DecodeSGuildCreateAck(void *pHost, INetData* poNetData);
int EncodeSGuildBaseInfo(const void *pHost, INetData* poNetData);
int DecodeSGuildBaseInfo(void *pHost, INetData* poNetData);
int EncodeSGuildLog_MemberEnter(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_MemberEnter(void *pHost, INetData* poNetData);
int EncodeSGuildLog_MemberKick(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_MemberKick(void *pHost, INetData* poNetData);
int EncodeSGuildLog_PotitionChange(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_PotitionChange(void *pHost, INetData* poNetData);
int EncodeSGuildLog_PresidentChange(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_PresidentChange(void *pHost, INetData* poNetData);
int EncodeSGuildLog_PresidentImpeach(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_PresidentImpeach(void *pHost, INetData* poNetData);
int EncodeSGuildLog_LevelUp(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_LevelUp(void *pHost, INetData* poNetData);
int EncodeSGuildLog_TechnologyUp(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_TechnologyUp(void *pHost, INetData* poNetData);
int EncodeSGuildLog_Pray(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_Pray(void *pHost, INetData* poNetData);
int EncodeSGuildLog_NoticeChange(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_NoticeChange(void *pHost, INetData* poNetData);
int EncodeSGuildLog_AimChange(const void *pHost, INetData* poNetData);
int DecodeSGuildLog_AimChange(void *pHost, INetData* poNetData);
int EncodeSGuildLogAck(const void *pHost, INetData* poNetData);
int DecodeSGuildLogAck(void *pHost, INetData* poNetData);
int EncodeSGuildChangeNoticeReq(const void *pHost, INetData* poNetData);
int DecodeSGuildChangeNoticeReq(void *pHost, INetData* poNetData);
int EncodeSGuildChangeNoticeAck(const void *pHost, INetData* poNetData);
int DecodeSGuildChangeNoticeAck(void *pHost, INetData* poNetData);
int EncodeSGuildMemberListInfo(const void *pHost, INetData* poNetData);
int DecodeSGuildMemberListInfo(void *pHost, INetData* poNetData);
int EncodeSGuildDetailAck(const void *pHost, INetData* poNetData);
int DecodeSGuildDetailAck(void *pHost, INetData* poNetData);
int EncodeSGuildEnterInfo(const void *pHost, INetData* poNetData);
int DecodeSGuildEnterInfo(void *pHost, INetData* poNetData);
int EncodeSGuildEnterListAck(const void *pHost, INetData* poNetData);
int DecodeSGuildEnterListAck(void *pHost, INetData* poNetData);
int EncodeSGuildEnterAcceptReq(const void *pHost, INetData* poNetData);
int DecodeSGuildEnterAcceptReq(void *pHost, INetData* poNetData);
int EncodeSGuildEnterAcceptAck(const void *pHost, INetData* poNetData);
int DecodeSGuildEnterAcceptAck(void *pHost, INetData* poNetData);
int EncodeSGuildEnterClearAck(const void *pHost, INetData* poNetData);
int DecodeSGuildEnterClearAck(void *pHost, INetData* poNetData);
/*Encode and Decode Function Declare End*/

typedef int (*EnFuncCHeaderProto)(const void *pHost, INetData* poNetData);
typedef int (*DeFuncCHeaderProto)(void *pHost, INetData* poNetData);

class CHeaderProto
{
public:
	CHeaderProto();
	~CHeaderProto();
	int Encode(int iMsgID, const void *pHost, char *pNet, int iNetSize);
	int Decode(int iMsgID, const char *pNet,int iNetSize, void *pHost, int iHostSize);
	const char * GetProtoMd5() const{ return "8A42926F0AFF3053C005708651F46B28"; }
	int GetPkgSize(int iMsgID) { return m_iPkgSizeArray[iMsgID - HEADERPROTO_MSGID_OFFSET];}
	EnFuncCHeaderProto FindEncodeFunc(int iMsgID);
	DeFuncCHeaderProto FindDecodeFunc(int iMsgID);
	bool Init();
	int GetPkgEncodeCount(int iMsgID);
	int GetPkgDecodeCount(int iMsgID);
#ifdef HEADERPROTO_ID2NAME_DES
    const char* GetPkgName(int iMsgID);
#endif
   void SetData(INetData &oData){m_poData = &oData;}

private:
	EnFuncCHeaderProto       m_EncodeFuncArray[HEADERPROTO_MSGID_RANGE];
	DeFuncCHeaderProto       m_DecodeFuncArray[HEADERPROTO_MSGID_RANGE];
	int      m_iPkgSizeArray[HEADERPROTO_MSGID_RANGE];
	CNetData m_oData;
   INetData *m_poData;
	int      m_iPkgEncodeCount[HEADERPROTO_MSGID_RANGE];
	int      m_iPkgDecodeCount[HEADERPROTO_MSGID_RANGE];
#ifdef HEADERPROTO_ID2NAME_DES
	const char* m_arrPkgID2Name[HEADERPROTO_MSGID_RANGE];
#endif
};

#endif
